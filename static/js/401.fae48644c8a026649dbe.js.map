{"version":3,"sources":["webpack:///static/js/401.fae48644c8a026649dbe.js","webpack:///./command/fdisk.md?9397","webpack:///./command/fdisk.md","webpack:///./command/fdisk.md?f79f"],"names":["webpackJsonp","1170","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","151","__webpack_require__","739","Component"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAgBC,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,aAAAR,EAAAQ,GAAA,yFAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACAI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,uBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,0IAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,gCAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,mBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,4CAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,MAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,OAAAR,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,mtBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,MAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,OAAAR,EAAAQ,GAAA,kBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,+WAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,MAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,OAAAR,EAAAQ,GAAA,oBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,6GAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,sBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,0QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,MAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,OAAAR,EAAAQ,GAAA,2BAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,ymBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,eAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,2WAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,wSAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,iBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,6aAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,ghBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,iBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,okBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,6EAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,2EAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,kBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,0JAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qCAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,4zBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,2xBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,UAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,aAAAR,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,sBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,4MAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,eAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,uXAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qBAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,2uBDUGI,IACA,SAAUf,EAAQC,EAASe,GE9IjChB,EAAAC,QAAAe,EAAA,MFoJMC,IACA,SAAUjB,EAAQC,EAASe,GGrJjC,GAAAE,GAAAF,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAhB,GAAAC,QAAAiB,EAAAjB","file":"static/js/401.fae48644c8a026649dbe.js","sourcesContent":["webpackJsonp([401],{\n\n/***/ 1170:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"fdisk命令\")]), _vm._v(\"用于观察硬盘实体使用情况，也可对硬盘分区。它采用传统的问答式界面，而非类似DOS fdisk的cfdisk互动式操作界面，因此在使用上较为不便，但功能却丝毫不打折扣。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fdisk(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<分区大小>：指定每个分区的大小；\\n-l：列出指定的外围设备的分区表状况；\\n-s<分区编号>：将指定的分区大小输出到标准输出上，单位为区块；\\n-u：搭配\\\"-l\\\"参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址；\\n-v：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"设备文件：指定要进行分区或者显示分区的硬盘设备文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"首先选择要进行操作的磁盘：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# fdisk /dev/sdb\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"m\")]), _vm._v(\"列出可以执行的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[command](#/command \\\"command命令\\\") (m for [help](#/help \\\"help命令\\\")): m\\nCommand action\\n   a   toggle a bootable flag\\n   b   edit bsd disklabel\\n   c   toggle the dos compatibility flag\\n   d   delete a partition\\n   l   list known partition types\\n   m   print this menu\\n   n   add a new partition\\n   o   create a new empty DOS partition table\\n   p   print the partition table\\n   q   quit without saving changes\\n   s   create a new empty Sun disklabel\\n   t   change a partition's system [id](#/id \\\"id命令\\\")\\n   u   change display/entry units\\n   v   verify the partition table\\n   [w](#/w \\\"w命令\\\")   [write](#/write \\\"write命令\\\") table to disk and [exit](#/exit \\\"exit命令\\\")\\n   x   extra functionality (experts only)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"p\")]), _vm._v(\"列出磁盘目前的分区情况：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1           1        8001   8e  Linux LVM\\n/dev/sdb2               2          26      200812+  83  Linux\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"d\")]), _vm._v(\"然后选择分区，删除现有分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): d\\nPartition number (1-4): 1\\n\\nCommand (m for help): d\\nSelected partition 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查看分区情况，确认分区已经删除：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): print\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n\\nCommand (m for help):\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"n\")]), _vm._v(\"建立新的磁盘分区，首先建立两个主磁盘分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\np    //建立主分区\\nPartition number (1-4): 1  //分区号\\nFirst cylinder (1-391, default 1):  //分区起始位置\\nUsing default value 1\\n[last](#/last \\\"last命令\\\") cylinder or +size or +sizeM or +sizeK (1-391, default 391): 100  //分区结束位置，单位为扇区\\n\\nCommand (m for help): n  //再建立一个分区\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\np \\nPartition number (1-4): 2  //分区号为2\\nFirst cylinder (101-391, default 101):\\nUsing default value 101\\nLast cylinder or +size or +sizeM or +sizeK (101-391, default 391): +200M  //分区结束位置，单位为M\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再建立一个逻辑分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\ne  //选择扩展分区\\nPartition number (1-4): 3\\nFirst cylinder (126-391, default 126):\\nUsing default value 126\\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391):\\nUsing default value 391\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认扩展分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n/dev/sdb3             126         391     2136645    5  Extended\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在扩展分区上建立两个逻辑分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   l   logical (5 or over)\\n   p   primary partition (1-4)\\nl //选择逻辑分区\\nFirst cylinder (126-391, default 126):\\nUsing default value 126\\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391): +400M    \\n\\nCommand (m for help): n\\nCommand action\\n   l   logical (5 or over)\\n   p   primary partition (1-4)\\nl\\nFirst cylinder (176-391, default 176):\\nUsing default value 176\\nLast cylinder or +size or +sizeM or +sizeK (176-391, default 391):\\nUsing default value 391\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认逻辑分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n/dev/sdb3             126         391     2136645    5  Extended\\n/dev/sdb5             126         175      401593+  83  Linux\\n/dev/sdb6             176         391     1734988+  83  Linux\\n\\nCommand (m for help):\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从上面的结果我们可以看到，在硬盘sdb我们建立了2个主分区（sdb1，sdb2），1个扩展分区（sdb3），2个逻辑分区（sdb5，sdb6）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：主分区和扩展分区的磁盘号位1-4，也就是说最多有4个主分区或者扩展分区，逻辑分区开始的磁盘号为5，因此在这个实验中试没有sdb4的。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"最后对分区操作进行保存：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): w\\nThe partition table has been altered!\\n\\nCalling ioctl() to re-[read](#/read \\\"read命令\\\") partition table.\\nSyncing disks.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"建立好分区之后我们还需要对分区进行格式化才能在系统中使用磁盘。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在sdb1上建立ext2分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkfs](#/mkfs \\\"mkfs命令\\\").ext2 /dev/sdb1\\n[mke2fs](#/mke2fs \\\"mke2fs命令\\\") 1.39 (29-May-2006)\\nFilesystem label=\\nOS [type](#/type \\\"type命令\\\"): Linux\\nBlock size=4096 (log=2)\\nFragment size=4096 (log=2)\\n100576 inodes, 200804 blocks\\n10040 blocks (5.00%) reserved for the super user\\nFirst data block=0\\nMaximum filesystem blocks=209715200\\n7 block [groups](#/groups \\\"groups命令\\\")\\n32768 blocks per group, 32768 fragments per group\\n14368 inodes per group\\nSuperblock backups stored on blocks:\\n        32768, 98304, 163840\\n\\nWriting inode tables: done                           \\nWriting superblocks and filesystem accounting information: done\\n\\nThis filesystem will be automatically checked every 32 mounts or\\n180 days, whichever comes first.  Use [tune2fs](#/tune2fs \\\"tune2fs命令\\\") -c or -i to override.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在sdb6上建立ext3分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# mkfs.ext3 /dev/sdb6\\nmke2fs 1.39 (29-May-2006)\\nFilesystem label=\\nOS type: Linux\\nBlock size=4096 (log=2)\\nFragment size=4096 (log=2)\\n217280 inodes, 433747 blocks\\n21687 blocks (5.00%) reserved for the super user\\nFirst data block=0\\nMaximum filesystem blocks=444596224\\n14 block groups\\n32768 blocks per group, 32768 fragments per group\\n15520 inodes per group\\nSuperblock backups stored on blocks:\\n        32768, 98304, 163840, 229376, 294912\\n\\nWriting inode tables: done                           \\nCreating journal (8192 blocks): done\\nWriting superblocks and filesystem accounting information: done\\n\\nThis filesystem will be automatically checked every 32 mounts or\\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\\n[root@localhost ~]#\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"建立两个目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/oracle\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/web\")]), _vm._v(\"，将新建好的两个分区挂载到系统：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkdir](#/mkdir \\\"mkdir命令\\\") /oracle\\n[root@localhost ~]# mkdir /web\\n[root@localhost ~]# [mount](#/mount \\\"mount命令\\\") /dev/sdb1 /oracle\\n[root@localhost ~]# mount /dev/sdb6 /web\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查看分区挂载情况：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [df](#/df \\\"df命令\\\") -h\\n文件系统              容量  已用 可用 已用% 挂载点\\n/dev/mapper/VolGroup00-LogVol00\\n                      6.7G  2.8G  3.6G  44% /\\n/dev/sda1              99M   12M   82M  13% /boot\\ntmpfs                 125M     0  125M   0% /dev/shm\\n/dev/sdb1             773M  808K  733M   1% /oracle\\n/dev/sdb6             1.7G   35M  1.6G   3% /web\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果需要每次开机自动挂载则需要修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/fstab\")]), _vm._v(\"文件，加入两行配置：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# vim /etc/fstab\\n\\n/dev/VolGroup00/LogVol00 /                       ext3    defaults        1 1\\nLABEL=/boot             /boot                   ext3    defaults        1 2\\ntmpfs                   /dev/shm                tmpfs   defaults        0 0\\ndevpts                  /dev/pts                devpts  gid=5,mode=620  0 0\\nsysfs                   /sys                    sysfs   defaults        0 0\\nproc                    /proc                   proc    defaults        0 0\\n/dev/VolGroup00/LogVol01 swap                    swap    defaults        0 0\\n/dev/sdb1               /oracle                 ext2    defaults        0 0\\n/dev/sdb6               /web                    ext3    defaults        0 0\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 151:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(739);\n\n/***/ }),\n\n/***/ 739:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1170),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/401.fae48644c8a026649dbe.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"fdisk命令\")]), _vm._v(\"用于观察硬盘实体使用情况，也可对硬盘分区。它采用传统的问答式界面，而非类似DOS fdisk的cfdisk互动式操作界面，因此在使用上较为不便，但功能却丝毫不打折扣。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fdisk(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<分区大小>：指定每个分区的大小；\\n-l：列出指定的外围设备的分区表状况；\\n-s<分区编号>：将指定的分区大小输出到标准输出上，单位为区块；\\n-u：搭配\\\"-l\\\"参数列表，会用分区数目取代柱面数目，来表示每个分区的起始地址；\\n-v：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"设备文件：指定要进行分区或者显示分区的硬盘设备文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"首先选择要进行操作的磁盘：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# fdisk /dev/sdb\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"m\")]), _vm._v(\"列出可以执行的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[command](#/command \\\"command命令\\\") (m for [help](#/help \\\"help命令\\\")): m\\nCommand action\\n   a   toggle a bootable flag\\n   b   edit bsd disklabel\\n   c   toggle the dos compatibility flag\\n   d   delete a partition\\n   l   list known partition types\\n   m   print this menu\\n   n   add a new partition\\n   o   create a new empty DOS partition table\\n   p   print the partition table\\n   q   quit without saving changes\\n   s   create a new empty Sun disklabel\\n   t   change a partition's system [id](#/id \\\"id命令\\\")\\n   u   change display/entry units\\n   v   verify the partition table\\n   [w](#/w \\\"w命令\\\")   [write](#/write \\\"write命令\\\") table to disk and [exit](#/exit \\\"exit命令\\\")\\n   x   extra functionality (experts only)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"p\")]), _vm._v(\"列出磁盘目前的分区情况：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1           1        8001   8e  Linux LVM\\n/dev/sdb2               2          26      200812+  83  Linux\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"d\")]), _vm._v(\"然后选择分区，删除现有分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): d\\nPartition number (1-4): 1\\n\\nCommand (m for help): d\\nSelected partition 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查看分区情况，确认分区已经删除：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): print\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n\\nCommand (m for help):\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"n\")]), _vm._v(\"建立新的磁盘分区，首先建立两个主磁盘分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\np    //建立主分区\\nPartition number (1-4): 1  //分区号\\nFirst cylinder (1-391, default 1):  //分区起始位置\\nUsing default value 1\\n[last](#/last \\\"last命令\\\") cylinder or +size or +sizeM or +sizeK (1-391, default 391): 100  //分区结束位置，单位为扇区\\n\\nCommand (m for help): n  //再建立一个分区\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\np \\nPartition number (1-4): 2  //分区号为2\\nFirst cylinder (101-391, default 101):\\nUsing default value 101\\nLast cylinder or +size or +sizeM or +sizeK (101-391, default 391): +200M  //分区结束位置，单位为M\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再建立一个逻辑分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   e   extended\\n   p   primary partition (1-4)\\ne  //选择扩展分区\\nPartition number (1-4): 3\\nFirst cylinder (126-391, default 126):\\nUsing default value 126\\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391):\\nUsing default value 391\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认扩展分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n/dev/sdb3             126         391     2136645    5  Extended\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在扩展分区上建立两个逻辑分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): n\\nCommand action\\n   l   logical (5 or over)\\n   p   primary partition (1-4)\\nl //选择逻辑分区\\nFirst cylinder (126-391, default 126):\\nUsing default value 126\\nLast cylinder or +size or +sizeM or +sizeK (126-391, default 391): +400M    \\n\\nCommand (m for help): n\\nCommand action\\n   l   logical (5 or over)\\n   p   primary partition (1-4)\\nl\\nFirst cylinder (176-391, default 176):\\nUsing default value 176\\nLast cylinder or +size or +sizeM or +sizeK (176-391, default 391):\\nUsing default value 391\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"确认逻辑分区建立成功：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): p\\n\\nDisk /dev/sdb: 3221 MB, 3221225472 bytes\\n255 heads, 63 sectors/track, 391 cylinders\\nUnits = cylinders of 16065 * 512 = 8225280 bytes\\n\\n   Device Boot      Start         End      Blocks   Id  System\\n/dev/sdb1               1         100      803218+  83  Linux\\n/dev/sdb2             101         125      200812+  83  Linux\\n/dev/sdb3             126         391     2136645    5  Extended\\n/dev/sdb5             126         175      401593+  83  Linux\\n/dev/sdb6             176         391     1734988+  83  Linux\\n\\nCommand (m for help):\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从上面的结果我们可以看到，在硬盘sdb我们建立了2个主分区（sdb1，sdb2），1个扩展分区（sdb3），2个逻辑分区（sdb5，sdb6）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：主分区和扩展分区的磁盘号位1-4，也就是说最多有4个主分区或者扩展分区，逻辑分区开始的磁盘号为5，因此在这个实验中试没有sdb4的。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"最后对分区操作进行保存：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Command (m for help): w\\nThe partition table has been altered!\\n\\nCalling ioctl() to re-[read](#/read \\\"read命令\\\") partition table.\\nSyncing disks.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"建立好分区之后我们还需要对分区进行格式化才能在系统中使用磁盘。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在sdb1上建立ext2分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkfs](#/mkfs \\\"mkfs命令\\\").ext2 /dev/sdb1\\n[mke2fs](#/mke2fs \\\"mke2fs命令\\\") 1.39 (29-May-2006)\\nFilesystem label=\\nOS [type](#/type \\\"type命令\\\"): Linux\\nBlock size=4096 (log=2)\\nFragment size=4096 (log=2)\\n100576 inodes, 200804 blocks\\n10040 blocks (5.00%) reserved for the super user\\nFirst data block=0\\nMaximum filesystem blocks=209715200\\n7 block [groups](#/groups \\\"groups命令\\\")\\n32768 blocks per group, 32768 fragments per group\\n14368 inodes per group\\nSuperblock backups stored on blocks:\\n        32768, 98304, 163840\\n\\nWriting inode tables: done                           \\nWriting superblocks and filesystem accounting information: done\\n\\nThis filesystem will be automatically checked every 32 mounts or\\n180 days, whichever comes first.  Use [tune2fs](#/tune2fs \\\"tune2fs命令\\\") -c or -i to override.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在sdb6上建立ext3分区：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# mkfs.ext3 /dev/sdb6\\nmke2fs 1.39 (29-May-2006)\\nFilesystem label=\\nOS type: Linux\\nBlock size=4096 (log=2)\\nFragment size=4096 (log=2)\\n217280 inodes, 433747 blocks\\n21687 blocks (5.00%) reserved for the super user\\nFirst data block=0\\nMaximum filesystem blocks=444596224\\n14 block groups\\n32768 blocks per group, 32768 fragments per group\\n15520 inodes per group\\nSuperblock backups stored on blocks:\\n        32768, 98304, 163840, 229376, 294912\\n\\nWriting inode tables: done                           \\nCreating journal (8192 blocks): done\\nWriting superblocks and filesystem accounting information: done\\n\\nThis filesystem will be automatically checked every 32 mounts or\\n180 days, whichever comes first.  Use tune2fs -c or -i to override.\\n[root@localhost ~]#\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"建立两个目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/oracle\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/web\")]), _vm._v(\"，将新建好的两个分区挂载到系统：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkdir](#/mkdir \\\"mkdir命令\\\") /oracle\\n[root@localhost ~]# mkdir /web\\n[root@localhost ~]# [mount](#/mount \\\"mount命令\\\") /dev/sdb1 /oracle\\n[root@localhost ~]# mount /dev/sdb6 /web\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查看分区挂载情况：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [df](#/df \\\"df命令\\\") -h\\n文件系统              容量  已用 可用 已用% 挂载点\\n/dev/mapper/VolGroup00-LogVol00\\n                      6.7G  2.8G  3.6G  44% /\\n/dev/sda1              99M   12M   82M  13% /boot\\ntmpfs                 125M     0  125M   0% /dev/shm\\n/dev/sdb1             773M  808K  733M   1% /oracle\\n/dev/sdb6             1.7G   35M  1.6G   3% /web\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果需要每次开机自动挂载则需要修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/fstab\")]), _vm._v(\"文件，加入两行配置：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# vim /etc/fstab\\n\\n/dev/VolGroup00/LogVol00 /                       ext3    defaults        1 1\\nLABEL=/boot             /boot                   ext3    defaults        1 2\\ntmpfs                   /dev/shm                tmpfs   defaults        0 0\\ndevpts                  /dev/pts                devpts  gid=5,mode=620  0 0\\nsysfs                   /sys                    sysfs   defaults        0 0\\nproc                    /proc                   proc    defaults        0 0\\n/dev/VolGroup00/LogVol01 swap                    swap    defaults        0 0\\n/dev/sdb1               /oracle                 ext2    defaults        0 0\\n/dev/sdb6               /web                    ext3    defaults        0 0\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-0e3d8119\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/fdisk.md\n// module id = 1170\n// module chunks = 401","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./fdisk.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/fdisk.md\n// module id = 151\n// module chunks = 401","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0e3d8119\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./fdisk.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/fdisk.md\n// module id = 739\n// module chunks = 401"],"sourceRoot":""}