{"version":3,"sources":["webpack:///static/js/413.90d0a11427a57ec3b8d2.js","webpack:///./command/emacs.md?c00a","webpack:///./command/emacs.md","webpack:///./command/emacs.md?1068"],"names":["webpackJsonp","1234","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","138","__webpack_require__","727","Component"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAgBC,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,aAAAR,EAAAQ,GAAA,8FAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACAI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,uBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,mRAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,oBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,iBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,6EAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,wHAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,oVAAsIR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,eAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACzII,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,oKAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,WAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,iRAAuCR,EAAAQ,GAAA,KAAAH,EAAA,OAC1CI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,gTAAiRR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,WAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACpRI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,iJAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,6EAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,uDAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,+JAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,gLDUGI,IACA,SAAUf,EAAQC,EAASe,GE5FjChB,EAAAC,QAAAe,EAAA,MFkGMC,IACA,SAAUjB,EAAQC,EAASe,GGnGjC,GAAAE,GAAAF,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAhB,GAAAC,QAAAiB,EAAAjB","file":"static/js/413.90d0a11427a57ec3b8d2.js","sourcesContent":["webpackJsonp([413],{\n\n/***/ 1234:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"emacs命令\")]), _vm._v(\"是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"emacs(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"+<行号>：启动emacs编辑器，并将光标移动到制定行号的行；\\n-q：启动emacs编辑器，而不加载初始化文件；\\n-u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；\\n-t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；\\n-f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；\\n-l<lisp代码文件>：加载指定的lisp代码文件；\\n-[batch](#/batch \\\"batch命令\\\")：以批处理模式运行emacs编辑器。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定要编辑的文本文件。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"emacs命令操作大全\")]), _vm._v(\" \"), _c('p', [_vm._v(\"基本命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x C-c : 退出Emacs\\nC-x C-f : 打开一个文件，如果文件不存在，则创建一个文件\\nC-g : 取消未完成的命令\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-z (redefined): Undo；原来C-z是挂起Emacs（然后用[fg](#/fg \\\"fg命令\\\")命令调出）；C-x u 是默认的命令； 移动一下光标，再C-z就可以redo\\nM-d : 删除光标后的词语\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"移动光标\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-v : 向前翻页\\nM-v : 向后翻页\\nM-r : 将光标移动到屏幕中间那行\\nC-a : 移到行首\\nM-a : 移到句首，从行首到句首之间可能有空格\\nC-e : 移到行尾\\nM-e : 移到句尾\\nM-{ : 向上移动一段\\nM-} : 向下移动一段\\nC-right : 向前移动一个单词\\nC-left : 向后移动一个单词\\nC-up : 向前移动一段\\nC-down : 向后移动一段\\nM-< : 移到整个文本开头\\nM-> : 移到整个文本末尾\\nC-u 数字 命令 : 执行多次(数字表示次数)该命令；\\\"M-数字 命令\\\" 也可以\\nM-x goto-line : 移动到某一行\\nC-l : 重绘屏幕，效果就是当前编辑行移动窗口中央\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Buffer 相关\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x k : 关闭当前buffer\\nC-x b : 切换到前一个编辑的buffer\\nC-x C-b : 列出当前所有buffer\\nC-x C-s : 保存当前buffer\\nC-x s : 保存所有未保存的buffer，会提示你是否需要保存\\nC-x C-[w](#/w \\\"w命令\\\") : 文件另存为\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"拷贝与粘贴\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"M-space (redefined): 设置mark; C-@ 是默认命令\\nC-w (redefined) : 剪切一块区域；如果没有设置mark，则是剪切一行\\nM-w (redefined) : 拷贝一块区域；如果没有设置mark, 则是拷贝一行\\nC-k : 从当前位置剪切到行尾\\nC-y : 粘贴\\nM-y : 用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。\\nC-x r k : 执行矩形区域的剪切\\nC-x r y : 执行矩形区域的粘贴\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"窗口操作\\nC-x 0 : 关闭当前窗口\\nC-x 1 : 将当前窗口最大化\\nC-x 2 : 垂直分割窗口\\nC-x 3 : 水平分割窗口\\nM-o (redefined) : 在窗口之间切换; C-x o 是默认命令\\nC-x 5 1/2/3/0 : 对frame类似的操作\\nC-x < : 窗口内容右卷\\nC-x > : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）\\n(C-u) C-x ^ : 加高当前窗口，如果有C-u，则每次加高4行\\n(C-u) C-x } : 加宽当前窗口\\n(C-u) C-x { : 压窄当前窗口\\nESC C-v : 在其它窗口进行卷屏操作\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索和替换\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标\\nC-s RET : 普通搜索\\nC-r : 向前搜索\\nC-s RET C-w : 按单词查询\\nM-% : 查询替换，也就是替换前会询问一下\\nM-x replace-string : 普通替换\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Tags\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"M-! etags .c .h : 创建TAGS文件\\nM-. : 跳到tag所在位置\\nM-x list-tags : 列出tags\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"书签\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x r m : 设置书签bookmark\\nC-x r b : 跳到bookmark处\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"帮助\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-h ? : 查看帮助信息\\nC-h f : 查看一个函数\\nC-h v : 查看一个变量\\nC-h k : 查看一个键绑定 (C－h c 也是查看键绑定，但是信息较简略)\\nC-h C-f : 查看一个函数的[info](#/info \\\"info命令\\\")，非常有用\\nC-h i : 看Info\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其它\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-M-\\\\ : 对选中区域，按照某种格式(比如C程序)进行格式化\\nC-x h : 全部选中\\nM-! : 执行外部shell命令\\nM-x shell : 模拟shell的buffer\\nM-x term : 模拟terminal, C-c k 关闭terminal\\nC-x C-q : 修改buffer的只读属性\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 138:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(727);\n\n/***/ }),\n\n/***/ 727:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1234),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/413.90d0a11427a57ec3b8d2.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"emacs命令\")]), _vm._v(\"是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"emacs(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"+<行号>：启动emacs编辑器，并将光标移动到制定行号的行；\\n-q：启动emacs编辑器，而不加载初始化文件；\\n-u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；\\n-t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；\\n-f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；\\n-l<lisp代码文件>：加载指定的lisp代码文件；\\n-[batch](#/batch \\\"batch命令\\\")：以批处理模式运行emacs编辑器。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定要编辑的文本文件。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"emacs命令操作大全\")]), _vm._v(\" \"), _c('p', [_vm._v(\"基本命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x C-c : 退出Emacs\\nC-x C-f : 打开一个文件，如果文件不存在，则创建一个文件\\nC-g : 取消未完成的命令\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-z (redefined): Undo；原来C-z是挂起Emacs（然后用[fg](#/fg \\\"fg命令\\\")命令调出）；C-x u 是默认的命令； 移动一下光标，再C-z就可以redo\\nM-d : 删除光标后的词语\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"移动光标\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-v : 向前翻页\\nM-v : 向后翻页\\nM-r : 将光标移动到屏幕中间那行\\nC-a : 移到行首\\nM-a : 移到句首，从行首到句首之间可能有空格\\nC-e : 移到行尾\\nM-e : 移到句尾\\nM-{ : 向上移动一段\\nM-} : 向下移动一段\\nC-right : 向前移动一个单词\\nC-left : 向后移动一个单词\\nC-up : 向前移动一段\\nC-down : 向后移动一段\\nM-< : 移到整个文本开头\\nM-> : 移到整个文本末尾\\nC-u 数字 命令 : 执行多次(数字表示次数)该命令；\\\"M-数字 命令\\\" 也可以\\nM-x goto-line : 移动到某一行\\nC-l : 重绘屏幕，效果就是当前编辑行移动窗口中央\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Buffer 相关\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x k : 关闭当前buffer\\nC-x b : 切换到前一个编辑的buffer\\nC-x C-b : 列出当前所有buffer\\nC-x C-s : 保存当前buffer\\nC-x s : 保存所有未保存的buffer，会提示你是否需要保存\\nC-x C-[w](#/w \\\"w命令\\\") : 文件另存为\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"拷贝与粘贴\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"M-space (redefined): 设置mark; C-@ 是默认命令\\nC-w (redefined) : 剪切一块区域；如果没有设置mark，则是剪切一行\\nM-w (redefined) : 拷贝一块区域；如果没有设置mark, 则是拷贝一行\\nC-k : 从当前位置剪切到行尾\\nC-y : 粘贴\\nM-y : 用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。\\nC-x r k : 执行矩形区域的剪切\\nC-x r y : 执行矩形区域的粘贴\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"窗口操作\\nC-x 0 : 关闭当前窗口\\nC-x 1 : 将当前窗口最大化\\nC-x 2 : 垂直分割窗口\\nC-x 3 : 水平分割窗口\\nM-o (redefined) : 在窗口之间切换; C-x o 是默认命令\\nC-x 5 1/2/3/0 : 对frame类似的操作\\nC-x < : 窗口内容右卷\\nC-x > : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）\\n(C-u) C-x ^ : 加高当前窗口，如果有C-u，则每次加高4行\\n(C-u) C-x } : 加宽当前窗口\\n(C-u) C-x { : 压窄当前窗口\\nESC C-v : 在其它窗口进行卷屏操作\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索和替换\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标\\nC-s RET : 普通搜索\\nC-r : 向前搜索\\nC-s RET C-w : 按单词查询\\nM-% : 查询替换，也就是替换前会询问一下\\nM-x replace-string : 普通替换\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Tags\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"M-! etags .c .h : 创建TAGS文件\\nM-. : 跳到tag所在位置\\nM-x list-tags : 列出tags\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"书签\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-x r m : 设置书签bookmark\\nC-x r b : 跳到bookmark处\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"帮助\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-h ? : 查看帮助信息\\nC-h f : 查看一个函数\\nC-h v : 查看一个变量\\nC-h k : 查看一个键绑定 (C－h c 也是查看键绑定，但是信息较简略)\\nC-h C-f : 查看一个函数的[info](#/info \\\"info命令\\\")，非常有用\\nC-h i : 看Info\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其它\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"C-M-\\\\ : 对选中区域，按照某种格式(比如C程序)进行格式化\\nC-x h : 全部选中\\nM-! : 执行外部shell命令\\nM-x shell : 模拟shell的buffer\\nM-x term : 模拟terminal, C-c k 关闭terminal\\nC-x C-q : 修改buffer的只读属性\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-1bcd2831\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/emacs.md\n// module id = 1234\n// module chunks = 413","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./emacs.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/emacs.md\n// module id = 138\n// module chunks = 413","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1bcd2831\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./emacs.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/emacs.md\n// module id = 727\n// module chunks = 413"],"sourceRoot":""}