{"version":3,"sources":["webpack:///static/js/369.5762fb712a9ee1c3271f.js","webpack:///./command/grub.md?db68","webpack:///./command/grub.md","webpack:///./command/grub.md?3867"],"names":["webpackJsonp","1565","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","182","__webpack_require__","771","Component"],"mappings":"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","file":"static/js/369.5762fb712a9ee1c3271f.js","sourcesContent":["webpackJsonp([369],{\n\n/***/ 1565:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"grub命令\")]), _vm._v(\"是多重引导程序grub的命令行shell工具。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grub(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"--[batch](#/batch \\\"batch命令\\\")：打开批处理模式；\\n--boot-drive=<驱动器>：指定stage2的引导驱动器；\\n--config-[file](#/file \\\"file命令\\\")<配置文件>：指定stage2的配置文件；\\n--device-map=<文件>：指定设备的映射文件；\\n--[help](#/help \\\"help命令\\\")：显示帮助信息；\\n--[install](#/install \\\"install命令\\\")-partition=<分区>：指定stage2安装分区；\\n--no-config-file：不使用配置文件；\\n--no-pager：不使用内部分页器；\\n--preset-menu：使用预设菜单；\\n--probe-second-floppy：检测第二个软盘驱动器；\\n--[read](#/read \\\"read命令\\\")-only：只读模式。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"利用grub命令来启动损坏的Linux系统，可能你的电脑因为某些原因损坏不能自动启动了。当然原因很多，可能的现象也很多。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里说一下这种情况下的处理方法，即：屏幕上提示\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"grub>\")]), _vm._v(\"，但你的硬盘上数据没有丢失，各分区都是好的。这种情况是你的grub信息损坏了，但比较严重的是系统启动不了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当然，在正常启动情况下，屏幕上出现grub的启动项选择菜单时按\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"c\")]), _vm._v(\"键也是可以进入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"grub>\")]), _vm._v(\"状态的。这时候我们需要用grub的命令来手工启动系统。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"只需要用到四个命令boot、kernel、initrd、boot。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"但grub本身命令很多，比如查看文件内容的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cat\",\n      \"title\": \"cat命令\"\n    }\n  }, [_vm._v(\"cat\")]), _vm._v(\" ，你输入help会得到。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"首先，输入“ root (hd ” ，然后按两次 TAB 键； /* 这会列出你电脑上可能的磁盘设备，硬盘为 hd0/hd1 或 sd0/sd1 等 */\")]), _vm._v(\" \"), _c('p', [_vm._v(\"然后，选择你的安装 Linux 系统的硬盘，比如 hd0 ，输入 “ root (hd0, ” 再按两次 TAB 键； /* 这会列出你的第一块硬盘上的分区情况，你会知道哪个是 swap 交换分区， 0x82 ，哪个是 Linux 分区 0x83 */\")]), _vm._v(\" \"), _c('p', [_vm._v(\"选择你认为可能的 /boot 目录所在的分区， 输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"root (hd0, 1)\")]), _vm._v(\"回车；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"接着，输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /boot/vm\")]), _vm._v(\"， 按两次 TAB 键，如果出现一些 vm 开头的文件，比如 vmlinuz-2.6.15-26-386 说明这里是 /boot 所在的分区。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除上一次的输入，再输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /boot/initrd\")]), _vm._v(\"，按两次 TAB 键，如果出现一些 initrd 开头的文件，比如 initrd.img-2.6.15-26-386 说明这个 /boot 所在的分区有 initrd ，即 ramdisk 镜像；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除上一次的输入，再输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /sbin/[init](#/init \\\"init命令\\\")\")]), _vm._v(\"，按两次 TAB 键，如果出现一些 init 开头的文件，比如\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"说明这个分区是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"所在的分区；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果没有出现\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"文件，说明\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"(hd0,1)\")]), _vm._v(\"分区仅仅是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/boot\")]), _vm._v(\"分区而不是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"分区。重新输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"root (hd0,N)\")]), _vm._v(\"命令，这里 N 是某个 Linux 分区，然后再试\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /sbin/init\")]), _vm._v(\"， 直到屏幕上出现\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"，说明你找到了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"分区，严格来说，应该是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")]), _vm._v(\"目录所在的分区；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"依次输入命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"root (hd0,1)   /* 假设 /dev/hda2 是你的 /boot 所在的分区 */\\nkernel /boot/vmlinuz-2.6.15-26-386 ro dev=/dev/hda3    /* 假设 /dev/hda3 是你的 / 所在的分区 */\\ninitrd /boot/initrd.img-2.6.15-26-386\\nboot\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"即可启动系统。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的关键问题是如何确定系统的几个分区：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/boot\")]), _vm._v(\" \"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\" \"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")])])])\n}]}\n\n/***/ }),\n\n/***/ 182:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(771);\n\n/***/ }),\n\n/***/ 771:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1565),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/369.5762fb712a9ee1c3271f.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"grub命令\")]), _vm._v(\"是多重引导程序grub的命令行shell工具。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grub(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"--[batch](#/batch \\\"batch命令\\\")：打开批处理模式；\\n--boot-drive=<驱动器>：指定stage2的引导驱动器；\\n--config-[file](#/file \\\"file命令\\\")<配置文件>：指定stage2的配置文件；\\n--device-map=<文件>：指定设备的映射文件；\\n--[help](#/help \\\"help命令\\\")：显示帮助信息；\\n--[install](#/install \\\"install命令\\\")-partition=<分区>：指定stage2安装分区；\\n--no-config-file：不使用配置文件；\\n--no-pager：不使用内部分页器；\\n--preset-menu：使用预设菜单；\\n--probe-second-floppy：检测第二个软盘驱动器；\\n--[read](#/read \\\"read命令\\\")-only：只读模式。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"利用grub命令来启动损坏的Linux系统，可能你的电脑因为某些原因损坏不能自动启动了。当然原因很多，可能的现象也很多。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里说一下这种情况下的处理方法，即：屏幕上提示\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"grub>\")]), _vm._v(\"，但你的硬盘上数据没有丢失，各分区都是好的。这种情况是你的grub信息损坏了，但比较严重的是系统启动不了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当然，在正常启动情况下，屏幕上出现grub的启动项选择菜单时按\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"c\")]), _vm._v(\"键也是可以进入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"grub>\")]), _vm._v(\"状态的。这时候我们需要用grub的命令来手工启动系统。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"只需要用到四个命令boot、kernel、initrd、boot。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"但grub本身命令很多，比如查看文件内容的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cat\",\n      \"title\": \"cat命令\"\n    }\n  }, [_vm._v(\"cat\")]), _vm._v(\" ，你输入help会得到。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"首先，输入“ root (hd ” ，然后按两次 TAB 键； /* 这会列出你电脑上可能的磁盘设备，硬盘为 hd0/hd1 或 sd0/sd1 等 */\")]), _vm._v(\" \"), _c('p', [_vm._v(\"然后，选择你的安装 Linux 系统的硬盘，比如 hd0 ，输入 “ root (hd0, ” 再按两次 TAB 键； /* 这会列出你的第一块硬盘上的分区情况，你会知道哪个是 swap 交换分区， 0x82 ，哪个是 Linux 分区 0x83 */\")]), _vm._v(\" \"), _c('p', [_vm._v(\"选择你认为可能的 /boot 目录所在的分区， 输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"root (hd0, 1)\")]), _vm._v(\"回车；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"接着，输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /boot/vm\")]), _vm._v(\"， 按两次 TAB 键，如果出现一些 vm 开头的文件，比如 vmlinuz-2.6.15-26-386 说明这里是 /boot 所在的分区。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除上一次的输入，再输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /boot/initrd\")]), _vm._v(\"，按两次 TAB 键，如果出现一些 initrd 开头的文件，比如 initrd.img-2.6.15-26-386 说明这个 /boot 所在的分区有 initrd ，即 ramdisk 镜像；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除上一次的输入，再输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /sbin/[init](#/init \\\"init命令\\\")\")]), _vm._v(\"，按两次 TAB 键，如果出现一些 init 开头的文件，比如\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"说明这个分区是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"所在的分区；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果没有出现\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"文件，说明\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"(hd0,1)\")]), _vm._v(\"分区仅仅是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/boot\")]), _vm._v(\"分区而不是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"分区。重新输入\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"root (hd0,N)\")]), _vm._v(\"命令，这里 N 是某个 Linux 分区，然后再试\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"cat /sbin/init\")]), _vm._v(\"， 直到屏幕上出现\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin/init\")]), _vm._v(\"，说明你找到了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"分区，严格来说，应该是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")]), _vm._v(\"目录所在的分区；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"依次输入命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"root (hd0,1)   /* 假设 /dev/hda2 是你的 /boot 所在的分区 */\\nkernel /boot/vmlinuz-2.6.15-26-386 ro dev=/dev/hda3    /* 假设 /dev/hda3 是你的 / 所在的分区 */\\ninitrd /boot/initrd.img-2.6.15-26-386\\nboot\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"即可启动系统。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的关键问题是如何确定系统的几个分区：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/boot\")]), _vm._v(\" \"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\" \"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-82b57b10\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/grub.md\n// module id = 1565\n// module chunks = 369","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./grub.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/grub.md\n// module id = 182\n// module chunks = 369","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-82b57b10\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./grub.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/grub.md\n// module id = 771\n// module chunks = 369"],"sourceRoot":""}