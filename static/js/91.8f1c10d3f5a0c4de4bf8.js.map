{"version":3,"sources":["webpack:///static/js/91.8f1c10d3f5a0c4de4bf8.js","webpack:///./command/tcpdump.md?e407","webpack:///./command/tcpdump.md?a696","webpack:///./command/tcpdump.md"],"names":["webpackJsonp","1053","module","exports","__webpack_require__","Component","1309","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","464"],"mappings":"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","file":"static/js/91.8f1c10d3f5a0c4de4bf8.js","sourcesContent":["webpackJsonp([91],{\n\n/***/ 1053:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1309),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1309:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tcpdump命令\")]), _vm._v(\"是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-[w](#/w \\\"w命令\\\")\")]), _vm._v(\"选项将数据包保存到文件中，方便以后分析。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：尝试将网络和广播地址转换成名称；\\n-c<数据包数目>：收到指定的数据包数目后，就停止进行倾倒操作；\\n-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；\\n-[dd](#/dd \\\"dd命令\\\")：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；\\n-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；\\n-e：在每列倾倒资料上显示连接层级的文件头；\\n-f：用数字显示网际网络地址；\\n-F<表达文件>：指定内含表达方式的文件；\\n-i<网络界面>：使用指定的网络截面送出数据包；\\n-l：使用标准输出列的缓冲区；\\n-n：不把主机的网络地址转换成名字；\\n-N：不列出域名；\\n-O：不将数据包编码最佳化；\\n-p：不让网络界面进入混杂模式；\\n-q ：快速输出，仅列出少数的传输协议信息；\\n-r<数据包文件>：从指定的文件读取数据包数据；\\n-s<数据包大小>：设置每个数据包的大小；\\n-S：用绝对而非相对数值列出TCP关联数；\\n-t：在每列倾倒资料上不显示时间戳记；\\n-tt： 在每列倾倒资料上显示未经格式化的时间戳记；\\n-T<数据包类型>：强制将表达方式所指定的数据包转译成设置的数据包类型；\\n-v：详细显示指令执行过程；\\n-vv：更详细显示指令执行过程；\\n-x：用十六进制字码列出数据包资料；\\n-w<数据包文件>：把数据包数据写入指定的文件。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"直接启动tcpdump将监视第一个网络接口上所有流过的数据包\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定网络接口的数据包\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定主机的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有进入或离开sundown的数据包。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump [host](#/host \\\"host命令\\\") sundown\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"也可以指定\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\",例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host 210.27.48.1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印helios 与 hot 或者与 ace 之间通信的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host helios and \\\\( hot or ace \\\\)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host 210.27.48.1 and \\\\ (210.27.48.2 or 210.27.48.3 \\\\)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip host ace and not helios\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip host 210.27.48.1 and ! 210.27.48.2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"截获主机\"), _c('a', {\n    attrs: {\n      \"href\": \"#/hostname\",\n      \"title\": \"hostname命令\"\n    }\n  }, [_vm._v(\"hostname\")]), _vm._v(\"发送的所有数据\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth0 src host hostname\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"监视所有送到主机hostname的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth0 dst host hostname\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定主机和端口的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果想要获取主机210.27.48.1接收或发出的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/telnet\",\n      \"title\": \"telnet命令\"\n    }\n  }, [_vm._v(\"telnet\")]), _vm._v(\"包，使用如下命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump tcp port 23 host 210.27.48.1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"对本机的udp 123 端口进行监视 123 为ntp的服务端口\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump udp port 123\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定网络的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印本地主机与Berkeley网络上的主机之间的所有通信数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump net ucb-ether\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"ucb-ether此处可理解为“Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有通过网关snup的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ftp\",\n      \"title\": \"ftp命令\"\n    }\n  }, [_vm._v(\"ftp\")]), _vm._v(\"数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump 'gateway snup and (port ftp or ftp-data)'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有源地址或目标地址是本地主机的IP数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip and not net localnet\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。\")])])\n}]}\n\n/***/ }),\n\n/***/ 464:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1053);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/91.8f1c10d3f5a0c4de4bf8.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-34bf2105\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tcpdump.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tcpdump.md\n// module id = 1053\n// module chunks = 91","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tcpdump命令\")]), _vm._v(\"是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-[w](#/w \\\"w命令\\\")\")]), _vm._v(\"选项将数据包保存到文件中，方便以后分析。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：尝试将网络和广播地址转换成名称；\\n-c<数据包数目>：收到指定的数据包数目后，就停止进行倾倒操作；\\n-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；\\n-[dd](#/dd \\\"dd命令\\\")：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；\\n-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；\\n-e：在每列倾倒资料上显示连接层级的文件头；\\n-f：用数字显示网际网络地址；\\n-F<表达文件>：指定内含表达方式的文件；\\n-i<网络界面>：使用指定的网络截面送出数据包；\\n-l：使用标准输出列的缓冲区；\\n-n：不把主机的网络地址转换成名字；\\n-N：不列出域名；\\n-O：不将数据包编码最佳化；\\n-p：不让网络界面进入混杂模式；\\n-q ：快速输出，仅列出少数的传输协议信息；\\n-r<数据包文件>：从指定的文件读取数据包数据；\\n-s<数据包大小>：设置每个数据包的大小；\\n-S：用绝对而非相对数值列出TCP关联数；\\n-t：在每列倾倒资料上不显示时间戳记；\\n-tt： 在每列倾倒资料上显示未经格式化的时间戳记；\\n-T<数据包类型>：强制将表达方式所指定的数据包转译成设置的数据包类型；\\n-v：详细显示指令执行过程；\\n-vv：更详细显示指令执行过程；\\n-x：用十六进制字码列出数据包资料；\\n-w<数据包文件>：把数据包数据写入指定的文件。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"直接启动tcpdump将监视第一个网络接口上所有流过的数据包\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定网络接口的数据包\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定主机的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有进入或离开sundown的数据包。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump [host](#/host \\\"host命令\\\") sundown\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"也可以指定\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\",例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host 210.27.48.1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印helios 与 hot 或者与 ace 之间通信的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host helios and \\\\( hot or ace \\\\)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump host 210.27.48.1 and \\\\ (210.27.48.2 or 210.27.48.3 \\\\)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印ace与任何其他主机之间通信的IP 数据包, 但不包括与helios之间的数据包.\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip host ace and not helios\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip host 210.27.48.1 and ! 210.27.48.2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"截获主机\"), _c('a', {\n    attrs: {\n      \"href\": \"#/hostname\",\n      \"title\": \"hostname命令\"\n    }\n  }, [_vm._v(\"hostname\")]), _vm._v(\"发送的所有数据\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth0 src host hostname\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"监视所有送到主机hostname的数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump -i eth0 dst host hostname\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定主机和端口的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果想要获取主机210.27.48.1接收或发出的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/telnet\",\n      \"title\": \"telnet命令\"\n    }\n  }, [_vm._v(\"telnet\")]), _vm._v(\"包，使用如下命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump tcp port 23 host 210.27.48.1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"对本机的udp 123 端口进行监视 123 为ntp的服务端口\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump udp port 123\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"监视指定网络的数据包\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印本地主机与Berkeley网络上的主机之间的所有通信数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump net ucb-ether\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"ucb-ether此处可理解为“Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有通过网关snup的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ftp\",\n      \"title\": \"ftp命令\"\n    }\n  }, [_vm._v(\"ftp\")]), _vm._v(\"数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump 'gateway snup and (port ftp or ftp-data)'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印所有源地址或目标地址是本地主机的IP数据包\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tcpdump ip and not net localnet\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-34bf2105\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tcpdump.md\n// module id = 1309\n// module chunks = 91","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tcpdump.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/tcpdump.md\n// module id = 464\n// module chunks = 91"],"sourceRoot":""}