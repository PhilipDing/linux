{"version":3,"sources":["webpack:///static/js/10.93d7001c1c6a1c8e227e.js","webpack:///./command/awk.md?885c","webpack:///./command/awk.md","webpack:///./command/images/1225512if.gif","webpack:///./command/awk.md?9a6e"],"names":["webpackJsonp","1178","module","exports","__webpack_require__","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","staticStyle","width","summary","src","alt","title","height","38","600","p","626","Component"],"mappings":"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","file":"static/js/10.93d7001c1c6a1c8e227e.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ 1178:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"awk\")]), _vm._v(\"是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk命令格式和选项\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"语法形式\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk [options] 'script' var=value [file](#/file \\\"file命令\\\")(s)\\nawk [options] -f scriptfile var=value file(s)\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"常用命令选项\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"**-F fs   **fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-v var=value   **赋值一个用户定义变量，将外部变量传递给awk\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-f scripfile  **从脚本文件中读取awk命令\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-m[fr] val   **对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk模式和操作\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk脚本是由模式和操作组成的。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"模式\")]), _vm._v(\" \"), _c('p', [_vm._v(\"模式可以是以下任意一个：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"/正则表达式/：使用通配符的扩展集。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"模式匹配表达式：用运算符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"~\")]), _vm._v(\"（匹配）和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"~!\")]), _vm._v(\"（不匹配）。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"BEGIN语句块、pattern语句块、END语句块：参见\"), _c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"\n    }\n  }, [_vm._v(\"awk的工作原理\")])])]), _vm._v(\" \"), _c('h3', [_vm._v(\"操作\")]), _vm._v(\" \"), _c('p', [_vm._v(\"操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%EF%BC%88%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%EF%BC%89\"\n    }\n  }, [_vm._v(\"变量\")]), _vm._v(\"或\"), _c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E6%95%B0%E7%BB%84%E5%BA%94%E7%94%A8\"\n    }\n  }, [_vm._v(\"数组\")]), _vm._v(\"赋值\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E9%AB%98%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"\n    }\n  }, [_vm._v(\"输出命令\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"\n    }\n  }, [_vm._v(\"内置函数\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"\n    }\n  }, [_vm._v(\"控制流语句\")])])]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk脚本基本结构\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ print \\\"start\\\" } pattern{ commands } END{ print \\\"end\\\" }' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被\"), _c('strong', [_vm._v(\"单引号\")]), _vm._v(\"或\"), _c('strong', [_vm._v(\"双引号\")]), _vm._v(\"中，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ i=0 } { i++ } END{ print i }' filename\\nawk \\\"BEGIN{ i=0 } { i++ } END{ print i }\\\" filename\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"awk的工作原理\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ commands } pattern{ commands } END{ commands }'\\n\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"第一步：执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"BEGIN{ commands }\")]), _vm._v(\"语句块中的语句；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第二步：从文件或标准输入(stdin)读取一行，然后执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"pattern{ commands }\")]), _vm._v(\"语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第三步：当读至输入流末尾时，执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"END{ commands }\")]), _vm._v(\"语句块。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"BEGIN语句块\")]), _vm._v(\"在awk开始从输入流中读取行\"), _c('strong', [_vm._v(\"之前\")]), _vm._v(\"被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"END语句块\")]), _vm._v(\"在awk从输入流中读取完所有的行\"), _c('strong', [_vm._v(\"之后\")]), _vm._v(\"即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"pattern语句块\")]), _vm._v(\"中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"{ print }\")]), _vm._v(\"，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") -e \\\"A line 1nA line 2\\\" | awk 'BEGIN{ print \\\"Start\\\" } { print } END{ print \\\"End\\\" }'\\nStart\\nA line 1\\nA line 2\\nEnd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当使用不带参数的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print\")]), _vm._v(\"时，它就打印当前行，当\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print\")]), _vm._v(\"的参数是以逗号进行分隔时，打印时则以空格作为定界符。在awk的print语句块中双引号是被当作拼接符使用，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{ var1=\\\"v1\\\"; var2=\\\"v2\\\"; var3=\\\"v3\\\"; print var1,var2,var3; }'\\nv1 v2 v3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"双引号拼接使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{ var1=\\\"v1\\\"; var2=\\\"v2\\\"; var3=\\\"v3\\\"; print var1\\\"=\\\"var2\\\"=\\\"var3; }'\\nv1=v2=v3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk内置变量（预定义变量）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"说明：[A][N][P][G]表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**$n** 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。\\n**$0** 这个变量包含执行过程中当前行的文本内容。\\n[N] **ARGC** 命令行参数的数目。\\n[G] **ARGIND** 命令行中当前文件的位置（从0开始算）。\\n[N] **ARGV** 包含命令行参数的数组。\\n[G] **CONVFMT** 数字转换格式（默认值为%.6g）。\\n[P] **ENVIRON** 环境变量关联数组。\\n[N] **ERRNO** 最后一个系统错误的描述。\\n[G] **FIELDWIDTHS** 字段宽度列表（用空格键分隔）。\\n[A] **FILENAME** 当前输入文件的名。\\n[P] **FNR** 同NR，但相对于当前文件。\\n[A] **FS** 字段分隔符（默认是任何空格）。\\n[G] **IGNORECASE** 如果为真，则进行忽略大小写的匹配。\\n[A] **NF** 表示字段数，在执行过程中对应于当前的字段数。\\n[A] **NR** 表示记录数，在执行过程中对应于当前的行号。\\n[A] **OFMT** 数字的输出格式（默认值是%.6g）。\\n[A] **OFS** 输出字段分隔符（默认值是一个空格）。\\n[A] **ORS** 输出记录分隔符（默认值是一个换行符）。\\n[A] **RS** 记录分隔符（默认是一个换行符）。\\n[N] **RSTART** 由match函数所匹配的字符串的第一个位置。\\n[N] **RLENGTH** 由match函数所匹配的字符串的长度。\\n[N] **SUBSEP** 数组下标分隔符（默认值是34）。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3nline2 f4 f5nline3 f6 f7\\\" | awk '{print \\\"Line No:\\\"NR\\\", No of fields:\\\"NF, \\\"$0=\\\"$0, \\\"$1=\\\"$1, \\\"$2=\\\"$2, \\\"$3=\\\"$3}'\\nLine No:1, No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3\\nLine No:2, No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5\\nLine No:3, No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print $NF\")]), _vm._v(\"可以打印出一行中的最后一个字段，使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$(NF-1)\")]), _vm._v(\"则是打印倒数第二个字段，其他以此类推：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3n line2 f4 f5\\\" | awk '{print $NF}'\\nf3\\nf5\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3n line2 f4 f5\\\" | awk '{print $(NF-1)}'\\nf2\\nf4\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印每一行的第二和第三个字段：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk '{ print $2,$3 }' filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"统计文件中的行数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'END{ print NR }' filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一个每一行中第一个字段值累加的例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[seq](#/seq \\\"seq命令\\\") 5 | awk 'BEGIN{ [sum](#/sum \\\"sum命令\\\")=0; print \\\"总和：\\\" } { print $1\\\"+\\\"; sum+=$1 } END{ print \\\"等于\\\"; print sum }'\\n总和：\\n1+\\n2+\\n3+\\n4+\\n5+\\n等于\\n15\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"将外部变量值传递给awk\")]), _vm._v(\" \"), _c('p', [_vm._v(\"借助**\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-v\")]), _vm._v(\"选项**，可以将外部值（并非来自stdin）传递给awk：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"VAR=10000\\necho | awk -v VARIABLE=$VAR '{ print VARIABLE }'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种传递外部变量方法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"var1=\\\"aaa\\\"\\nvar2=\\\"bbb\\\"\\necho | awk '{ print v1,v2 }' v1=$var1 v2=$var2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当输入来自于文件时使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk运算与判断\")]), _vm._v(\" \"), _c('p', [_vm._v(\"作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"算术运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"+ -\")]), _vm._v(\" \"), _c('td', [_vm._v(\"加，减\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"* / &\")]), _vm._v(\" \"), _c('td', [_vm._v(\"乘，除与求余\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"+ - !\")]), _vm._v(\" \"), _c('td', [_vm._v(\"一元加，减和逻辑非\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"^ ***\")]), _vm._v(\" \"), _c('td', [_vm._v(\"求幂\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"++ --\")]), _vm._v(\" \"), _c('td', [_vm._v(\"增加或减少，作为前缀或后缀\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";print a++,++a;}'\\n0 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"赋值运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"= += -= *= /= %= ^= **=\")]), _vm._v(\" \"), _c('td', [_vm._v(\"赋值语句\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"a+=5; 等价于：a=a+5; 其它同类\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"逻辑运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"||\")]), _vm._v(\" \"), _c('td', [_vm._v(\"逻辑或\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"&&\")]), _vm._v(\" \"), _c('td', [_vm._v(\"逻辑与\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=1;b=2;print (a>5 && b<=2),(a>5 || b<=2);}'\\n0 1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"正则运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"~ ~!\")]), _vm._v(\" \"), _c('td', [_vm._v(\"匹配正则表达式和不匹配正则表达式\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"100testa\\\";if(a ~ /^100*/){print \\\"ok\\\";}}'\\nok\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"关系运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"< <=> >= != ==</=>\")]), _vm._v(\" \"), _c('td', [_vm._v(\"关系运算符\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=11;if(a >= 9){print \\\"ok\\\";}}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：> < 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"其它运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"$\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字段引用\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"空格\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字符串连接符\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"?:\")]), _vm._v(\" \"), _c('td', [_vm._v(\"C条件表达式\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"in\")]), _vm._v(\" \"), _c('td', [_vm._v(\"数组中是否存在某键值\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";print a==\\\"b\\\"?\\\"ok\\\":\\\"err\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";arr[0]=\\\"b\\\";arr[1]=\\\"c\\\";print (a in arr);}'\\n0\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";arr[0]=\\\"b\\\";arr[\\\"b\\\"]=\\\"c\\\";print (a in arr);}'\\n1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"运算级优先级表\")]), _vm._v(\" \"), _c('p', [_c('img', {\n    attrs: {\n      \"src\": __webpack_require__(600),\n      \"alt\": \"级别越高越优先\"\n    }\n  }), _vm._v(\"\\n级别越高越优先\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk高级输入输出\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"读取下一条记录\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"next\")]), _vm._v(\"语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") text.txt\\na\\nb\\nc\\nd\\ne\\n\\nawk 'NR%2==1{next}{print NR,$0;}' text.txt\\n2 b\\n4 d\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当记录行号除以2余1，就跳过当前行。下面的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print NR,$0\")]), _vm._v(\"也不会执行。下一行开始，程序有开始判断\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"NR%2\")]), _vm._v(\"值。这个时候记录行号是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"：2\")]), _vm._v(\" ，就会执行下面语句块：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"'print NR,$0'\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat text.txt\\nweb01[192.168.2.100]\\n[httpd](#/httpd \\\"httpd命令\\\")            ok\\ntomcat               ok\\n[sendmail](#/sendmail \\\"sendmail命令\\\")               ok\\nweb02[192.168.2.101]\\nhttpd            ok\\npostfix               ok\\nweb03[192.168.2.102]\\nmysqld            ok\\nhttpd               ok\\n0\\nawk '/^web/{T=$0;next;}{print T\\\":t\\\"$0;}' [test](#/test \\\"test命令\\\").txt\\nweb01[192.168.2.100]:   httpd            ok\\nweb01[192.168.2.100]:   tomcat               ok\\nweb01[192.168.2.100]:   sendmail               ok\\nweb02[192.168.2.101]:   httpd            ok\\nweb02[192.168.2.101]:   postfix               ok\\nweb03[192.168.2.102]:   mysqld            ok\\nweb03[192.168.2.102]:   httpd               ok\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"简单地读取一条记录\")]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"awk getline\")]), _vm._v(\"用法：输出重定向需用到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"getline函数\")]), _vm._v(\"。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"getline语法：getline var，变量var包含了特定行的内容。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk getline从整体上来说，用法说明：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"**当其左右无重定向符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"|\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"<\")]), _vm._v(\"时：**getline作用于当前文件，读入当前文件的第一行给其后跟的变量\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"var\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$0\")]), _vm._v(\"（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**当其左右有重定向符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"|\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"<\")]), _vm._v(\"时：**getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行linux的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[date](#/date \\\"date命令\\\")\")]), _vm._v(\"命令，并通过管道输出给\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"getline\")]), _vm._v(\"，然后再把输出赋值给自定义变量out，并打印它：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ \\\"date\\\" | getline out; print out }' test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，\"), _c('a', {\n    attrs: {\n      \"href\": \"#/split\",\n      \"title\": \"split命令\"\n    }\n  }, [_vm._v(\"split\")]), _vm._v(\"函数把变量out转化成数组mon，然后打印数组mon的第二个元素：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ \\\"date\\\" | getline out; split(out,mon); print mon[2] }' test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"命令\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ls\",\n      \"title\": \"ls命令\"\n    }\n  }, [_vm._v(\"ls\")]), _vm._v(\"的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ while( \\\"ls\\\" | getline) print }'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"关闭文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"close(\\\"filename\\\")\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"filename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"输出到一个文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中允许用如下方式将结果输出到一个文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{[printf](#/printf \\\"printf命令\\\")(\\\"hello word!n\\\") > \\\"datafile\\\"}'\\n或\\necho | awk '{printf(\\\"hello word!n\\\") >> \\\"datafile\\\"}'\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"设置字段定界符\")]), _vm._v(\" \"), _c('p', [_vm._v(\"默认的字段定界符是空格，可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-F \\\"定界符\\\"\")]), _vm._v(\"  明确指定一个定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk -F: '{ print $NF }' /etc/[passwd](#/passwd \\\"passwd命令\\\")\\n或\\nawk 'BEGIN{ FS=\\\":\\\" } { print $NF }' /etc/passwd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"BEGIN语句块\")]), _vm._v(\"中则可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"OFS=“定界符”\")]), _vm._v(\"设置输出字段的定界符。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"流程控制语句\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/exit\",\n      \"title\": \"exit命令\"\n    }\n  }, [_vm._v(\"exit\")]), _vm._v(\"这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"条件判断语句\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"if(表达式)\\n  语句1\\nelse\\n  语句2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"if(表达式)\\n  {语句1}\\nelse if(表达式)\\n  {语句2}\\nelse\\n  {语句3}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntest=100;\\nif(test>90){\\n  print \\\"very good\\\";\\n  }\\n  else if(test>60){\\n    print \\\"good\\\";\\n  }\\n  else{\\n    print \\\"no pass\\\";\\n  }\\n}'\\n\\nvery good\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"每条命令语句后面可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\";\")]), _c('strong', [_vm._v(\"分号\")]), _vm._v(\"结尾。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"循环语句\")]), _vm._v(\" \"), _c('h4', [_vm._v(\"while语句\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"while(表达式)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntest=100;\\ntotal=0;\\nwhile(i<=test){\\n  total+=i;\\n  i++;\\n}\\nprint total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h4', [_vm._v(\"for循环\")]), _vm._v(\" \"), _c('p', [_vm._v(\"for循环有两种格式：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"格式1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"for(变量 in 数组)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(k in ENVIRON){\\n  print k\\\"=\\\"ENVIRON[k];\\n}\\n\\n}'\\nTERM=linux\\nG_BROKEN_FILENAMES=1\\nSHLVL=1\\n[pwd](#/pwd \\\"pwd命令\\\")=/root/text\\n...\\n[logname](#/logname \\\"logname命令\\\")=root\\nHOME=/root\\nSSH_CLIENT=192.168.1.21 53087 22\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注：ENVIRON是awk常量，是子典型数组。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"格式2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"for(变量;条件;表达式)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntotal=0;\\nfor(i=0;i<=100;i++){\\n  total+=i;\\n}\\nprint total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h4', [_vm._v(\"do循环\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"do\\n{语句} while(条件)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntotal=0;\\ni=0;\\ndo {total+=i;i++;} while(i<=100)\\n  print total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"其他语句\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('strong', [_vm._v(\"break\")]), _vm._v(\" 当 break 语句用于 while 或 for 语句时，导致退出程序循环。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"continue\")]), _vm._v(\" 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"next\")]), _vm._v(\" 能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"exit\")]), _vm._v(\" 语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"数组应用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"数组的定义\")]), _vm._v(\" \"), _c('p', [_vm._v(\"数字做数组索引（下标）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Array[1]=\\\"sun\\\"\\nArray[2]=\\\"kai\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"字符串做数组索引（下标）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Array[\\\"first\\\"]=\\\"www\\\"\\nArray[\\\"[last](#/last \\\"last命令\\\")\\\"]=\\\"name\\\"\\nArray[\\\"birth\\\"]=\\\"1987\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print Array[1]\")]), _vm._v(\"会打印出sun；使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print Array[2]\")]), _vm._v(\"会打印出kai；使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print[\\\"birth\\\"]\")]), _vm._v(\"会得到1987。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"读取数组的值\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"{ for(item in array) {print array[item]}; }       #输出的顺序是随机的\\n{ for(i=1;i<=len;i++) {print array[i]}; }         #Len是数组的长度\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"数组相关函数\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"得到数组长度：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{[info](#/info \\\"info命令\\\")=\\\"it is a test\\\";lens=split(info,tA,\\\" \\\");print length(tA),lens;}'\\n4 4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";split(info,tA,\\\" \\\");print asort(tA);}'\\n4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"asort对数组进行排序，返回数组长度。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"输出数组内容（无序，有序输出）：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";split(info,tA,\\\" \\\");for(k in tA){print k,tA[k];}}'\\n4 test\\n1 it\\n2 is\\n3 a\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"for…in\")]), _vm._v(\"输出，因为数组是关联数组，默认是无序的。所以通过\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"for…in\")]), _vm._v(\"得到是无序的数组。如果需要得到有序数组，需要通过下标获得。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";tlen=split(info,tA,\\\" \\\");for(k=1;k<=tlen;k++){print k,tA[k];}}'\\n1 it\\n2 is\\n3 a\\n4 test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：数组下标是从1开始，与C数组不一样。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"判断键值存在以及删除键值：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#错误的判断方法：\\nawk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";if(tB[\\\"c\\\"]!=\\\"1\\\"){print \\\"no found\\\";};for(k in tB){print k,tB[k];}}'\\nno found\\na a1\\nb b1\\nc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上出现奇怪问题，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"tB[“c”]\")]), _vm._v(\"没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#正确判断方法：\\nawk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";if( \\\"c\\\" in tB){print \\\"ok\\\";};for(k in tB){print k,tB[k];}}'\\na a1\\nb b1\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"if(key in array)\")]), _vm._v(\"通过这种方法判断数组中是否包含\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"key\")]), _vm._v(\"键值。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#删除键值：\\n[chengmo@localhost ~]$ awk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";delete tB[\\\"a\\\"];for(k in tB){print k,tB[k];}}'\\nb b1\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"delete array[key]\")]), _vm._v(\"可以删除，对应数组\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"key\")]), _vm._v(\"的，序列值。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"二维、多维数组使用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk的多维数组在本质上是一维数组，更确切一点，awk在存储上并不支持多维数组。awk提供了逻辑上模拟二维数组的访问方式。例如，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"array[2,4]=1\")]), _vm._v(\"这样的访问是允许的。awk使用一个特殊的字符串\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"SUBSEP(�34)\")]), _vm._v(\"作为分割字段，在上面的例子中，关联数组array存储的键值实际上是2�344。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"类似一维数组的成员测试，多维数组可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"if ( (i,j) in array)\")]), _vm._v(\"这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"for ( item in array )\")]), _vm._v(\"这样的语法遍历数组。与一维数组不同的是，多维数组必须使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"split()\")]), _vm._v(\"函数来访问单独的下标分量。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(i=1;i<=9;i++){\\n  for(j=1;j<=9;j++){\\n    tarr[i,j]=i*j; print i,\\\"*\\\",j,\\\"=\\\",tarr[i,j];\\n  }\\n}\\n}'\\n1 * 1 = 1\\n1 * 2 = 2\\n1 * 3 = 3\\n1 * 4 = 4\\n1 * 5 = 5\\n1 * 6 = 6\\n...\\n9 * 6 = 54\\n9 * 7 = 63\\n9 * 8 = 72\\n9 * 9 = 81\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以通过\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"array[k,k2]\")]), _vm._v(\"引用获得数组内容。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种方法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(i=1;i<=9;i++){\\n  for(j=1;j<=9;j++){\\n    tarr[i,j]=i*j;\\n  }\\n}\\nfor(m in tarr){\\n  split(m,tarr2,SUBSEP); print tarr2[1],\\\"*\\\",tarr2[2],\\\"=\\\",tarr[m];\\n}\\n}'\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"内置函数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"算术函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"height\": \"241\",\n      \"width\": \"907\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"atan2( y, x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 y/x 的反正切。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"cos( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的余弦；x 是弧度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sin( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的正弦；x 是弧度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"exp( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 幂函数。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"log( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的自然对数。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sqrt( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 平方根。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"int( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的截断至整数的值。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"rand( )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回任意数字 n，其中 0 <= n=\\\"\\\" <=\\\"\\\" 1。<=\\\"\\\" td=\\\"\\\">\\n</=>\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"srand( [[expr](#/expr \\\"expr命令\\\")] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"举例说明：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{OFMT=\\\"%.3f\\\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;}'\\n0.841 22026.466 2.303 3\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"OFMT 设置输出数据格式是保留3位小数。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"获得随机数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n78\\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n31\\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n41\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"字符串函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"gsub( Ere, Repl, [ In ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sub( Ere, Repl, [ In ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"index( String1, String2 )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"length [(String)]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"blength [(String)]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"substr( String, M, [ N ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"match( String, Ere )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"split( String, A, [Ere] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"tolower( String )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"toupper( String )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sprintf(Format, Expr, Expr, . . . )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"注：Ere都可以是正则表达式。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"gsub,sub使用\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";gsub(/[0-9]+/,\\\"!\\\",info);print info}'\\nthis is a test!test!\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 info中查找满足正则表达式，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/[0-9]+/\")]), _vm._v(\" 用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"””\")]), _vm._v(\"替换，并且替换后的值，赋值给info 未给info值，默认是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$0\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查找字符串（index使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";print index(info,\\\"test\\\")?\\\"ok\\\":\\\"no found\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"未找到，返回0\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"正则表达式匹配查找(match使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";print match(info,/[0-9]+/)?\\\"ok\\\":\\\"no found\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"截取字符串(substr使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[wangsl@centos5 ~]$ awk 'BEGIN{info=\\\"this is a test2010test!\\\";print substr(info,4,10);}'\\ns is a tes\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从第 4个 字符开始，截取10个长度字符串\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"字符串分割（split使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test\\\";split(info,tA,\\\" \\\");print length(tA);for(k in tA){print k,tA[k];}}'\\n4\\n4 test\\n1 this\\n2 is\\n3 a\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"分割info，动态创建数组tA，这里比较有意思，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"awk for …in\")]), _vm._v(\"循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"格式化字符串输出（sprintf使用）\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"格式化字符串格式：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出; 另一部分是格式化规定字符，以\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"\\\"%\\\"\")]), _vm._v(\"开始，后跟一个或几个规定字符,用来确定输出内容格式。\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"%d\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制有符号整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%u\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制无符号整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%f\")]), _vm._v(\" \"), _c('td', [_vm._v(\"浮点数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%s\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字符串\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%c\")]), _vm._v(\" \"), _c('td', [_vm._v(\"单个字符\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%p\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指针的值\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%e\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指数形式的浮点数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%x\")]), _vm._v(\" \"), _c('td', [_vm._v(\"%X 无符号以十六进制表示的整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%o\")]), _vm._v(\" \"), _c('td', [_vm._v(\"无符号以八进制表示的整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%g\")]), _vm._v(\" \"), _c('td', [_vm._v(\"自动选择合适的表示法\")])])])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{n1=124.113;n2=-1.224;n3=1.2345; printf(\\\"%.2f,%.2u,%.2g,%X,%on\\\",n1,n2,n3,n1,n1);}'\\n124.11,18446744073709551615,1.2,7C,174\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"一般函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"close( Expression )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"system([command](#/command \\\"command命令\\\") )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"Expression | getline [ Variable ]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"getline [ Variable ] < Expression\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"getline [ Variable ]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。\")])])])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"打开外部文件（close用法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{while(\\\"cat /etc/passwd\\\"|getline){print $0;};close(\\\"/etc/passwd\\\");}'\\nroot:x:0:0:root:/root:/bin/bash\\nbin:x:1:1:bin:/bin:/sbin/[nologin](#/nologin \\\"nologin命令\\\")\\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"逐行读取外部文件(getline使用方法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{while(getline < \\\"/etc/passwd\\\"){print $0;};close(\\\"/etc/passwd\\\");}'\\nroot:x:0:0:root:/root:/bin/bash\\nbin:x:1:1:bin:/bin:/sbin/nologin\\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{print \\\"Enter your name:\\\";getline name;print name;}'\\nEnter your name:\\nchengmo\\nchengmo\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"调用外部应用程序(system使用方法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{b=system(\\\"ls -al\\\");print b;}'\\ntotal 42092\\ndrwxr-xr-x 14 chengmo chengmo     4096 09-30 17:47 .\\ndrwxr-xr-x 95 root   root       4096 10-08 14:01 ..\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"b返回值，是执行结果。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"时间函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"函数名\")]), _vm._v(\" \"), _c('td', [_vm._v(\"说明\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"mktime( YYYY MM [dd](#/dd \\\"dd命令\\\") HH MM [ss](#/ss \\\"ss命令\\\")[ DST])\")]), _vm._v(\" \"), _c('td', [_vm._v(\"生成时间格式\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"strftime([format [, timestamp]])\")]), _vm._v(\" \"), _c('td', [_vm._v(\"格式化时间输出，将时间戳转为时间字符串\\n具体格式，见下表.\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"systime()\")]), _vm._v(\" \"), _c('td', [_vm._v(\"得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数\")])])])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"建指定时间(mktime使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp=mktime(\\\"2001 01 01 12 12 12\\\");print strftime(\\\"%c\\\",tstamp);}'\\n2001年01月01日 星期一 12时12分12秒\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp1=mktime(\\\"2001 01 01 12 12 12\\\");tstamp2=mktime(\\\"2001 02 01 0 0 0\\\");print tstamp2-tstamp1;}'\\n2634468\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"求2个时间段中间时间差，介绍了strftime使用方法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp1=mktime(\\\"2001 01 01 12 12 12\\\");tstamp2=systime();print tstamp2-tstamp1;}'\\n308201392\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"strftime日期和时间格式说明符\")])]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"%a\")]), _vm._v(\" \"), _c('td', [_vm._v(\"星期几的缩写(Sun)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%A\")]), _vm._v(\" \"), _c('td', [_vm._v(\"星期几的完整写法(Sunday)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%b\")]), _vm._v(\" \"), _c('td', [_vm._v(\"月名的缩写(Oct)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%B\")]), _vm._v(\" \"), _c('td', [_vm._v(\"月名的完整写法(October)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%c\")]), _vm._v(\" \"), _c('td', [_vm._v(\"本地日期和时间\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%d\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制日期\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%D\")]), _vm._v(\" \"), _c('td', [_vm._v(\"日期 08/20/99\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%e\")]), _vm._v(\" \"), _c('td', [_vm._v(\"日期，如果只有一位会补上一个空格\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%H\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用十进制表示24小时格式的小时\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%I\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用十进制表示12小时格式的小时\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%j\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从1月1日起一年中的第几天\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%m\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的月份\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%M\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的分钟\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%p\")]), _vm._v(\" \"), _c('td', [_vm._v(\"12小时表示法(AM/PM)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%S\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的秒\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%U\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的一年中的第几个星期(星期天作为一个星期的开始)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%[w](#/w \\\"w命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的星期几(星期天是0)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%W\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的一年中的第几个星期(星期一作为一个星期的开始)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%x\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重新设置本地日期(08/20/99)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%X\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重新设置本地时间(12：00：00)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%y\")]), _vm._v(\" \"), _c('td', [_vm._v(\"两位数字表示的年(99)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%Y\")]), _vm._v(\" \"), _c('td', [_vm._v(\"当前月份\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%Z\")]), _vm._v(\" \"), _c('td', [_vm._v(\"时区(PDT)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%%\")]), _vm._v(\" \"), _c('td', [_vm._v(\"百分号(%)\")])])])])])\n}]}\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(626);\n\n/***/ }),\n\n/***/ 600:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"static/img/1225512if.ae36f31.gif\";\n\n/***/ }),\n\n/***/ 626:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1178),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/10.93d7001c1c6a1c8e227e.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"awk\")]), _vm._v(\"是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk命令格式和选项\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"语法形式\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk [options] 'script' var=value [file](#/file \\\"file命令\\\")(s)\\nawk [options] -f scriptfile var=value file(s)\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"常用命令选项\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"**-F fs   **fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-v var=value   **赋值一个用户定义变量，将外部变量传递给awk\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-f scripfile  **从脚本文件中读取awk命令\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**-m[fr] val   **对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk模式和操作\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk脚本是由模式和操作组成的。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"模式\")]), _vm._v(\" \"), _c('p', [_vm._v(\"模式可以是以下任意一个：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"/正则表达式/：使用通配符的扩展集。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"模式匹配表达式：用运算符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"~\")]), _vm._v(\"（匹配）和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"~!\")]), _vm._v(\"（不匹配）。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"BEGIN语句块、pattern语句块、END语句块：参见\"), _c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"\n    }\n  }, [_vm._v(\"awk的工作原理\")])])]), _vm._v(\" \"), _c('h3', [_vm._v(\"操作\")]), _vm._v(\" \"), _c('p', [_vm._v(\"操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%EF%BC%88%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%EF%BC%89\"\n    }\n  }, [_vm._v(\"变量\")]), _vm._v(\"或\"), _c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E6%95%B0%E7%BB%84%E5%BA%94%E7%94%A8\"\n    }\n  }, [_vm._v(\"数组\")]), _vm._v(\"赋值\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#awk%E9%AB%98%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"\n    }\n  }, [_vm._v(\"输出命令\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"\n    }\n  }, [_vm._v(\"内置函数\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/awk#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"\n    }\n  }, [_vm._v(\"控制流语句\")])])]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk脚本基本结构\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ print \\\"start\\\" } pattern{ commands } END{ print \\\"end\\\" }' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被\"), _c('strong', [_vm._v(\"单引号\")]), _vm._v(\"或\"), _c('strong', [_vm._v(\"双引号\")]), _vm._v(\"中，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ i=0 } { i++ } END{ print i }' filename\\nawk \\\"BEGIN{ i=0 } { i++ } END{ print i }\\\" filename\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"awk的工作原理\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ commands } pattern{ commands } END{ commands }'\\n\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"第一步：执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"BEGIN{ commands }\")]), _vm._v(\"语句块中的语句；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第二步：从文件或标准输入(stdin)读取一行，然后执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"pattern{ commands }\")]), _vm._v(\"语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第三步：当读至输入流末尾时，执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"END{ commands }\")]), _vm._v(\"语句块。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"BEGIN语句块\")]), _vm._v(\"在awk开始从输入流中读取行\"), _c('strong', [_vm._v(\"之前\")]), _vm._v(\"被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"END语句块\")]), _vm._v(\"在awk从输入流中读取完所有的行\"), _c('strong', [_vm._v(\"之后\")]), _vm._v(\"即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"pattern语句块\")]), _vm._v(\"中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"{ print }\")]), _vm._v(\"，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") -e \\\"A line 1nA line 2\\\" | awk 'BEGIN{ print \\\"Start\\\" } { print } END{ print \\\"End\\\" }'\\nStart\\nA line 1\\nA line 2\\nEnd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当使用不带参数的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print\")]), _vm._v(\"时，它就打印当前行，当\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print\")]), _vm._v(\"的参数是以逗号进行分隔时，打印时则以空格作为定界符。在awk的print语句块中双引号是被当作拼接符使用，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{ var1=\\\"v1\\\"; var2=\\\"v2\\\"; var3=\\\"v3\\\"; print var1,var2,var3; }'\\nv1 v2 v3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"双引号拼接使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{ var1=\\\"v1\\\"; var2=\\\"v2\\\"; var3=\\\"v3\\\"; print var1\\\"=\\\"var2\\\"=\\\"var3; }'\\nv1=v2=v3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk内置变量（预定义变量）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"说明：[A][N][P][G]表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**$n** 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。\\n**$0** 这个变量包含执行过程中当前行的文本内容。\\n[N] **ARGC** 命令行参数的数目。\\n[G] **ARGIND** 命令行中当前文件的位置（从0开始算）。\\n[N] **ARGV** 包含命令行参数的数组。\\n[G] **CONVFMT** 数字转换格式（默认值为%.6g）。\\n[P] **ENVIRON** 环境变量关联数组。\\n[N] **ERRNO** 最后一个系统错误的描述。\\n[G] **FIELDWIDTHS** 字段宽度列表（用空格键分隔）。\\n[A] **FILENAME** 当前输入文件的名。\\n[P] **FNR** 同NR，但相对于当前文件。\\n[A] **FS** 字段分隔符（默认是任何空格）。\\n[G] **IGNORECASE** 如果为真，则进行忽略大小写的匹配。\\n[A] **NF** 表示字段数，在执行过程中对应于当前的字段数。\\n[A] **NR** 表示记录数，在执行过程中对应于当前的行号。\\n[A] **OFMT** 数字的输出格式（默认值是%.6g）。\\n[A] **OFS** 输出字段分隔符（默认值是一个空格）。\\n[A] **ORS** 输出记录分隔符（默认值是一个换行符）。\\n[A] **RS** 记录分隔符（默认是一个换行符）。\\n[N] **RSTART** 由match函数所匹配的字符串的第一个位置。\\n[N] **RLENGTH** 由match函数所匹配的字符串的长度。\\n[N] **SUBSEP** 数组下标分隔符（默认值是34）。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3nline2 f4 f5nline3 f6 f7\\\" | awk '{print \\\"Line No:\\\"NR\\\", No of fields:\\\"NF, \\\"$0=\\\"$0, \\\"$1=\\\"$1, \\\"$2=\\\"$2, \\\"$3=\\\"$3}'\\nLine No:1, No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3\\nLine No:2, No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5\\nLine No:3, No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print $NF\")]), _vm._v(\"可以打印出一行中的最后一个字段，使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$(NF-1)\")]), _vm._v(\"则是打印倒数第二个字段，其他以此类推：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3n line2 f4 f5\\\" | awk '{print $NF}'\\nf3\\nf5\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo -e \\\"line1 f2 f3n line2 f4 f5\\\" | awk '{print $(NF-1)}'\\nf2\\nf4\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印每一行的第二和第三个字段：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk '{ print $2,$3 }' filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"统计文件中的行数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'END{ print NR }' filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一个每一行中第一个字段值累加的例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[seq](#/seq \\\"seq命令\\\") 5 | awk 'BEGIN{ [sum](#/sum \\\"sum命令\\\")=0; print \\\"总和：\\\" } { print $1\\\"+\\\"; sum+=$1 } END{ print \\\"等于\\\"; print sum }'\\n总和：\\n1+\\n2+\\n3+\\n4+\\n5+\\n等于\\n15\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"将外部变量值传递给awk\")]), _vm._v(\" \"), _c('p', [_vm._v(\"借助**\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-v\")]), _vm._v(\"选项**，可以将外部值（并非来自stdin）传递给awk：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"VAR=10000\\necho | awk -v VARIABLE=$VAR '{ print VARIABLE }'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种传递外部变量方法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"var1=\\\"aaa\\\"\\nvar2=\\\"bbb\\\"\\necho | awk '{ print v1,v2 }' v1=$var1 v2=$var2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当输入来自于文件时使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk运算与判断\")]), _vm._v(\" \"), _c('p', [_vm._v(\"作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"算术运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"+ -\")]), _vm._v(\" \"), _c('td', [_vm._v(\"加，减\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"* / &\")]), _vm._v(\" \"), _c('td', [_vm._v(\"乘，除与求余\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"+ - !\")]), _vm._v(\" \"), _c('td', [_vm._v(\"一元加，减和逻辑非\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"^ ***\")]), _vm._v(\" \"), _c('td', [_vm._v(\"求幂\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"++ --\")]), _vm._v(\" \"), _c('td', [_vm._v(\"增加或减少，作为前缀或后缀\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";print a++,++a;}'\\n0 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"赋值运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"= += -= *= /= %= ^= **=\")]), _vm._v(\" \"), _c('td', [_vm._v(\"赋值语句\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"a+=5; 等价于：a=a+5; 其它同类\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"逻辑运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"||\")]), _vm._v(\" \"), _c('td', [_vm._v(\"逻辑或\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"&&\")]), _vm._v(\" \"), _c('td', [_vm._v(\"逻辑与\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=1;b=2;print (a>5 && b<=2),(a>5 || b<=2);}'\\n0 1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"正则运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"~ ~!\")]), _vm._v(\" \"), _c('td', [_vm._v(\"匹配正则表达式和不匹配正则表达式\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"100testa\\\";if(a ~ /^100*/){print \\\"ok\\\";}}'\\nok\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"关系运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"< <=> >= != ==</=>\")]), _vm._v(\" \"), _c('td', [_vm._v(\"关系运算符\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=11;if(a >= 9){print \\\"ok\\\";}}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：> < 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"其它运算符\")]), _vm._v(\" \"), _c('table', {\n    staticStyle: {\n      \"width\": \"500px\"\n    },\n    attrs: {\n      \"summary\": \"运算符\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"运算符\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"$\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字段引用\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"空格\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字符串连接符\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"?:\")]), _vm._v(\" \"), _c('td', [_vm._v(\"C条件表达式\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"in\")]), _vm._v(\" \"), _c('td', [_vm._v(\"数组中是否存在某键值\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";print a==\\\"b\\\"?\\\"ok\\\":\\\"err\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";arr[0]=\\\"b\\\";arr[1]=\\\"c\\\";print (a in arr);}'\\n0\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{a=\\\"b\\\";arr[0]=\\\"b\\\";arr[\\\"b\\\"]=\\\"c\\\";print (a in arr);}'\\n1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"运算级优先级表\")]), _vm._v(\" \"), _c('p', [_c('img', {\n    attrs: {\n      \"src\": require(\"./images/1225512if.gif\"),\n      \"alt\": \"级别越高越优先\"\n    }\n  }), _vm._v(\"\\n级别越高越优先\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"awk高级输入输出\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"读取下一条记录\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"next\")]), _vm._v(\"语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") text.txt\\na\\nb\\nc\\nd\\ne\\n\\nawk 'NR%2==1{next}{print NR,$0;}' text.txt\\n2 b\\n4 d\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当记录行号除以2余1，就跳过当前行。下面的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print NR,$0\")]), _vm._v(\"也不会执行。下一行开始，程序有开始判断\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"NR%2\")]), _vm._v(\"值。这个时候记录行号是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"：2\")]), _vm._v(\" ，就会执行下面语句块：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"'print NR,$0'\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat text.txt\\nweb01[192.168.2.100]\\n[httpd](#/httpd \\\"httpd命令\\\")            ok\\ntomcat               ok\\n[sendmail](#/sendmail \\\"sendmail命令\\\")               ok\\nweb02[192.168.2.101]\\nhttpd            ok\\npostfix               ok\\nweb03[192.168.2.102]\\nmysqld            ok\\nhttpd               ok\\n0\\nawk '/^web/{T=$0;next;}{print T\\\":t\\\"$0;}' [test](#/test \\\"test命令\\\").txt\\nweb01[192.168.2.100]:   httpd            ok\\nweb01[192.168.2.100]:   tomcat               ok\\nweb01[192.168.2.100]:   sendmail               ok\\nweb02[192.168.2.101]:   httpd            ok\\nweb02[192.168.2.101]:   postfix               ok\\nweb03[192.168.2.102]:   mysqld            ok\\nweb03[192.168.2.102]:   httpd               ok\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"简单地读取一条记录\")]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"awk getline\")]), _vm._v(\"用法：输出重定向需用到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"getline函数\")]), _vm._v(\"。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"getline语法：getline var，变量var包含了特定行的内容。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk getline从整体上来说，用法说明：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"**当其左右无重定向符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"|\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"<\")]), _vm._v(\"时：**getline作用于当前文件，读入当前文件的第一行给其后跟的变量\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"var\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$0\")]), _vm._v(\"（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"**当其左右有重定向符\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"|\")]), _vm._v(\"或\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"<\")]), _vm._v(\"时：**getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"示例：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行linux的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[date](#/date \\\"date命令\\\")\")]), _vm._v(\"命令，并通过管道输出给\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"getline\")]), _vm._v(\"，然后再把输出赋值给自定义变量out，并打印它：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ \\\"date\\\" | getline out; print out }' test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，\"), _c('a', {\n    attrs: {\n      \"href\": \"#/split\",\n      \"title\": \"split命令\"\n    }\n  }, [_vm._v(\"split\")]), _vm._v(\"函数把变量out转化成数组mon，然后打印数组mon的第二个元素：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ \\\"date\\\" | getline out; split(out,mon); print mon[2] }' test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"命令\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ls\",\n      \"title\": \"ls命令\"\n    }\n  }, [_vm._v(\"ls\")]), _vm._v(\"的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{ while( \\\"ls\\\" | getline) print }'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"关闭文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"close(\\\"filename\\\")\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"filename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"输出到一个文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk中允许用如下方式将结果输出到一个文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo | awk '{[printf](#/printf \\\"printf命令\\\")(\\\"hello word!n\\\") > \\\"datafile\\\"}'\\n或\\necho | awk '{printf(\\\"hello word!n\\\") >> \\\"datafile\\\"}'\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"设置字段定界符\")]), _vm._v(\" \"), _c('p', [_vm._v(\"默认的字段定界符是空格，可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-F \\\"定界符\\\"\")]), _vm._v(\"  明确指定一个定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk -F: '{ print $NF }' /etc/[passwd](#/passwd \\\"passwd命令\\\")\\n或\\nawk 'BEGIN{ FS=\\\":\\\" } { print $NF }' /etc/passwd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"BEGIN语句块\")]), _vm._v(\"中则可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"OFS=“定界符”\")]), _vm._v(\"设置输出字段的定界符。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"流程控制语句\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/exit\",\n      \"title\": \"exit命令\"\n    }\n  }, [_vm._v(\"exit\")]), _vm._v(\"这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"条件判断语句\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"if(表达式)\\n  语句1\\nelse\\n  语句2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"if(表达式)\\n  {语句1}\\nelse if(表达式)\\n  {语句2}\\nelse\\n  {语句3}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntest=100;\\nif(test>90){\\n  print \\\"very good\\\";\\n  }\\n  else if(test>60){\\n    print \\\"good\\\";\\n  }\\n  else{\\n    print \\\"no pass\\\";\\n  }\\n}'\\n\\nvery good\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"每条命令语句后面可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\";\")]), _c('strong', [_vm._v(\"分号\")]), _vm._v(\"结尾。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"循环语句\")]), _vm._v(\" \"), _c('h4', [_vm._v(\"while语句\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"while(表达式)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntest=100;\\ntotal=0;\\nwhile(i<=test){\\n  total+=i;\\n  i++;\\n}\\nprint total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h4', [_vm._v(\"for循环\")]), _vm._v(\" \"), _c('p', [_vm._v(\"for循环有两种格式：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"格式1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"for(变量 in 数组)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(k in ENVIRON){\\n  print k\\\"=\\\"ENVIRON[k];\\n}\\n\\n}'\\nTERM=linux\\nG_BROKEN_FILENAMES=1\\nSHLVL=1\\n[pwd](#/pwd \\\"pwd命令\\\")=/root/text\\n...\\n[logname](#/logname \\\"logname命令\\\")=root\\nHOME=/root\\nSSH_CLIENT=192.168.1.21 53087 22\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注：ENVIRON是awk常量，是子典型数组。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"格式2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"for(变量;条件;表达式)\\n  {语句}\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"示例：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntotal=0;\\nfor(i=0;i<=100;i++){\\n  total+=i;\\n}\\nprint total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h4', [_vm._v(\"do循环\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"do\\n{语句} while(条件)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\ntotal=0;\\ni=0;\\ndo {total+=i;i++;} while(i<=100)\\n  print total;\\n}'\\n5050\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"其他语句\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('strong', [_vm._v(\"break\")]), _vm._v(\" 当 break 语句用于 while 或 for 语句时，导致退出程序循环。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"continue\")]), _vm._v(\" 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"next\")]), _vm._v(\" 能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。\")]), _vm._v(\" \"), _c('li', [_c('strong', [_vm._v(\"exit\")]), _vm._v(\" 语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"数组应用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"数组的定义\")]), _vm._v(\" \"), _c('p', [_vm._v(\"数字做数组索引（下标）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Array[1]=\\\"sun\\\"\\nArray[2]=\\\"kai\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"字符串做数组索引（下标）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Array[\\\"first\\\"]=\\\"www\\\"\\nArray[\\\"[last](#/last \\\"last命令\\\")\\\"]=\\\"name\\\"\\nArray[\\\"birth\\\"]=\\\"1987\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print Array[1]\")]), _vm._v(\"会打印出sun；使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print Array[2]\")]), _vm._v(\"会打印出kai；使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"print[\\\"birth\\\"]\")]), _vm._v(\"会得到1987。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"读取数组的值\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"{ for(item in array) {print array[item]}; }       #输出的顺序是随机的\\n{ for(i=1;i<=len;i++) {print array[i]}; }         #Len是数组的长度\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"数组相关函数\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"得到数组长度：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{[info](#/info \\\"info命令\\\")=\\\"it is a test\\\";lens=split(info,tA,\\\" \\\");print length(tA),lens;}'\\n4 4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";split(info,tA,\\\" \\\");print asort(tA);}'\\n4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"asort对数组进行排序，返回数组长度。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"输出数组内容（无序，有序输出）：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";split(info,tA,\\\" \\\");for(k in tA){print k,tA[k];}}'\\n4 test\\n1 it\\n2 is\\n3 a\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"for…in\")]), _vm._v(\"输出，因为数组是关联数组，默认是无序的。所以通过\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"for…in\")]), _vm._v(\"得到是无序的数组。如果需要得到有序数组，需要通过下标获得。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"it is a test\\\";tlen=split(info,tA,\\\" \\\");for(k=1;k<=tlen;k++){print k,tA[k];}}'\\n1 it\\n2 is\\n3 a\\n4 test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：数组下标是从1开始，与C数组不一样。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"判断键值存在以及删除键值：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#错误的判断方法：\\nawk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";if(tB[\\\"c\\\"]!=\\\"1\\\"){print \\\"no found\\\";};for(k in tB){print k,tB[k];}}'\\nno found\\na a1\\nb b1\\nc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上出现奇怪问题，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"tB[“c”]\")]), _vm._v(\"没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#正确判断方法：\\nawk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";if( \\\"c\\\" in tB){print \\\"ok\\\";};for(k in tB){print k,tB[k];}}'\\na a1\\nb b1\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"if(key in array)\")]), _vm._v(\"通过这种方法判断数组中是否包含\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"key\")]), _vm._v(\"键值。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#删除键值：\\n[chengmo@localhost ~]$ awk 'BEGIN{tB[\\\"a\\\"]=\\\"a1\\\";tB[\\\"b\\\"]=\\\"b1\\\";delete tB[\\\"a\\\"];for(k in tB){print k,tB[k];}}'\\nb b1\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"delete array[key]\")]), _vm._v(\"可以删除，对应数组\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"key\")]), _vm._v(\"的，序列值。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"二维、多维数组使用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk的多维数组在本质上是一维数组，更确切一点，awk在存储上并不支持多维数组。awk提供了逻辑上模拟二维数组的访问方式。例如，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"array[2,4]=1\")]), _vm._v(\"这样的访问是允许的。awk使用一个特殊的字符串\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"SUBSEP(�34)\")]), _vm._v(\"作为分割字段，在上面的例子中，关联数组array存储的键值实际上是2�344。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"类似一维数组的成员测试，多维数组可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"if ( (i,j) in array)\")]), _vm._v(\"这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"for ( item in array )\")]), _vm._v(\"这样的语法遍历数组。与一维数组不同的是，多维数组必须使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"split()\")]), _vm._v(\"函数来访问单独的下标分量。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(i=1;i<=9;i++){\\n  for(j=1;j<=9;j++){\\n    tarr[i,j]=i*j; print i,\\\"*\\\",j,\\\"=\\\",tarr[i,j];\\n  }\\n}\\n}'\\n1 * 1 = 1\\n1 * 2 = 2\\n1 * 3 = 3\\n1 * 4 = 4\\n1 * 5 = 5\\n1 * 6 = 6\\n...\\n9 * 6 = 54\\n9 * 7 = 63\\n9 * 8 = 72\\n9 * 9 = 81\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以通过\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"array[k,k2]\")]), _vm._v(\"引用获得数组内容。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种方法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{\\nfor(i=1;i<=9;i++){\\n  for(j=1;j<=9;j++){\\n    tarr[i,j]=i*j;\\n  }\\n}\\nfor(m in tarr){\\n  split(m,tarr2,SUBSEP); print tarr2[1],\\\"*\\\",tarr2[2],\\\"=\\\",tarr[m];\\n}\\n}'\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"内置函数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"awk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"算术函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"height\": \"241\",\n      \"width\": \"907\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"atan2( y, x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 y/x 的反正切。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"cos( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的余弦；x 是弧度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sin( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的正弦；x 是弧度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"exp( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 幂函数。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"log( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的自然对数。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sqrt( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 平方根。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"int( x )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 x 的截断至整数的值。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"rand( )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回任意数字 n，其中 0 <= n=\\\"\\\" <=\\\"\\\" 1。<=\\\"\\\" td=\\\"\\\">\\n</=>\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"srand( [[expr](#/expr \\\"expr命令\\\")] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"举例说明：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{OFMT=\\\"%.3f\\\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;}'\\n0.841 22026.466 2.303 3\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"OFMT 设置输出数据格式是保留3位小数。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"获得随机数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n78\\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n31\\nawk 'BEGIN{srand();fr=int(100*rand());print fr;}'\\n41\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"字符串函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"gsub( Ere, Repl, [ In ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sub( Ere, Repl, [ In ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"index( String1, String2 )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"length [(String)]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"blength [(String)]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"substr( String, M, [ N ] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"match( String, Ere )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"split( String, A, [Ere] )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"tolower( String )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"toupper( String )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"sprintf(Format, Expr, Expr, . . . )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。\")])])])]), _vm._v(\" \"), _c('p', [_vm._v(\"注：Ere都可以是正则表达式。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"gsub,sub使用\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";gsub(/[0-9]+/,\\\"!\\\",info);print info}'\\nthis is a test!test!\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 info中查找满足正则表达式，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/[0-9]+/\")]), _vm._v(\" 用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"””\")]), _vm._v(\"替换，并且替换后的值，赋值给info 未给info值，默认是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$0\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查找字符串（index使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";print index(info,\\\"test\\\")?\\\"ok\\\":\\\"no found\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"未找到，返回0\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"正则表达式匹配查找(match使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test2010test!\\\";print match(info,/[0-9]+/)?\\\"ok\\\":\\\"no found\\\";}'\\nok\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"截取字符串(substr使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[wangsl@centos5 ~]$ awk 'BEGIN{info=\\\"this is a test2010test!\\\";print substr(info,4,10);}'\\ns is a tes\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从第 4个 字符开始，截取10个长度字符串\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"字符串分割（split使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{info=\\\"this is a test\\\";split(info,tA,\\\" \\\");print length(tA);for(k in tA){print k,tA[k];}}'\\n4\\n4 test\\n1 this\\n2 is\\n3 a\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"分割info，动态创建数组tA，这里比较有意思，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"awk for …in\")]), _vm._v(\"循环，是一个无序的循环。 并不是从数组下标1…n ，因此使用时候需要注意。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"格式化字符串输出（sprintf使用）\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"格式化字符串格式：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出; 另一部分是格式化规定字符，以\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"\\\"%\\\"\")]), _vm._v(\"开始，后跟一个或几个规定字符,用来确定输出内容格式。\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"%d\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制有符号整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%u\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制无符号整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%f\")]), _vm._v(\" \"), _c('td', [_vm._v(\"浮点数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%s\")]), _vm._v(\" \"), _c('td', [_vm._v(\"字符串\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%c\")]), _vm._v(\" \"), _c('td', [_vm._v(\"单个字符\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%p\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指针的值\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%e\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指数形式的浮点数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%x\")]), _vm._v(\" \"), _c('td', [_vm._v(\"%X 无符号以十六进制表示的整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%o\")]), _vm._v(\" \"), _c('td', [_vm._v(\"无符号以八进制表示的整数\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%g\")]), _vm._v(\" \"), _c('td', [_vm._v(\"自动选择合适的表示法\")])])])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{n1=124.113;n2=-1.224;n3=1.2345; printf(\\\"%.2f,%.2u,%.2g,%X,%on\\\",n1,n2,n3,n1,n1);}'\\n124.11,18446744073709551615,1.2,7C,174\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"一般函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"close( Expression )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"system([command](#/command \\\"command命令\\\") )\")]), _vm._v(\" \"), _c('td', [_vm._v(\"执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"Expression | getline [ Variable ]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"getline [ Variable ] < Expression\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"getline [ Variable ]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。\")])])])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"打开外部文件（close用法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{while(\\\"cat /etc/passwd\\\"|getline){print $0;};close(\\\"/etc/passwd\\\");}'\\nroot:x:0:0:root:/root:/bin/bash\\nbin:x:1:1:bin:/bin:/sbin/[nologin](#/nologin \\\"nologin命令\\\")\\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"逐行读取外部文件(getline使用方法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{while(getline < \\\"/etc/passwd\\\"){print $0;};close(\\\"/etc/passwd\\\");}'\\nroot:x:0:0:root:/root:/bin/bash\\nbin:x:1:1:bin:/bin:/sbin/nologin\\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{print \\\"Enter your name:\\\";getline name;print name;}'\\nEnter your name:\\nchengmo\\nchengmo\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"调用外部应用程序(system使用方法）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{b=system(\\\"ls -al\\\");print b;}'\\ntotal 42092\\ndrwxr-xr-x 14 chengmo chengmo     4096 09-30 17:47 .\\ndrwxr-xr-x 95 root   root       4096 10-08 14:01 ..\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"b返回值，是执行结果。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"时间函数\")]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"函数名\")]), _vm._v(\" \"), _c('td', [_vm._v(\"说明\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"mktime( YYYY MM [dd](#/dd \\\"dd命令\\\") HH MM [ss](#/ss \\\"ss命令\\\")[ DST])\")]), _vm._v(\" \"), _c('td', [_vm._v(\"生成时间格式\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"strftime([format [, timestamp]])\")]), _vm._v(\" \"), _c('td', [_vm._v(\"格式化时间输出，将时间戳转为时间字符串\\n具体格式，见下表.\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"systime()\")]), _vm._v(\" \"), _c('td', [_vm._v(\"得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数\")])])])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"建指定时间(mktime使用）\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp=mktime(\\\"2001 01 01 12 12 12\\\");print strftime(\\\"%c\\\",tstamp);}'\\n2001年01月01日 星期一 12时12分12秒\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp1=mktime(\\\"2001 01 01 12 12 12\\\");tstamp2=mktime(\\\"2001 02 01 0 0 0\\\");print tstamp2-tstamp1;}'\\n2634468\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"求2个时间段中间时间差，介绍了strftime使用方法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"awk 'BEGIN{tstamp1=mktime(\\\"2001 01 01 12 12 12\\\");tstamp2=systime();print tstamp2-tstamp1;}'\\n308201392\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"strftime日期和时间格式说明符\")])]), _vm._v(\" \"), _c('table', {\n    attrs: {\n      \"width\": \"100%\"\n    }\n  }, [_c('thead', [_c('tr', [_c('th', [_vm._v(\"格式\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])]), _vm._v(\" \"), _c('tbody', [_c('tr', [_c('td', [_vm._v(\"%a\")]), _vm._v(\" \"), _c('td', [_vm._v(\"星期几的缩写(Sun)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%A\")]), _vm._v(\" \"), _c('td', [_vm._v(\"星期几的完整写法(Sunday)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%b\")]), _vm._v(\" \"), _c('td', [_vm._v(\"月名的缩写(Oct)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%B\")]), _vm._v(\" \"), _c('td', [_vm._v(\"月名的完整写法(October)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%c\")]), _vm._v(\" \"), _c('td', [_vm._v(\"本地日期和时间\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%d\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制日期\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%D\")]), _vm._v(\" \"), _c('td', [_vm._v(\"日期 08/20/99\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%e\")]), _vm._v(\" \"), _c('td', [_vm._v(\"日期，如果只有一位会补上一个空格\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%H\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用十进制表示24小时格式的小时\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%I\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用十进制表示12小时格式的小时\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%j\")]), _vm._v(\" \"), _c('td', [_vm._v(\"从1月1日起一年中的第几天\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%m\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的月份\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%M\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的分钟\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%p\")]), _vm._v(\" \"), _c('td', [_vm._v(\"12小时表示法(AM/PM)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%S\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的秒\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%U\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的一年中的第几个星期(星期天作为一个星期的开始)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%[w](#/w \\\"w命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的星期几(星期天是0)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%W\")]), _vm._v(\" \"), _c('td', [_vm._v(\"十进制表示的一年中的第几个星期(星期一作为一个星期的开始)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%x\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重新设置本地日期(08/20/99)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%X\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重新设置本地时间(12：00：00)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%y\")]), _vm._v(\" \"), _c('td', [_vm._v(\"两位数字表示的年(99)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%Y\")]), _vm._v(\" \"), _c('td', [_vm._v(\"当前月份\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%Z\")]), _vm._v(\" \"), _c('td', [_vm._v(\"时区(PDT)\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"%%\")]), _vm._v(\" \"), _c('td', [_vm._v(\"百分号(%)\")])])])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-0f2bd5a7\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/awk.md\n// module id = 1178\n// module chunks = 10","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./awk.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/awk.md\n// module id = 38\n// module chunks = 10","module.exports = __webpack_public_path__ + \"static/img/1225512if.ae36f31.gif\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/images/1225512if.gif\n// module id = 600\n// module chunks = 10","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0f2bd5a7\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./awk.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/awk.md\n// module id = 626\n// module chunks = 10"],"sourceRoot":""}