{"version":3,"sources":["webpack:///static/js/233.62a606b05db01daf69be.js","webpack:///./command/ngrep.md?175d","webpack:///./command/ngrep.md","webpack:///./command/ngrep.md?90fa"],"names":["webpackJsonp","1161","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","320","__webpack_require__","908","Component"],"mappings":"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","file":"static/js/233.62a606b05db01daf69be.js","sourcesContent":["webpackJsonp([233],{\n\n/***/ 1161:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ngrep命令\")]), _vm._v(\"是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/grep\",\n      \"title\": \"grep命令\"\n    }\n  }, [_vm._v(\"grep\")]), _vm._v(\"命令的网络版，他力求更多的grep特征，用于搜寻指定的数据包。正由于安装ngrep需用到libpcap库， 所以支持大量的操作系统和网络协议。能识别TCP、UDP和ICMP包，理解bpf的过滤机制。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"安装\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ngrep命令的下载地址：http://ngrep.sourceforge.net/，libpcap下载地址：http://www.\"), _c('a', {\n    attrs: {\n      \"href\": \"#/tcpdump\",\n      \"title\": \"tcpdump命令\"\n    }\n  }, [_vm._v(\"tcpdump\")]), _vm._v(\".org/。先用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[yum](#/yum \\\"yum命令\\\") [install](#/install \\\"install命令\\\") libpcap\")]), _vm._v(\"完全安装libpcap，注意有时候用libpcap安装包安装的不完整会影响ngrep的使用。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果yum无法安装就用以下步骤安装libpcap：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[wget](#/wget \\\"wget命令\\\") http://www.tcpdump.org/release/libpcap-1.3.0.[tar](#/tar \\\"tar命令\\\").gz\\ntar -zxf libpcap-1.3.0.tar.gz\\n[cd](#/cd \\\"cd命令\\\") libpcap-1.3.0\\n./configure\\n[make](#/make \\\"make命令\\\") && make install\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"ngrep的安装就是 configure/make/make install 三部曲。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注：configure时是遇到 please wipe out all unused pcap installations，添加以下选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"./configure --with-pcap-includes=/usr/local/include/pcap\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在安装后输入ngrep来验证下安装是否成功。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep <-LhNXViwqpevxlDtTRM> <-IO pcap_dump> <-n num> <-d dev> <-A num>\\n<-s snaplen> <-S limitlen> <-[w](#/w \\\"w命令\\\") normal|byline|single|none> <-c cols>\\n<-P char> <-F [file](#/file \\\"file命令\\\")> <match expression> <bpf filter>\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-e ：显示空数据包\\n-i ：忽略大小写\\n-v ：反转匹配\\n-R ：don't do privilege revocation logic\\n-x ：以16进制格式显示\\n-X ：以16进制格式匹配\\n-w ：整字匹配\\n-p ：不使用混杂模式\\n-l ：make stdout line buffered\\n-D ：replay pcap_dumps with their recorded [time](#/time \\\"time命令\\\") intervals\\n-t ：在每个匹配的包之前显示时间戳\\n-T ：显示上一个匹配的数据包之间的时间间隔\\n-M ：仅进行单行匹配\\n-I ：从文件中读取数据进行匹配\\n-O ：将匹配的数据保存到文件\\n-n ：仅捕获指定数目的数据包进行查看\\n-A ：匹配到数据包后[dump](#/dump \\\"dump命令\\\")随后的指定数目的数据包\\n-s ：[set](#/set \\\"set命令\\\") the bpf caplen\\n-S ：set the limitlen on matched packets\\n-W ：设置显示格式byline将解析包中的换行符\\n-c ：强制显示列的宽度\\n-P ：set the non-printable display char to what is specified\\n-F ：使用文件中定义的bpf(Berkeley Packet Filter)\\n-N ：显示由IANA定义的子协议号\\n-d ：使用哪个网卡，可以用-L选项查询\\n-L ：查询网卡接口\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"捕捉cloudian：18080端口的request和response，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-W byline\")]), _vm._v(\"用来解析包中的换行符，否则包里的所有数据都是连续的，可读性差。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d lo\")]), _vm._v(\"是监听本地网卡：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -W byline -d lo port 18080\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"捕捉amazon：80端口的request和response。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d eth0是\")]), _vm._v(\"用来监听对外的网卡：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -W byline -d eth0 port 80\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d any\")]), _vm._v(\"来捕捉所有的包：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep '[a-zA-Z]' -t -W byline -d any tcp port 18080\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"捕获字符串\"), _c('code', {\n    pre: true\n  }, [_vm._v(\".flv\")]), _vm._v(\"，比如要查看在Web Flash 视频中的.flv文件的下载地址：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -d3 -N -q \\\\.flv\\ninterface: \\\\Device\\\\TNT_40_1_{670F6B50-0A13-4BAB-9D9E-994A833F5BA9} (10.132.0.0/2\\n55.255.192.0)\\nmatch: \\\\.flv\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打开一个视频页面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"T(6) 10.132.34.23:24860 -> 61.142.208.154:80 [AP]\\nGET /f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_119556973\\n97.flv HTTP/1.1..[accept](#/accept \\\"accept命令\\\"): */*..Referer: http://www.56.com/flashApp/v_player_\\nsite.swf..x-flash-version: 9,0,45,0..UA-CPU: x86..Accept-Encoding: [gzip](#/gzip \\\"gzip命令\\\"), de\\nflate..User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET\\nCLR 2.0.50727; .NET CLR 3.0.04506.30)..[host](#/host \\\"host命令\\\"): f59.r.56.com..Connection: Keep\\n-Alive..Cookie: whistoryview=23423759-23635627-23423344-23171935-23058374-2\\n3081156-23207350-22395727-; geoip=............; wl_all_s=y....\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"OK。地址已经找到了,就是http://f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_11955697397.flv\")]), _vm._v(\" \"), _c('p', [_vm._v(\"加个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-W byline\")]), _vm._v(\"参数后,将解析包中的换行符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"T(6) 2007/11/25 15:56:12.192619 10.132.34.23:26365 -> 59.151.21.101:80 [AP]\\nGET /aa.flv HTTP/1.1.\\nAccept: */*.\\nAccept-Language: zh-cn.\\nUA-CPU: x86.\\nAccept-Encoding: gzip, deflate.\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.5072\\n7; .NET CLR 3.0.04506.30).\\nHost: www.google.cn.\\nConnection: Keep-Alive.\\nCookie: PREF=[id](#/id \\\"id命令\\\")=a0b2932c336477e9:TB=4:NW=1:TM=1187877372:LM=1187956074:S=Y1Fzndp\\nrT3vFo7ac; SID=DQAAAHcAAABJCEXeOVLHu2rIfb5BfKP3GG9PbhJDEkXsLTV8y0f_lvSd2Y46Q0FPt\\n83CnEs9rxA1xBDM9mLR8-ckWeScyOQA8PyYnX5u5OjFvjfRbDg_FDZfwxhRzqS9KPZv26pjnsUxs0FDM\\n1xpJ5AgDn38pXtlCdkksJ0-cbiIWoA61oHWMg; NID=7=AvJxn5B6YOLLxoYz4LLzhIbNsQUQiulRS6U\\nJGxdBniQBmXm99y7L-NBNORN82N3unmZSGHFPfePVHnLK2MjYjglyXZhU9x7ETXNBnY3NurNijHDhJ7K\\nyi7E53UBOcv4V.\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 320:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(908);\n\n/***/ }),\n\n/***/ 908:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1161),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/233.62a606b05db01daf69be.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ngrep命令\")]), _vm._v(\"是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/grep\",\n      \"title\": \"grep命令\"\n    }\n  }, [_vm._v(\"grep\")]), _vm._v(\"命令的网络版，他力求更多的grep特征，用于搜寻指定的数据包。正由于安装ngrep需用到libpcap库， 所以支持大量的操作系统和网络协议。能识别TCP、UDP和ICMP包，理解bpf的过滤机制。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"安装\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ngrep命令的下载地址：http://ngrep.sourceforge.net/，libpcap下载地址：http://www.\"), _c('a', {\n    attrs: {\n      \"href\": \"#/tcpdump\",\n      \"title\": \"tcpdump命令\"\n    }\n  }, [_vm._v(\"tcpdump\")]), _vm._v(\".org/。先用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[yum](#/yum \\\"yum命令\\\") [install](#/install \\\"install命令\\\") libpcap\")]), _vm._v(\"完全安装libpcap，注意有时候用libpcap安装包安装的不完整会影响ngrep的使用。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果yum无法安装就用以下步骤安装libpcap：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[wget](#/wget \\\"wget命令\\\") http://www.tcpdump.org/release/libpcap-1.3.0.[tar](#/tar \\\"tar命令\\\").gz\\ntar -zxf libpcap-1.3.0.tar.gz\\n[cd](#/cd \\\"cd命令\\\") libpcap-1.3.0\\n./configure\\n[make](#/make \\\"make命令\\\") && make install\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"ngrep的安装就是 configure/make/make install 三部曲。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注：configure时是遇到 please wipe out all unused pcap installations，添加以下选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"./configure --with-pcap-includes=/usr/local/include/pcap\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在安装后输入ngrep来验证下安装是否成功。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep <-LhNXViwqpevxlDtTRM> <-IO pcap_dump> <-n num> <-d dev> <-A num>\\n<-s snaplen> <-S limitlen> <-[w](#/w \\\"w命令\\\") normal|byline|single|none> <-c cols>\\n<-P char> <-F [file](#/file \\\"file命令\\\")> <match expression> <bpf filter>\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-e ：显示空数据包\\n-i ：忽略大小写\\n-v ：反转匹配\\n-R ：don't do privilege revocation logic\\n-x ：以16进制格式显示\\n-X ：以16进制格式匹配\\n-w ：整字匹配\\n-p ：不使用混杂模式\\n-l ：make stdout line buffered\\n-D ：replay pcap_dumps with their recorded [time](#/time \\\"time命令\\\") intervals\\n-t ：在每个匹配的包之前显示时间戳\\n-T ：显示上一个匹配的数据包之间的时间间隔\\n-M ：仅进行单行匹配\\n-I ：从文件中读取数据进行匹配\\n-O ：将匹配的数据保存到文件\\n-n ：仅捕获指定数目的数据包进行查看\\n-A ：匹配到数据包后[dump](#/dump \\\"dump命令\\\")随后的指定数目的数据包\\n-s ：[set](#/set \\\"set命令\\\") the bpf caplen\\n-S ：set the limitlen on matched packets\\n-W ：设置显示格式byline将解析包中的换行符\\n-c ：强制显示列的宽度\\n-P ：set the non-printable display char to what is specified\\n-F ：使用文件中定义的bpf(Berkeley Packet Filter)\\n-N ：显示由IANA定义的子协议号\\n-d ：使用哪个网卡，可以用-L选项查询\\n-L ：查询网卡接口\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"捕捉cloudian：18080端口的request和response，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-W byline\")]), _vm._v(\"用来解析包中的换行符，否则包里的所有数据都是连续的，可读性差。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d lo\")]), _vm._v(\"是监听本地网卡：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -W byline -d lo port 18080\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"捕捉amazon：80端口的request和response。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d eth0是\")]), _vm._v(\"用来监听对外的网卡：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -W byline -d eth0 port 80\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-d any\")]), _vm._v(\"来捕捉所有的包：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep '[a-zA-Z]' -t -W byline -d any tcp port 18080\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"捕获字符串\"), _c('code', {\n    pre: true\n  }, [_vm._v(\".flv\")]), _vm._v(\"，比如要查看在Web Flash 视频中的.flv文件的下载地址：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ngrep -d3 -N -q \\\\.flv\\ninterface: \\\\Device\\\\TNT_40_1_{670F6B50-0A13-4BAB-9D9E-994A833F5BA9} (10.132.0.0/2\\n55.255.192.0)\\nmatch: \\\\.flv\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打开一个视频页面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"T(6) 10.132.34.23:24860 -> 61.142.208.154:80 [AP]\\nGET /f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_119556973\\n97.flv HTTP/1.1..[accept](#/accept \\\"accept命令\\\"): */*..Referer: http://www.56.com/flashApp/v_player_\\nsite.swf..x-flash-version: 9,0,45,0..UA-CPU: x86..Accept-Encoding: [gzip](#/gzip \\\"gzip命令\\\"), de\\nflate..User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET\\nCLR 2.0.50727; .NET CLR 3.0.04506.30)..[host](#/host \\\"host命令\\\"): f59.r.56.com..Connection: Keep\\n-Alive..Cookie: whistoryview=23423759-23635627-23423344-23171935-23058374-2\\n3081156-23207350-22395727-; geoip=............; wl_all_s=y....\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"OK。地址已经找到了,就是http://f59.c31.56.com/flvdownload/12/19/ggyg7741@56.com_56flv_zhajm_11955697397.flv\")]), _vm._v(\" \"), _c('p', [_vm._v(\"加个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-W byline\")]), _vm._v(\"参数后,将解析包中的换行符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"T(6) 2007/11/25 15:56:12.192619 10.132.34.23:26365 -> 59.151.21.101:80 [AP]\\nGET /aa.flv HTTP/1.1.\\nAccept: */*.\\nAccept-Language: zh-cn.\\nUA-CPU: x86.\\nAccept-Encoding: gzip, deflate.\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.5072\\n7; .NET CLR 3.0.04506.30).\\nHost: www.google.cn.\\nConnection: Keep-Alive.\\nCookie: PREF=[id](#/id \\\"id命令\\\")=a0b2932c336477e9:TB=4:NW=1:TM=1187877372:LM=1187956074:S=Y1Fzndp\\nrT3vFo7ac; SID=DQAAAHcAAABJCEXeOVLHu2rIfb5BfKP3GG9PbhJDEkXsLTV8y0f_lvSd2Y46Q0FPt\\n83CnEs9rxA1xBDM9mLR8-ckWeScyOQA8PyYnX5u5OjFvjfRbDg_FDZfwxhRzqS9KPZv26pjnsUxs0FDM\\n1xpJ5AgDn38pXtlCdkksJ0-cbiIWoA61oHWMg; NID=7=AvJxn5B6YOLLxoYz4LLzhIbNsQUQiulRS6U\\nJGxdBniQBmXm99y7L-NBNORN82N3unmZSGHFPfePVHnLK2MjYjglyXZhU9x7ETXNBnY3NurNijHDhJ7K\\nyi7E53UBOcv4V.\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-0adb9790\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ngrep.md\n// module id = 1161\n// module chunks = 233","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ngrep.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/ngrep.md\n// module id = 320\n// module chunks = 233","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0adb9790\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ngrep.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ngrep.md\n// module id = 908\n// module chunks = 233"],"sourceRoot":""}