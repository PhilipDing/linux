{"version":3,"sources":["webpack:///static/js/146.abfdafa330a03827e107.js","webpack:///./command/sed.md?4be3","webpack:///./command/sed.md","webpack:///./command/sed.md?7781"],"names":["webpackJsonp","1287","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","410","__webpack_require__","998","Component"],"mappings":"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","file":"static/js/146.abfdafa330a03827e107.js","sourcesContent":["webpackJsonp([146],{\n\n/***/ 1287:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sed\")]), _vm._v(\"是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"sed的选项、命令、替换标记\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"命令格式\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed [options] '[command](#/command \\\"command命令\\\")' [file](#/file \\\"file命令\\\")(s)\\nsed [options] -f scriptfile file(s)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；\\n-f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；\\n-h或--[help](#/help \\\"help命令\\\")：显示帮助；\\n-n或--quiet或——silent：仅显示script处理后的结果；\\n-V或--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定待处理的文本文件列表。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**a\\\\** 在当前行下面插入文本。\\n**i\\\\** 在当前行上面插入文本。\\n**c\\\\** 把选定的行改为新的文本。\\n**d** 删除，删除选择的行。\\n**D** 删除模板块的第一行。\\n**s** 替换指定字符\\n**h** 拷贝模板块的内容到内存中的缓冲区。\\n**H** 追加模板块的内容到内存中的缓冲区。\\n**g** 获得内存缓冲区的内容，并替代当前模板块中的文本。\\n**G** 获得内存缓冲区的内容，并追加到当前模板块文本的后面。\\n**l** 列表不能打印字符的清单。\\n**n** 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\\n**N** 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\\n**p** 打印模板块的行。\\n**P**(大写) 打印模板块的第一行。\\n**q** 退出Sed。\\n**b lable** 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\\n**r file** 从file中读行。\\n**t label** if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\\n**T label** 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\\n**[w](#/w \\\"w命令\\\") file** 写并追加模板块到file末尾。\\n**W file** 写并追加模板块的第一行到file末尾。\\n**!** 表示后面的命令对所有没有被选定的行发生作用。\\n**=** 打印当前行号码。\\n**#** 把注释扩展到下一个换行符以前。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed替换标记\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**g** 表示行内全面替换。\\n**p** 表示打印行。\\n**w** 表示把行写入一个文件。\\n**x** 表示互换模板块中的文本和缓冲区中的文本。\\n**y** 表示把一个字符翻译为另外的字符（但是不用于正则表达式）\\n**\\\\1** 子串匹配标记\\n**&** 已匹配字符串标记\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed元字符集\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**^** 匹配行开始，如：/^sed/匹配所有以sed开头的行。\\n**$** 匹配行结束，如：/sed$/匹配所有以sed结尾的行。\\n**.** 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。\\n***** 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。\\n**[]** 匹配一个指定范围内的字符，如/[[ss](#/ss \\\"ss命令\\\")][ed](#/ed \\\"ed命令\\\")/匹配sed和Sed。\\n**[^]** 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。\\n**\\\\(..\\\\)** 匹配子串，保存匹配的字符，如s/\\\\(love\\\\)able/\\\\1rs，loveable被替换成lovers。\\n**&** 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。\\n**\\\\<** 匹配单词的开始，如:/\\\\<love/匹配包含以love开头的单词的行。\\n**\\\\>** 匹配单词的结束，如/love\\\\>/匹配包含以love结尾的单词的行。\\n**x\\\\{m\\\\}** 重复字符x，m次，如：/0\\\\{5\\\\}/匹配包含5个0的行。\\n**x\\\\{m,\\\\}** 重复字符x，至少m次，如：/0\\\\{5,\\\\}/匹配至少有5个0的行。\\n**x\\\\{m,n\\\\}** 重复字符x，至少m次，不多于n次，如：/0\\\\{5,10\\\\}/匹配5~10个0的行。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"sed用法实例\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"替换操作：s命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"替换文本中的字符串：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/book/books/' file\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-n选项\")]), _vm._v(\"和\"), _c('strong', [_vm._v(\"p命令\")]), _vm._v(\"一起使用表示只打印那些发生替换的行：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed -n 's/\"), _c('a', {\n    attrs: {\n      \"href\": \"#/test\",\n      \"title\": \"test命令\"\n    }\n  }, [_vm._v(\"test\")]), _vm._v(\"/TEST/p' file\")]), _vm._v(\" \"), _c('p', [_vm._v(\"直接编辑文件\"), _c('strong', [_vm._v(\"选项-i\")]), _vm._v(\"，会匹配file文件中每一行的第一个book替换为books：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i 's/book/books/g' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"全面替换标记g\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用后缀 /g 标记会替换每一行中的所有匹配：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/book/books/g' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当需要从第N处匹配开始替换时，可以使用 /Ng：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") sksksksksksk | sed 's/sk/SK/2g'\\nskSKSKSKSKSK\\n\\necho sksksksksksk | sed 's/sk/SK/3g'\\nskskSKSKSKSK\\n\\necho sksksksksksk | sed 's/sk/SK/4g'\\nskskskSKSKSK\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"定界符\")]), _vm._v(\" \"), _c('p', [_vm._v(\"以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's:test:TEXT:g'\\nsed 's|test|TEXT|g'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"定界符出现在样式内部时，需要进行转义：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/\\\\/bin/\\\\/usr\\\\/local\\\\/bin/g'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"删除操作：d命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除空白行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^$/d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件的第2行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '2d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件的第2行到末尾所有行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '2,$d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件最后一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '$d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件中所有开头是test的行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/'d file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"已匹配字符串标记&\")]), _vm._v(\" \"), _c('p', [_vm._v(\"正则表达式 \\\\w+ 匹配每一个单词，使用 [&] 替换它，& 对应于之前所匹配到的单词：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is a test line | sed 's/\\\\w\\\\+/[&]/g'\\n[this] [is] [a] [test] [line]\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"所有以192.168.0.1开头的行都会被替换成它自已加localhost：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/^192.168.0.1/&localhost/' file\\n192.168.0.1localhost\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"子串匹配标记\\\\1\")]), _vm._v(\" \"), _c('p', [_vm._v(\"匹配给定样式的其中一部分：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is digit 7 in a number | sed 's/digit \\\\([0-9]\\\\)/\\\\1/'\\nthis is 7 in a number\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \"), _c('strong', [_vm._v(\"\\\\1\")]), _vm._v(\"，依此类推匹配到的第二个结果就是 \"), _c('strong', [_vm._v(\"\\\\2\")]), _vm._v(\"，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo aaa BBB | sed 's/\\\\([a-z]\\\\+\\\\) \\\\([A-Z]\\\\+\\\\)/\\\\2 \\\\1/'\\nBBB aaa\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"love被标记为1，所有loveable会被替换成lovers，并打印出来：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n 's/\\\\(love\\\\)able/\\\\1rs/p' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"组合多个表达式\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '表达式' | sed '表达式'\\n\\n等价于：\\n\\nsed '表达式; 表达式'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"引用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"test=hello\\necho hello WORLD | sed \\\"s/$test/HELLO\\\"\\nHELLO WORLD\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选定行的范围：,（逗号）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"所有在模板test和check所确定的范围内的行都被打印：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '/test/,/check/p' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印从第5行开始到第一个包含以test开始的行之间的所有行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '5,/^test/p' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/,/west/s/$/aaa bbb/' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"多点编辑：e命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"-e选项允许在同一行里执行多条命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '1,5d' -e 's/test/check/' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"和 -e 等价的命令是 --expression：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed --expression='s/test/check/' --expression='/love/d' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"从文件读入：r命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/r file' filename\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"写入文件：w命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在example中所有包含test的行都被写入file里：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '/test/w file' example\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"追加（行下）：a\\\\命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将 this is a test line 追加到 以test 开头的行后面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/a\\\\this is a test line' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 test.conf 文件第2行之后插入 this is a test line：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i '2a\\\\this is a test line' test.conf\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"插入（行上）：i\\\\命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将 this is a test line 追加到以test开头的行前面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/i\\\\this is a test line' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在test.conf文件第5行之前插入this is a test line：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i '5i\\\\this is a test line' test.conf\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"下一个：n命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/{ n; s/aa/bb/; }' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"变形：y命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '1,10y/abcde/ABCDE/' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"退出：q命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印完第10行后，退出sed\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '10q' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"保持和获取：h命令和G命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '/test/h' -e '$G' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"保持和互换：h命令和x命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '/test/h' -e '/check/x' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"脚本scriptfile\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed [options] -f scriptfile file(s)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"打印奇数行或偶数行\")]), _vm._v(\" \"), _c('p', [_vm._v(\"方法1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n 'p;n' test.txt  #奇数行\\nsed -n 'n;p' test.txt  #偶数行\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '1~2p' test.txt  #奇数行\\nsed -n '2~2p' test.txt  #偶数行\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"打印匹配字符串的下一行\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[grep](#/grep \\\"grep命令\\\") -A 1 SCC URFILE\\nsed -n '/SCC/{n;p}' URFILE\\n[awk](#/awk \\\"awk命令\\\") '/SCC/{getline; print}' URFILE\\n\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 410:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(998);\n\n/***/ }),\n\n/***/ 998:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1287),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/146.abfdafa330a03827e107.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sed\")]), _vm._v(\"是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。\")]), _vm._v(\" \"), _c('h2', [_vm._v(\"sed的选项、命令、替换标记\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"命令格式\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed [options] '[command](#/command \\\"command命令\\\")' [file](#/file \\\"file命令\\\")(s)\\nsed [options] -f scriptfile file(s)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；\\n-f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；\\n-h或--[help](#/help \\\"help命令\\\")：显示帮助；\\n-n或--quiet或——silent：仅显示script处理后的结果；\\n-V或--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定待处理的文本文件列表。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed命令\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**a\\\\** 在当前行下面插入文本。\\n**i\\\\** 在当前行上面插入文本。\\n**c\\\\** 把选定的行改为新的文本。\\n**d** 删除，删除选择的行。\\n**D** 删除模板块的第一行。\\n**s** 替换指定字符\\n**h** 拷贝模板块的内容到内存中的缓冲区。\\n**H** 追加模板块的内容到内存中的缓冲区。\\n**g** 获得内存缓冲区的内容，并替代当前模板块中的文本。\\n**G** 获得内存缓冲区的内容，并追加到当前模板块文本的后面。\\n**l** 列表不能打印字符的清单。\\n**n** 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\\n**N** 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\\n**p** 打印模板块的行。\\n**P**(大写) 打印模板块的第一行。\\n**q** 退出Sed。\\n**b lable** 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\\n**r file** 从file中读行。\\n**t label** if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\\n**T label** 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\\n**[w](#/w \\\"w命令\\\") file** 写并追加模板块到file末尾。\\n**W file** 写并追加模板块的第一行到file末尾。\\n**!** 表示后面的命令对所有没有被选定的行发生作用。\\n**=** 打印当前行号码。\\n**#** 把注释扩展到下一个换行符以前。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed替换标记\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**g** 表示行内全面替换。\\n**p** 表示打印行。\\n**w** 表示把行写入一个文件。\\n**x** 表示互换模板块中的文本和缓冲区中的文本。\\n**y** 表示把一个字符翻译为另外的字符（但是不用于正则表达式）\\n**\\\\1** 子串匹配标记\\n**&** 已匹配字符串标记\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"sed元字符集\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**^** 匹配行开始，如：/^sed/匹配所有以sed开头的行。\\n**$** 匹配行结束，如：/sed$/匹配所有以sed结尾的行。\\n**.** 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。\\n***** 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。\\n**[]** 匹配一个指定范围内的字符，如/[[ss](#/ss \\\"ss命令\\\")][ed](#/ed \\\"ed命令\\\")/匹配sed和Sed。\\n**[^]** 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。\\n**\\\\(..\\\\)** 匹配子串，保存匹配的字符，如s/\\\\(love\\\\)able/\\\\1rs，loveable被替换成lovers。\\n**&** 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。\\n**\\\\<** 匹配单词的开始，如:/\\\\<love/匹配包含以love开头的单词的行。\\n**\\\\>** 匹配单词的结束，如/love\\\\>/匹配包含以love结尾的单词的行。\\n**x\\\\{m\\\\}** 重复字符x，m次，如：/0\\\\{5\\\\}/匹配包含5个0的行。\\n**x\\\\{m,\\\\}** 重复字符x，至少m次，如：/0\\\\{5,\\\\}/匹配至少有5个0的行。\\n**x\\\\{m,n\\\\}** 重复字符x，至少m次，不多于n次，如：/0\\\\{5,10\\\\}/匹配5~10个0的行。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"sed用法实例\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"替换操作：s命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"替换文本中的字符串：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/book/books/' file\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-n选项\")]), _vm._v(\"和\"), _c('strong', [_vm._v(\"p命令\")]), _vm._v(\"一起使用表示只打印那些发生替换的行：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed -n 's/\"), _c('a', {\n    attrs: {\n      \"href\": \"#/test\",\n      \"title\": \"test命令\"\n    }\n  }, [_vm._v(\"test\")]), _vm._v(\"/TEST/p' file\")]), _vm._v(\" \"), _c('p', [_vm._v(\"直接编辑文件\"), _c('strong', [_vm._v(\"选项-i\")]), _vm._v(\"，会匹配file文件中每一行的第一个book替换为books：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i 's/book/books/g' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"全面替换标记g\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用后缀 /g 标记会替换每一行中的所有匹配：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/book/books/g' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当需要从第N处匹配开始替换时，可以使用 /Ng：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") sksksksksksk | sed 's/sk/SK/2g'\\nskSKSKSKSKSK\\n\\necho sksksksksksk | sed 's/sk/SK/3g'\\nskskSKSKSKSK\\n\\necho sksksksksksk | sed 's/sk/SK/4g'\\nskskskSKSKSK\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"定界符\")]), _vm._v(\" \"), _c('p', [_vm._v(\"以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's:test:TEXT:g'\\nsed 's|test|TEXT|g'\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"定界符出现在样式内部时，需要进行转义：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/\\\\/bin/\\\\/usr\\\\/local\\\\/bin/g'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"删除操作：d命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"删除空白行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^$/d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件的第2行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '2d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件的第2行到末尾所有行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '2,$d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件最后一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '$d' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除文件中所有开头是test的行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/'d file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"已匹配字符串标记&\")]), _vm._v(\" \"), _c('p', [_vm._v(\"正则表达式 \\\\w+ 匹配每一个单词，使用 [&] 替换它，& 对应于之前所匹配到的单词：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is a test line | sed 's/\\\\w\\\\+/[&]/g'\\n[this] [is] [a] [test] [line]\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"所有以192.168.0.1开头的行都会被替换成它自已加localhost：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed 's/^192.168.0.1/&localhost/' file\\n192.168.0.1localhost\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"子串匹配标记\\\\1\")]), _vm._v(\" \"), _c('p', [_vm._v(\"匹配给定样式的其中一部分：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is digit 7 in a number | sed 's/digit \\\\([0-9]\\\\)/\\\\1/'\\nthis is 7 in a number\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \"), _c('strong', [_vm._v(\"\\\\1\")]), _vm._v(\"，依此类推匹配到的第二个结果就是 \"), _c('strong', [_vm._v(\"\\\\2\")]), _vm._v(\"，例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo aaa BBB | sed 's/\\\\([a-z]\\\\+\\\\) \\\\([A-Z]\\\\+\\\\)/\\\\2 \\\\1/'\\nBBB aaa\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"love被标记为1，所有loveable会被替换成lovers，并打印出来：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n 's/\\\\(love\\\\)able/\\\\1rs/p' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"组合多个表达式\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '表达式' | sed '表达式'\\n\\n等价于：\\n\\nsed '表达式; 表达式'\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"引用\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"test=hello\\necho hello WORLD | sed \\\"s/$test/HELLO\\\"\\nHELLO WORLD\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选定行的范围：,（逗号）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"所有在模板test和check所确定的范围内的行都被打印：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '/test/,/check/p' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印从第5行开始到第一个包含以test开始的行之间的所有行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '5,/^test/p' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/,/west/s/$/aaa bbb/' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"多点编辑：e命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"-e选项允许在同一行里执行多条命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '1,5d' -e 's/test/check/' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"和 -e 等价的命令是 --expression：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed --expression='s/test/check/' --expression='/love/d' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"从文件读入：r命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/r file' filename\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"写入文件：w命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在example中所有包含test的行都被写入file里：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '/test/w file' example\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"追加（行下）：a\\\\命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将 this is a test line 追加到 以test 开头的行后面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/a\\\\this is a test line' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 test.conf 文件第2行之后插入 this is a test line：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i '2a\\\\this is a test line' test.conf\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"插入（行上）：i\\\\命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将 this is a test line 追加到以test开头的行前面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/^test/i\\\\this is a test line' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在test.conf文件第5行之前插入this is a test line：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -i '5i\\\\this is a test line' test.conf\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"下一个：n命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '/test/{ n; s/aa/bb/; }' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"变形：y命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '1,10y/abcde/ABCDE/' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"退出：q命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"打印完第10行后，退出sed\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed '10q' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"保持和获取：h命令和G命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '/test/h' -e '$G' file\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"保持和互换：h命令和x命令\")]), _vm._v(\" \"), _c('p', [_vm._v(\"互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -e '/test/h' -e '/check/x' file\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"脚本scriptfile\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed [options] -f scriptfile file(s)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"打印奇数行或偶数行\")]), _vm._v(\" \"), _c('p', [_vm._v(\"方法1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n 'p;n' test.txt  #奇数行\\nsed -n 'n;p' test.txt  #偶数行\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sed -n '1~2p' test.txt  #奇数行\\nsed -n '2~2p' test.txt  #偶数行\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"打印匹配字符串的下一行\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[grep](#/grep \\\"grep命令\\\") -A 1 SCC URFILE\\nsed -n '/SCC/{n;p}' URFILE\\n[awk](#/awk \\\"awk命令\\\") '/SCC/{getline; print}' URFILE\\n\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-2ce23b2a\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sed.md\n// module id = 1287\n// module chunks = 146","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sed.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/sed.md\n// module id = 410\n// module chunks = 146","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2ce23b2a\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sed.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sed.md\n// module id = 998\n// module chunks = 146"],"sourceRoot":""}