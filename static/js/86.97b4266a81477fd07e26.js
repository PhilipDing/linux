webpackJsonp([86],{1059:function(e,t,n){var s=n(5)(null,n(1604),null,null,null);e.exports=s.exports},1604:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",[n("p",[n("strong",[e._v("test命令")]),e._v("是shell环境中测试条件表达式的实用工具。")]),e._v(" "),n("h3",[e._v("语法")]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v("test(选项)\n")])]),e._v(" "),n("h3",[e._v("选项")]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v('-b<文件>：如果文件为一个块特殊文件，则为真；\n-c<文件>：如果文件为一个字符特殊文件，则为真；\n-d<文件>：如果文件为一个目录，则为真；\n-e<文件>：如果文件存在，则为真；\n-f<文件>：如果文件为一个普通文件，则为真；\n-g<文件>：如果设置了文件的SGID位，则为真；\n-G<文件>：如果文件存在且归该组所有，则为真；\n-k<文件>：如果设置了文件的粘着位，则为真；\n-O<文件>：如果文件存在并且归该用户所有，则为真；\n-p<文件>：如果文件为一个命名管道，则为真；\n-r<文件>：如果文件可读，则为真；\n-s<文件>：如果文件的长度不为零，则为真；\n-S<文件>：如果文件为一个套接字特殊文件，则为真；\n-u<文件>：如果设置了文件的SUID位，则为真；\n-[w](#/w "w命令")<文件>：如果文件可写，则为真；\n-x<文件>：如果文件可执行，则为真。\n')])]),e._v(" "),n("h3",[e._v("实例")]),e._v(" "),n("p",[e._v("linux中shell编程中的test常见用法：")]),e._v(" "),n("p",[n("strong",[e._v("判断表达式")])]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v("if test     #表达式为真\nif test !   #表达式为假\ntest 表达式1 –a 表达式2     #两个表达式都为真\ntest 表达式1 –o 表达式2     #两个表达式有一个为真\ntest 表达式1 ! 表达式2       #条件求反\n")])]),e._v(" "),n("p",[n("strong",[e._v("判断字符串")])]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v("test –n 字符串    #字符串的长度非零\ntest –z 字符串    #字符串的长度是否为零\ntest 字符串1＝字符串2       #字符串是否相等，若相等返回true\ntest 字符串1!＝字符串2      #字符串是否不等，若不等反悔false\n")])]),e._v(" "),n("p",[n("strong",[e._v("判断整数")])]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v("test 整数1 -eq 整数2    #整数相等\ntest 整数1 -ge 整数2    #整数1大于等于整数2\ntest 整数1 -gt 整数2    #整数1大于整数2\ntest 整数1 -le 整数2    #整数1小于等于整数2\ntest 整数1 -lt 整数2    #整数1小于整数2\ntest 整数1 -ne 整数2    #整数1不等于整数2\n")])]),e._v(" "),n("p",[n("strong",[e._v("判断文件")])]),e._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[e._v('test File1 –ef File2    两个文件是否为同一个文件，可用于硬连接。主要判断两个文件是否指向同一个inode。\ntest File1 –nt File2    判断文件1是否比文件2新\ntest File1 –ot File2    判断文件1比是否文件2旧\ntest –b [file](#/file "file命令")   #文件是否块设备文件\ntest –c File   #文件并且是字符设备文件\ntest –d File   #文件并且是目录\ntest –e File   #文件是否存在 （常用）\ntest –f File   #文件是否为正规文件 （常用）\ntest –g File   #文件是否是设置了组[id](#/id "id命令")\ntest –G File   #文件属于的有效组ID\ntest –h File   #文件是否是一个符号链接（同-L）\ntest –k File   #文件是否设置了Sticky bit位\ntest –b File   #文件存在并且是块设备文件\ntest –L File   #文件是否是一个符号链接（同-h）\ntest –o File   #文件的属于有效用户ID\ntest –p File   #文件是一个命名管道\ntest –r File   #文件是否可读\ntest –s File   #文件是否是非空白文件\ntest –t FD     #文件描述符是在一个终端打开的\ntest –u File   #文件存在并且设置了它的[set](#/set "set命令")-user-id位\ntest –w File   #文件是否存在并可写\ntest –x File   #文件属否存在并可执行\n')])])])}]}},471:function(e,t,n){e.exports=n(1059)}});
//# sourceMappingURL=86.97b4266a81477fd07e26.js.map