{"version":3,"sources":["webpack:///static/js/509.61f127e91f23f178a399.js","webpack:///./command/badblocks.md?df9b","webpack:///./command/badblocks.md","webpack:///./command/badblocks.md?affb"],"names":["webpackJsonp","1450","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","40","__webpack_require__","629","Component"],"mappings":"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","file":"static/js/509.61f127e91f23f178a399.js","sourcesContent":["webpackJsonp([509],{\n\n/***/ 1450:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"badblock命令\")]), _vm._v(\"用于查找磁盘中损坏的区块。 硬盘是一个损耗设备，当使用一段时间后可能会出现坏道等物理故障。电脑硬盘出现坏道后，如果不及时更换或进行技术处理，坏道就会越来越多，并会造成频繁死机和数据丢失。最好的处理方式是更换磁盘，但在临时的情况下，应及时屏蔽坏道部分的扇区，不要触动它们。badblocks就是一个很好的检查坏道位置的工具。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblock(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<区块大小>：指定磁盘的区块大小，单位为字节；\\n-o<输出文件>：将检查的结果写入指定的输出文件；\\n-s：在检查时显示进度；\\n-v：执行时显示详细的信息；\\n-[w](#/w \\\"w命令\\\")：在检查时，执行写入测试。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"磁盘装置：指定要检查的磁盘装置；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"磁盘区块数：指定磁盘装置的区块总数；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"启始区块：指定要从哪个区块开始检查。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks以4096的一个block，每一个block检查16次，将结果输出到“hda-badblocks-list”文件里。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblocks -b 4096 -c 16 /dev/hda1 -o hda-badblocks-list\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"hda-badblocks-list是个文本文件，内容如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") hda-badblocks-list\\n51249\\n51250\\n51251\\n51253\\n51254\\n……\\n61245\\n……\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以针对可疑的区块多做几次操作。下面，badblocks以4096字节为一个“block”,每一个“block”检查1次, 将结果输出到“hda-badblocks-list.1”文件中，由第51000 block开始，到63000 block结束。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblocks -b 4096 -c 1 /dev/hda1 -o hda-badblocks-list.1 63000 51000\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这次花费的时间比较短，硬盘在指定的情况下在很短的时间就产生“嘎嘎嘎嘎”的响声。由于检查条件的不同，其输出的结果也不完全是相同的。重复几次同样的操作，因条件多少都有些不同，所以结果也有所不同。进行多次操作后，直到产生最后的hda-badblock-list.final文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"其他\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1、\"), _c('a', {\n    attrs: {\n      \"href\": \"#/fsck\",\n      \"title\": \"fsck命令\"\n    }\n  }, [_vm._v(\"fsck\")]), _vm._v(\"使用badblocks的信息\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fsck.ext3 -l /tmp/hda-badblock-list.final /dev/hda1\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2、在创建文件系统前检测坏道\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks可以随\"), _c('a', {\n    attrs: {\n      \"href\": \"#/e2fsck\",\n      \"title\": \"e2fsck命令\"\n    }\n  }, [_vm._v(\"e2fsck\")]), _vm._v(\"和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mke2fs\",\n      \"title\": \"mke2fs命令\"\n    }\n  }, [_vm._v(\"mke2fs\")]), _vm._v(\"的-c删除一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[mkfs](#/mkfs \\\"mkfs命令\\\").ext3 -c /dev/hda1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"代码表示使用-c在创建文件系统前检查坏道的硬盘。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这个操作已经很清楚地告知我们可以采用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"mkfs.ext3 -c\")]), _vm._v(\"选项用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[read](#/read \\\"read命令\\\")-only\")]), _vm._v(\"方式检查硬盘。这个命令会在格式化硬盘时检查硬盘，并标出错误的硬盘“block”。用这个方法格式化硬盘，需要有相当大的耐心，因为命令运行后，会一个个用读的方式检查硬盘。\")])])\n}]}\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(629);\n\n/***/ }),\n\n/***/ 629:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1450),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/509.61f127e91f23f178a399.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"badblock命令\")]), _vm._v(\"用于查找磁盘中损坏的区块。 硬盘是一个损耗设备，当使用一段时间后可能会出现坏道等物理故障。电脑硬盘出现坏道后，如果不及时更换或进行技术处理，坏道就会越来越多，并会造成频繁死机和数据丢失。最好的处理方式是更换磁盘，但在临时的情况下，应及时屏蔽坏道部分的扇区，不要触动它们。badblocks就是一个很好的检查坏道位置的工具。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblock(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<区块大小>：指定磁盘的区块大小，单位为字节；\\n-o<输出文件>：将检查的结果写入指定的输出文件；\\n-s：在检查时显示进度；\\n-v：执行时显示详细的信息；\\n-[w](#/w \\\"w命令\\\")：在检查时，执行写入测试。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"磁盘装置：指定要检查的磁盘装置；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"磁盘区块数：指定磁盘装置的区块总数；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"启始区块：指定要从哪个区块开始检查。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks以4096的一个block，每一个block检查16次，将结果输出到“hda-badblocks-list”文件里。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblocks -b 4096 -c 16 /dev/hda1 -o hda-badblocks-list\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"hda-badblocks-list是个文本文件，内容如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") hda-badblocks-list\\n51249\\n51250\\n51251\\n51253\\n51254\\n……\\n61245\\n……\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"可以针对可疑的区块多做几次操作。下面，badblocks以4096字节为一个“block”,每一个“block”检查1次, 将结果输出到“hda-badblocks-list.1”文件中，由第51000 block开始，到63000 block结束。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"badblocks -b 4096 -c 1 /dev/hda1 -o hda-badblocks-list.1 63000 51000\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这次花费的时间比较短，硬盘在指定的情况下在很短的时间就产生“嘎嘎嘎嘎”的响声。由于检查条件的不同，其输出的结果也不完全是相同的。重复几次同样的操作，因条件多少都有些不同，所以结果也有所不同。进行多次操作后，直到产生最后的hda-badblock-list.final文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"其他\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1、\"), _c('a', {\n    attrs: {\n      \"href\": \"#/fsck\",\n      \"title\": \"fsck命令\"\n    }\n  }, [_vm._v(\"fsck\")]), _vm._v(\"使用badblocks的信息\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks只会在日志文件中标记出坏道的信息，但若希望在检测磁盘时也能跳过这些坏块不检测，可以使用fsck的-l参数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fsck.ext3 -l /tmp/hda-badblock-list.final /dev/hda1\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2、在创建文件系统前检测坏道\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"badblocks可以随\"), _c('a', {\n    attrs: {\n      \"href\": \"#/e2fsck\",\n      \"title\": \"e2fsck命令\"\n    }\n  }, [_vm._v(\"e2fsck\")]), _vm._v(\"和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mke2fs\",\n      \"title\": \"mke2fs命令\"\n    }\n  }, [_vm._v(\"mke2fs\")]), _vm._v(\"的-c删除一起运行（对ext3文件系统也一样），在创建文件系统前就先检测坏道信息：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[mkfs](#/mkfs \\\"mkfs命令\\\").ext3 -c /dev/hda1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"代码表示使用-c在创建文件系统前检查坏道的硬盘。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这个操作已经很清楚地告知我们可以采用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"mkfs.ext3 -c\")]), _vm._v(\"选项用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[read](#/read \\\"read命令\\\")-only\")]), _vm._v(\"方式检查硬盘。这个命令会在格式化硬盘时检查硬盘，并标出错误的硬盘“block”。用这个方法格式化硬盘，需要有相当大的耐心，因为命令运行后，会一个个用读的方式检查硬盘。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-614a3b8f\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/badblocks.md\n// module id = 1450\n// module chunks = 509","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./badblocks.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/badblocks.md\n// module id = 40\n// module chunks = 509","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-614a3b8f\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./badblocks.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/badblocks.md\n// module id = 629\n// module chunks = 509"],"sourceRoot":""}