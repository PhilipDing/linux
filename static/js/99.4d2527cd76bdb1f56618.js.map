{"version":3,"sources":["webpack:///static/js/99.4d2527cd76bdb1f56618.js","webpack:///./command/sysctl.md?f81e","webpack:///./command/sysctl.md?2fa5","webpack:///./command/sysctl.md"],"names":["webpackJsonp","1045","module","exports","__webpack_require__","Component","1557","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","href","title","v-pre","457"],"mappings":"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","file":"static/js/99.4d2527cd76bdb1f56618.js","sourcesContent":["webpackJsonp([99],{\n\n/***/ 1045:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1557),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1557:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sysctl命令\")]), _vm._v(\"被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/proc/sys\")]), _vm._v(\"中。它包含一些TCP/\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\"堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-n：打印值时不打印关键字；\\n-e：忽略未知关键字错误；\\n-N：仅打印名称；\\n-[w](#/w \\\"w命令\\\")：当改变sysctl设置时使用此项；\\n-p：从配置文件“/etc/sysctl.conf”加载内核参数设置；\\n-a：打印当前所有可用的内核参数变量和值；\\n-A：以表格方式打印当前所有可用的内核参数变量和值。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"变量=值：设置内核参数对应的变量值。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"查看所有可读变量：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl -a\")]), _vm._v(\" \"), _c('p', [_vm._v(\"读一个指定的变量，例如\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"kern.maxproc\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl kern.maxproc kern.maxproc: 1044\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要设置一个指定的变量，直接用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"variable=value\")]), _vm._v(\"这样的语法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl kern.maxfiles=5000\\nkern.maxfiles: 2088 -> 5000\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"您可以使用sysctl修改系统变量，也可以通过编辑sysctl.conf文件来修改系统变量。sysctl.conf看起来很像rc.conf。它用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"variable=value\")]), _vm._v(\"的形式来设定值。指定的值在系统进入多用户模式之后被设定。并不是所有的变量都可以在这个模式下设定。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl变量的设置通常是字符串、数字或者布尔型。（布尔型用 1 来表示'\"), _c('a', {\n    attrs: {\n      \"href\": \"#/yes\",\n      \"title\": \"yes命令\"\n    }\n  }, [_vm._v(\"yes\")]), _vm._v(\"'，用 0 来表示'no'）。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl -w kernel.sysrq=0\\nsysctl -w kernel.core_uses_pid=1\\nsysctl -w net.ipv4.conf.default.accept_redirects=0\\nsysctl -w net.ipv4.conf.default.accept_source_route=0\\nsysctl -w net.ipv4.conf.default.rp_filter=1\\nsysctl -w net.ipv4.tcp_syncookies=1\\nsysctl -w net.ipv4.tcp_max_syn_backlog=2048\\nsysctl -w net.ipv4.tcp_fin_timeout=30\\nsysctl -w net.ipv4.tcp_synack_retries=2\\nsysctl -w net.ipv4.tcp_keepalive_time=3600\\nsysctl -w net.ipv4.tcp_window_scaling=1\\nsysctl -w net.ipv4.tcp_sack=1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"配置sysctl\")]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑此文件：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sysctl.conf\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果该文件为空，则输入以下内容，否则请根据情况自己做调整：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Controls source [route](#/route \\\"route命令\\\") verification\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.rp_filter = 1\\n# net.ipv4.conf.all.rp_filter = 1\\n# net.ipv4.conf.lo.rp_filter = 1\\n# net.ipv4.conf.eth0.rp_filter = 1\\n\\n# Disables IP source routing\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.accept_source_route = 0\\n# net.ipv4.conf.all.accept_source_route = 0\\n# net.ipv4.conf.lo.accept_source_route = 0\\n# net.ipv4.conf.eth0.accept_source_route = 0\\n\\n# Controls the System Request debugging functionality of the kernel\\nkernel.sysrq = 0\\n\\n# Controls whether core dumps will append the PID to the core filename.\\n# Useful for debugging multi-threaded applications.\\nkernel.core_uses_pid = 1\\n\\n# Increase maximum amount of memory allocated to shm\\n# Only uncomment if needed!\\n# kernel.shmmax = 67108864\\n\\n# Disable ICMP Redirect Acceptance\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.accept_redirects = 0\\n# net.ipv4.conf.all.accept_redirects = 0\\n# net.ipv4.conf.lo.accept_redirects = 0\\n# net.ipv4.conf.eth0.accept_redirects = 0\\n\\n# [enable](#/enable \\\"enable命令\\\") Log Spoofed Packets, Source Routed Packets, Redirect Packets\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.log_martians = 1\\n# net.ipv4.conf.all.log_martians = 1\\n# net.ipv4.conf.lo.log_martians = 1\\n# net.ipv4.conf.eth0.log_martians = 1\\n\\n# Decrease the [time](#/time \\\"time命令\\\") default value for tcp_fin_timeout connection\\nnet.ipv4.tcp_fin_timeout = 25\\n\\n# Decrease the time default value for tcp_keepalive_time connection\\nnet.ipv4.tcp_keepalive_time = 1200\\n\\n# Turn on the tcp_window_scaling\\nnet.ipv4.tcp_window_scaling = 1\\n\\n# Turn on the tcp_sack\\nnet.ipv4.tcp_sack = 1\\n\\n# tcp_fack should be on because of sack\\nnet.ipv4.tcp_fack = 1\\n\\n# Turn on the tcp_timestamps\\nnet.ipv4.tcp_timestamps = 1\\n\\n# Enable TCP SYN Cookie Protection\\nnet.ipv4.tcp_syncookies = 1\\n\\n# Enable ignoring broadcasts request\\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\\n\\n# Enable bad error message Protection\\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\\n\\n# [make](#/make \\\"make命令\\\") [more](#/more \\\"more命令\\\") local ports available\\n# net.ipv4.ip_local_port_range = 1024 65000\\n\\n# [set](#/set \\\"set命令\\\") TCP Re-Ordering value in kernel to ‘5′\\nnet.ipv4.tcp_reordering = 5\\n\\n# Lower syn retry rates\\nnet.ipv4.tcp_synack_retries = 2\\nnet.ipv4.tcp_syn_retries = 3\\n\\n# Set Max SYN Backlog to ‘2048′\\nnet.ipv4.tcp_max_syn_backlog = 2048\\n\\n# Various Settings\\nnet.core.netdev_max_backlog = 1024\\n\\n# Increase the maximum number of skb-heads to be cached\\nnet.core.hot_list_length = 256\\n\\n# Increase the tcp-time-[wait](#/wait \\\"wait命令\\\") buckets pool size\\nnet.ipv4.tcp_max_tw_buckets = 360000\\n\\n# This will increase the amount of memory available for socket input/output queues\\nnet.core.rmem_default = 65535\\nnet.core.rmem_max = 8388608\\nnet.ipv4.tcp_rmem = 4096 87380 8388608\\nnet.core.wmem_default = 65535\\nnet.core.wmem_max = 8388608\\nnet.ipv4.tcp_wmem = 4096 65535 8388608\\nnet.ipv4.tcp_mem = 8388608 8388608 8388608\\nnet.core.optmem_max = 40960\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果希望屏蔽别人 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/ping\",\n      \"title\": \"ping命令\"\n    }\n  }, [_vm._v(\"ping\")]), _vm._v(\" 你的主机，则加入以下代码：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Disable ping requests\\nnet.ipv4.icmp_echo_ignore_all = 1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑完成后，请执行以下命令使变动立即生效：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"/sbin/sysctl -p\\n/sbin/sysctl -w net.ipv4.route.flush=1\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 457:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1045);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/99.4d2527cd76bdb1f56618.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-86a05d00\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sysctl.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sysctl.md\n// module id = 1045\n// module chunks = 99","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sysctl命令\")]), _vm._v(\"被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/proc/sys\")]), _vm._v(\"中。它包含一些TCP/\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\"堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-n：打印值时不打印关键字；\\n-e：忽略未知关键字错误；\\n-N：仅打印名称；\\n-[w](#/w \\\"w命令\\\")：当改变sysctl设置时使用此项；\\n-p：从配置文件“/etc/sysctl.conf”加载内核参数设置；\\n-a：打印当前所有可用的内核参数变量和值；\\n-A：以表格方式打印当前所有可用的内核参数变量和值。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"变量=值：设置内核参数对应的变量值。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"查看所有可读变量：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl -a\")]), _vm._v(\" \"), _c('p', [_vm._v(\"读一个指定的变量，例如\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"kern.maxproc\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl kern.maxproc kern.maxproc: 1044\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要设置一个指定的变量，直接用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"variable=value\")]), _vm._v(\"这样的语法：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl kern.maxfiles=5000\\nkern.maxfiles: 2088 -> 5000\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"您可以使用sysctl修改系统变量，也可以通过编辑sysctl.conf文件来修改系统变量。sysctl.conf看起来很像rc.conf。它用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"variable=value\")]), _vm._v(\"的形式来设定值。指定的值在系统进入多用户模式之后被设定。并不是所有的变量都可以在这个模式下设定。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sysctl变量的设置通常是字符串、数字或者布尔型。（布尔型用 1 来表示'\"), _c('a', {\n    attrs: {\n      \"href\": \"#/yes\",\n      \"title\": \"yes命令\"\n    }\n  }, [_vm._v(\"yes\")]), _vm._v(\"'，用 0 来表示'no'）。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sysctl -w kernel.sysrq=0\\nsysctl -w kernel.core_uses_pid=1\\nsysctl -w net.ipv4.conf.default.accept_redirects=0\\nsysctl -w net.ipv4.conf.default.accept_source_route=0\\nsysctl -w net.ipv4.conf.default.rp_filter=1\\nsysctl -w net.ipv4.tcp_syncookies=1\\nsysctl -w net.ipv4.tcp_max_syn_backlog=2048\\nsysctl -w net.ipv4.tcp_fin_timeout=30\\nsysctl -w net.ipv4.tcp_synack_retries=2\\nsysctl -w net.ipv4.tcp_keepalive_time=3600\\nsysctl -w net.ipv4.tcp_window_scaling=1\\nsysctl -w net.ipv4.tcp_sack=1\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"配置sysctl\")]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑此文件：\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sysctl.conf\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果该文件为空，则输入以下内容，否则请根据情况自己做调整：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Controls source [route](#/route \\\"route命令\\\") verification\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.rp_filter = 1\\n# net.ipv4.conf.all.rp_filter = 1\\n# net.ipv4.conf.lo.rp_filter = 1\\n# net.ipv4.conf.eth0.rp_filter = 1\\n\\n# Disables IP source routing\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.accept_source_route = 0\\n# net.ipv4.conf.all.accept_source_route = 0\\n# net.ipv4.conf.lo.accept_source_route = 0\\n# net.ipv4.conf.eth0.accept_source_route = 0\\n\\n# Controls the System Request debugging functionality of the kernel\\nkernel.sysrq = 0\\n\\n# Controls whether core dumps will append the PID to the core filename.\\n# Useful for debugging multi-threaded applications.\\nkernel.core_uses_pid = 1\\n\\n# Increase maximum amount of memory allocated to shm\\n# Only uncomment if needed!\\n# kernel.shmmax = 67108864\\n\\n# Disable ICMP Redirect Acceptance\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.accept_redirects = 0\\n# net.ipv4.conf.all.accept_redirects = 0\\n# net.ipv4.conf.lo.accept_redirects = 0\\n# net.ipv4.conf.eth0.accept_redirects = 0\\n\\n# [enable](#/enable \\\"enable命令\\\") Log Spoofed Packets, Source Routed Packets, Redirect Packets\\n# Default should work for all interfaces\\nnet.ipv4.conf.default.log_martians = 1\\n# net.ipv4.conf.all.log_martians = 1\\n# net.ipv4.conf.lo.log_martians = 1\\n# net.ipv4.conf.eth0.log_martians = 1\\n\\n# Decrease the [time](#/time \\\"time命令\\\") default value for tcp_fin_timeout connection\\nnet.ipv4.tcp_fin_timeout = 25\\n\\n# Decrease the time default value for tcp_keepalive_time connection\\nnet.ipv4.tcp_keepalive_time = 1200\\n\\n# Turn on the tcp_window_scaling\\nnet.ipv4.tcp_window_scaling = 1\\n\\n# Turn on the tcp_sack\\nnet.ipv4.tcp_sack = 1\\n\\n# tcp_fack should be on because of sack\\nnet.ipv4.tcp_fack = 1\\n\\n# Turn on the tcp_timestamps\\nnet.ipv4.tcp_timestamps = 1\\n\\n# Enable TCP SYN Cookie Protection\\nnet.ipv4.tcp_syncookies = 1\\n\\n# Enable ignoring broadcasts request\\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\\n\\n# Enable bad error message Protection\\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\\n\\n# [make](#/make \\\"make命令\\\") [more](#/more \\\"more命令\\\") local ports available\\n# net.ipv4.ip_local_port_range = 1024 65000\\n\\n# [set](#/set \\\"set命令\\\") TCP Re-Ordering value in kernel to ‘5′\\nnet.ipv4.tcp_reordering = 5\\n\\n# Lower syn retry rates\\nnet.ipv4.tcp_synack_retries = 2\\nnet.ipv4.tcp_syn_retries = 3\\n\\n# Set Max SYN Backlog to ‘2048′\\nnet.ipv4.tcp_max_syn_backlog = 2048\\n\\n# Various Settings\\nnet.core.netdev_max_backlog = 1024\\n\\n# Increase the maximum number of skb-heads to be cached\\nnet.core.hot_list_length = 256\\n\\n# Increase the tcp-time-[wait](#/wait \\\"wait命令\\\") buckets pool size\\nnet.ipv4.tcp_max_tw_buckets = 360000\\n\\n# This will increase the amount of memory available for socket input/output queues\\nnet.core.rmem_default = 65535\\nnet.core.rmem_max = 8388608\\nnet.ipv4.tcp_rmem = 4096 87380 8388608\\nnet.core.wmem_default = 65535\\nnet.core.wmem_max = 8388608\\nnet.ipv4.tcp_wmem = 4096 65535 8388608\\nnet.ipv4.tcp_mem = 8388608 8388608 8388608\\nnet.core.optmem_max = 40960\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果希望屏蔽别人 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/ping\",\n      \"title\": \"ping命令\"\n    }\n  }, [_vm._v(\"ping\")]), _vm._v(\" 你的主机，则加入以下代码：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Disable ping requests\\nnet.ipv4.icmp_echo_ignore_all = 1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编辑完成后，请执行以下命令使变动立即生效：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"/sbin/sysctl -p\\n/sbin/sysctl -w net.ipv4.route.flush=1\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-86a05d00\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sysctl.md\n// module id = 1557\n// module chunks = 99","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sysctl.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/sysctl.md\n// module id = 457\n// module chunks = 99"],"sourceRoot":""}