{"version":3,"sources":["webpack:///static/js/76.3c3a7e1ec5ba4f012018.js","webpack:///./command/trap.md?9205","webpack:///./command/trap.md?66d9","webpack:///./command/trap.md"],"names":["webpackJsonp","1068","module","exports","__webpack_require__","Component","1561","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","width","480"],"mappings":"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","file":"static/js/76.3c3a7e1ec5ba4f012018.js","sourcesContent":["webpackJsonp([76],{\n\n/***/ 1068:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1561),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1561:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"trap命令\")]), _vm._v(\"用于指定在接收到信号后将要采取的动作，常见的用途是在脚本程序被中断时完成清理工作。当shell接收到sigspec指定的信号时，arg参数（命令）将会被读取，并被执行。例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap \\\"[exit](#/exit \\\"exit命令\\\") 1\\\" HUP INT PIPE QUIT TERM\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"表示当shell收到HUP INT PIPE QUIT TERM这几个命令时，当前执行的程序会读取参数“exit 1”，并将它作为命令执行。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap [-[lp](#/lp \\\"lp命令\\\")] [[arg] sigspec ...]\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项参数说明\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果arg参数缺省或者为“-”，每个接收到的sigspec信号都将会被重置为它们进入shell时的值；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果arg是空字符串每一个由sigspec指定的信号都会被shell和它所调用的命令忽略；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-p\")]), _vm._v(\"选项而没有提供arg参数则会打印所有与sigspec指定信号相关联的的trap命令；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果没有提供任何参数或者仅有-p选项，trap命令将会打印与每一个信号有关联的命令的列表；\")]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"-l\")]), _vm._v(\"选项的作用是让shell打印一个命令名称和其相对应的编号的列表。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"每个sigspec信号都是是以名字或者编号的形式定义在signal.h头文件中，信号的名字是不区分大小写的，其前缀SIG是可选的，如果某个信号是 EXIT（0），那么arg指定的命令将会在shell上执行退出命令时执行（If a sigspec is EXIT (0) the \"), _c('a', {\n    attrs: {\n      \"href\": \"#/command\",\n      \"title\": \"command命令\"\n    }\n  }, [_vm._v(\"command\")]), _vm._v(\" arg is executed on exit from the shell），如果sigspec是DEBUG，那么arg指定的命令将会在以下每个命令执行之前执行：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"简单命令，for语句，case语句，select命令，算法命令，在函数内的第一条命令。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"更多trap debug的使用可以参考extdebug选项说明。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果sigspec是ERR，arg参数指定的命令将会在任何简单命名执行完后返回值为非零值时执行，但是也有以下例外情况：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"如果执行失败的命令是紧跟在while或者until关键字之后的一组命令中的一部分时\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果执行失败的命令是if测试语句的一部分时，是 && 和 ||连接的列表中的一部分时\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果执行失败的命令的返回值是被取反过的（通过!操作符）\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在以上情况中如果sigspec是ERR，arg命令不会执行，这些规则同样适用于errexit选项。如果sigspec是RETURN，arg指定的命令在每次shell函数或者脚本用\\\".\\\"或者内置的命令执行完成后执行，在shell入口处被忽略的命令 是没法被trap和reset的，被trap的信号，在创建的子进程中使用时会在子进程被创建时被重置为原始的值。如果trap使用的sigspec信号 是invalid的信号则trap命令返回false（失败），否则返回成功（true）。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"信号\")]), _vm._v(\" \"), _c('p', [_vm._v(\"信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用Ctrl c之类便进入到shell状态，做我们不希望做的事情。这便用到了信号处理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"以下是一些你可能会遇到的，要在程序中使用的更常见的信号：\")]), _vm._v(\" \"), _c('table', [_c('tbody', [_c('tr', [_c('th', {\n    attrs: {\n      \"width\": \"100\"\n    }\n  }, [_vm._v(\"信号名称\")]), _vm._v(\" \"), _c('th', {\n    attrs: {\n      \"width\": \"60\"\n    }\n  }, [_vm._v(\"信号数\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGHUP\")]), _vm._v(\" \"), _c('td', [_vm._v(\"1\")]), _vm._v(\" \"), _c('td', [_vm._v(\"本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。 登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGINT\")]), _vm._v(\" \"), _c('td', [_vm._v(\"2\")]), _vm._v(\" \"), _c('td', [_vm._v(\"程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl C)时发出。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGQUIT\")]), _vm._v(\" \"), _c('td', [_vm._v(\"3\")]), _vm._v(\" \"), _c('td', [_vm._v(\"和SIGINT类似, 但由QUIT字符(通常是Ctrl /)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGFPE\")]), _vm._v(\" \"), _c('td', [_vm._v(\"8\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGKILL\")]), _vm._v(\" \"), _c('td', [_vm._v(\"9\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用来立即结束程序的运行. 本信号不能被阻塞, 处理和忽略。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGALRM\")]), _vm._v(\" \"), _c('td', [_vm._v(\"14\")]), _vm._v(\" \"), _c('td', [_vm._v(\"时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGTERM\")]), _vm._v(\" \"), _c('td', [_vm._v(\"15\")]), _vm._v(\" \"), _c('td', [_vm._v(\"程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出. shell命令[kill](#/kill \\\"kill命令\\\")缺省产生这个信号。\")])])])]), _vm._v(\" \"), _c('h3', [_vm._v(\"捕获信号\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当你按下 Ctrl + C 键或 Break 键在终端一个shell程序的执行过程中，正常程序将立即终止，并返回命令提示符。这可能并不总是可取的。例如，你可能最终留下了一堆临时文件，将不会清理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"捕获这些信号是很容易的，trap命令的语法如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap commands signals\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的命令可以是任何有效的Linux命令，或一个用户定义的函数，信号可以是任意数量的信号，你想来捕获的列表。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在shell脚本中的陷阱有三种常见的用途：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"清理临时文件\")]), _vm._v(\" \"), _c('li', [_vm._v(\"忽略信号\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1、清理临时文件：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"trap命令作为一个例子，下面展示了如何可以删除一些文件，然后退出，如果有人试图从终端中止程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap \\\"[rm](#/rm \\\"rm命令\\\") -f $WORKDIR/work1$ $WORKDIR/dataout$; exit\\\" 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行shell程序，这个陷阱的角度，这两个文件work1$$ 和 dataout$$将被自动删除，如果程序接收信号数为2。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"因此，用户中断执行，如果执行的程序后，这个陷阱你可以放心，这两个文件将被清理。 exit 命令如下 rm 是必要的，因为没有它的执行将继续在节目中的一点，它离开时收到信号。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"1号信号产生挂断：要么有人故意挂断线路或线路被意外断开。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"您可以修改前面的陷阱也删除指定的文件，在这种情况下，两个信号信号1号添加到列表：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap \\\"rm $WORKDIR/work1$ $WORKDIR/dataout$; exit\\\" 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"现在，这些文件将被删除，如果该行被挂了，或者按Ctrl c键被按下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"来捕获指定的命令必须用引号括起来，如果它们包含一个以上的命令。另外请注意，在 shell 命令行扫描 trap 命令得到执行，并再次当一个所列出的的信号被接收的时间。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"WORKDIR 值 $$ 所以在前面的例子中，将被取代 trap 命令执行的时间。如果你想这种替代发生在收到信号1或2的时间你可以把单引号内的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap 'rm $WORKDIR/work1$ $WORKDIR/dataout$; exit' 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2、忽略信号：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果陷阱列出的命令是空的，指定的信号接收时，将被忽略。例如，下面的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap '' 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"指定的中断信号是被忽略的。你可能要忽略某些信号时进行一些操作，不希望打断。可以指定多个信号被忽略如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap '' 1 2 3 15\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，第一个参数必须被指定为一个信号被忽略，而不是相当于写入下面的内容，它具有独立的含义也各有：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap  2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果你忽略了一个信号，所有的子shell也忽略该信号。不过，如果指定要采取的行动在收到的信号，所有的子shell仍然会在收到该信号的默认操作。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3、重设陷阱：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当你改变了默认在收到信号后应采取的动作，你可以改变它回来的陷阱，如果你只是省略第一个参数;\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"复位应采取的动作收到信号1或2返回默认。\")])])\n}]}\n\n/***/ }),\n\n/***/ 480:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1068);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/76.3c3a7e1ec5ba4f012018.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-8b25973e\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./trap.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/trap.md\n// module id = 1068\n// module chunks = 76","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"trap命令\")]), _vm._v(\"用于指定在接收到信号后将要采取的动作，常见的用途是在脚本程序被中断时完成清理工作。当shell接收到sigspec指定的信号时，arg参数（命令）将会被读取，并被执行。例如：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap \\\"[exit](#/exit \\\"exit命令\\\") 1\\\" HUP INT PIPE QUIT TERM\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"表示当shell收到HUP INT PIPE QUIT TERM这几个命令时，当前执行的程序会读取参数“exit 1”，并将它作为命令执行。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap [-[lp](#/lp \\\"lp命令\\\")] [[arg] sigspec ...]\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项参数说明\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果arg参数缺省或者为“-”，每个接收到的sigspec信号都将会被重置为它们进入shell时的值；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果arg是空字符串每一个由sigspec指定的信号都会被shell和它所调用的命令忽略；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-p\")]), _vm._v(\"选项而没有提供arg参数则会打印所有与sigspec指定信号相关联的的trap命令；\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果没有提供任何参数或者仅有-p选项，trap命令将会打印与每一个信号有关联的命令的列表；\")]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"-l\")]), _vm._v(\"选项的作用是让shell打印一个命令名称和其相对应的编号的列表。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"每个sigspec信号都是是以名字或者编号的形式定义在signal.h头文件中，信号的名字是不区分大小写的，其前缀SIG是可选的，如果某个信号是 EXIT（0），那么arg指定的命令将会在shell上执行退出命令时执行（If a sigspec is EXIT (0) the \"), _c('a', {\n    attrs: {\n      \"href\": \"#/command\",\n      \"title\": \"command命令\"\n    }\n  }, [_vm._v(\"command\")]), _vm._v(\" arg is executed on exit from the shell），如果sigspec是DEBUG，那么arg指定的命令将会在以下每个命令执行之前执行：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"简单命令，for语句，case语句，select命令，算法命令，在函数内的第一条命令。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"更多trap debug的使用可以参考extdebug选项说明。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果sigspec是ERR，arg参数指定的命令将会在任何简单命名执行完后返回值为非零值时执行，但是也有以下例外情况：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"如果执行失败的命令是紧跟在while或者until关键字之后的一组命令中的一部分时\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果执行失败的命令是if测试语句的一部分时，是 && 和 ||连接的列表中的一部分时\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果执行失败的命令的返回值是被取反过的（通过!操作符）\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在以上情况中如果sigspec是ERR，arg命令不会执行，这些规则同样适用于errexit选项。如果sigspec是RETURN，arg指定的命令在每次shell函数或者脚本用\\\".\\\"或者内置的命令执行完成后执行，在shell入口处被忽略的命令 是没法被trap和reset的，被trap的信号，在创建的子进程中使用时会在子进程被创建时被重置为原始的值。如果trap使用的sigspec信号 是invalid的信号则trap命令返回false（失败），否则返回成功（true）。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"信号\")]), _vm._v(\" \"), _c('p', [_vm._v(\"信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用Ctrl c之类便进入到shell状态，做我们不希望做的事情。这便用到了信号处理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"以下是一些你可能会遇到的，要在程序中使用的更常见的信号：\")]), _vm._v(\" \"), _c('table', [_c('tbody', [_c('tr', [_c('th', {\n    attrs: {\n      \"width\": \"100\"\n    }\n  }, [_vm._v(\"信号名称\")]), _vm._v(\" \"), _c('th', {\n    attrs: {\n      \"width\": \"60\"\n    }\n  }, [_vm._v(\"信号数\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGHUP\")]), _vm._v(\" \"), _c('td', [_vm._v(\"1\")]), _vm._v(\" \"), _c('td', [_vm._v(\"本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。 登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGINT\")]), _vm._v(\" \"), _c('td', [_vm._v(\"2\")]), _vm._v(\" \"), _c('td', [_vm._v(\"程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl C)时发出。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGQUIT\")]), _vm._v(\" \"), _c('td', [_vm._v(\"3\")]), _vm._v(\" \"), _c('td', [_vm._v(\"和SIGINT类似, 但由QUIT字符(通常是Ctrl /)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGFPE\")]), _vm._v(\" \"), _c('td', [_vm._v(\"8\")]), _vm._v(\" \"), _c('td', [_vm._v(\"在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGKILL\")]), _vm._v(\" \"), _c('td', [_vm._v(\"9\")]), _vm._v(\" \"), _c('td', [_vm._v(\"用来立即结束程序的运行. 本信号不能被阻塞, 处理和忽略。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGALRM\")]), _vm._v(\" \"), _c('td', [_vm._v(\"14\")]), _vm._v(\" \"), _c('td', [_vm._v(\"时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号。\")])]), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"SIGTERM\")]), _vm._v(\" \"), _c('td', [_vm._v(\"15\")]), _vm._v(\" \"), _c('td', [_vm._v(\"程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出. shell命令[kill](#/kill \\\"kill命令\\\")缺省产生这个信号。\")])])])]), _vm._v(\" \"), _c('h3', [_vm._v(\"捕获信号\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当你按下 Ctrl + C 键或 Break 键在终端一个shell程序的执行过程中，正常程序将立即终止，并返回命令提示符。这可能并不总是可取的。例如，你可能最终留下了一堆临时文件，将不会清理。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"捕获这些信号是很容易的，trap命令的语法如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap commands signals\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的命令可以是任何有效的Linux命令，或一个用户定义的函数，信号可以是任意数量的信号，你想来捕获的列表。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在shell脚本中的陷阱有三种常见的用途：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"清理临时文件\")]), _vm._v(\" \"), _c('li', [_vm._v(\"忽略信号\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"1、清理临时文件：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"trap命令作为一个例子，下面展示了如何可以删除一些文件，然后退出，如果有人试图从终端中止程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"trap \\\"[rm](#/rm \\\"rm命令\\\") -f $WORKDIR/work1$ $WORKDIR/dataout$; exit\\\" 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行shell程序，这个陷阱的角度，这两个文件work1$$ 和 dataout$$将被自动删除，如果程序接收信号数为2。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"因此，用户中断执行，如果执行的程序后，这个陷阱你可以放心，这两个文件将被清理。 exit 命令如下 rm 是必要的，因为没有它的执行将继续在节目中的一点，它离开时收到信号。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"1号信号产生挂断：要么有人故意挂断线路或线路被意外断开。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"您可以修改前面的陷阱也删除指定的文件，在这种情况下，两个信号信号1号添加到列表：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap \\\"rm $WORKDIR/work1$ $WORKDIR/dataout$; exit\\\" 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"现在，这些文件将被删除，如果该行被挂了，或者按Ctrl c键被按下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"来捕获指定的命令必须用引号括起来，如果它们包含一个以上的命令。另外请注意，在 shell 命令行扫描 trap 命令得到执行，并再次当一个所列出的的信号被接收的时间。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"WORKDIR 值 $$ 所以在前面的例子中，将被取代 trap 命令执行的时间。如果你想这种替代发生在收到信号1或2的时间你可以把单引号内的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap 'rm $WORKDIR/work1$ $WORKDIR/dataout$; exit' 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"2、忽略信号：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果陷阱列出的命令是空的，指定的信号接收时，将被忽略。例如，下面的命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap '' 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"指定的中断信号是被忽略的。你可能要忽略某些信号时进行一些操作，不希望打断。可以指定多个信号被忽略如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap '' 1 2 3 15\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，第一个参数必须被指定为一个信号被忽略，而不是相当于写入下面的内容，它具有独立的含义也各有：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap  2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果你忽略了一个信号，所有的子shell也忽略该信号。不过，如果指定要采取的行动在收到的信号，所有的子shell仍然会在收到该信号的默认操作。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"3、重设陷阱：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当你改变了默认在收到信号后应采取的动作，你可以改变它回来的陷阱，如果你只是省略第一个参数;\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ trap 1 2\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"复位应采取的动作收到信号1或2返回默认。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-8b25973e\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/trap.md\n// module id = 1561\n// module chunks = 76","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./trap.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/trap.md\n// module id = 480\n// module chunks = 76"],"sourceRoot":""}