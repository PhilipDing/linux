{"version":3,"sources":["webpack:///static/js/384.701f252fead0aafe524e.js","webpack:///./command/gcc.md?745d","webpack:///./command/gcc.md","webpack:///./command/gcc.md?ddcf"],"names":["webpackJsonp","1211","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","167","__webpack_require__","755","Component"],"mappings":"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","file":"static/js/384.701f252fead0aafe524e.js","sourcesContent":["webpackJsonp([384],{\n\n/***/ 1211:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"gcc命令\")]), _vm._v(\"使用GNU推出的基于C/C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用GCC，怎样才能更好的应用GCC。目前，GCC可以用来编译C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的语言。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-o：指定生成的输出文件；\\n-E：仅执行编译预处理；\\n-S：将C代码转换为汇编代码；\\n-[wall](#/wall \\\"wall命令\\\")：显示警告信息；\\n-c：仅执行编译操作，不进行连接操作。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"C源文件：指定C语言源代码文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"常用编译命令选项\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假设源程序文件名为\"), _c('a', {\n    attrs: {\n      \"href\": \"#/test\",\n      \"title\": \"test命令\"\n    }\n  }, [_vm._v(\"test\")]), _vm._v(\".c\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"无选项编译链接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -o\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -E\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -E test.c -o test.i\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理输出test.i文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -S\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -S test.i\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将预处理输出文件test.i汇编成test.s文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -c\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -c test.s\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将汇编输出文件test.s编译输出test.o文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"无选项链接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.o -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将编译输出文件test.o链接成最终可执行文件test。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -O\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -O1 test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"多源文件的编译方法\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果有多个源文件，基本上有两种编译方法：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"假设有两个源文件为test.c和testfun.c\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"多个文件一起编译\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc testfun.c test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将testfun.c和test.c分别编译后链接成test可执行文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"分别编译各个源文件，之后对编译后输出的目标文件链接。\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -c testfun.c    #将testfun.c编译成testfun.o\\ngcc -c test.c       #将test.c编译成test.o\\ngcc -o testfun.o test.o -o test    #将testfun.o和test.o链接成test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。\")])])\n}]}\n\n/***/ }),\n\n/***/ 167:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(755);\n\n/***/ }),\n\n/***/ 755:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1211),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/384.701f252fead0aafe524e.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"gcc命令\")]), _vm._v(\"使用GNU推出的基于C/C++的编译器，是开放源代码领域应用最广泛的编译器，具有功能强大，编译代码支持性能优化等特点。现在很多程序员都应用GCC，怎样才能更好的应用GCC。目前，GCC可以用来编译C/C++、FORTRAN、JAVA、OBJC、ADA等语言的程序，可根据需要选择安装支持的语言。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-o：指定生成的输出文件；\\n-E：仅执行编译预处理；\\n-S：将C代码转换为汇编代码；\\n-[wall](#/wall \\\"wall命令\\\")：显示警告信息；\\n-c：仅执行编译操作，不进行连接操作。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"C源文件：指定C语言源代码文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"常用编译命令选项\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假设源程序文件名为\"), _c('a', {\n    attrs: {\n      \"href\": \"#/test\",\n      \"title\": \"test命令\"\n    }\n  }, [_vm._v(\"test\")]), _vm._v(\".c\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"无选项编译链接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为a.out。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -o\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理、汇编、编译并链接形成可执行文件test。-o选项用来指定输出文件的文件名。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -E\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -E test.c -o test.i\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将test.c预处理输出test.i文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -S\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -S test.i\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将预处理输出文件test.i汇编成test.s文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -c\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -c test.s\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将汇编输出文件test.s编译输出test.o文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"无选项链接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc test.o -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将编译输出文件test.o链接成最终可执行文件test。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"选项 -O\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -O1 test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"多源文件的编译方法\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果有多个源文件，基本上有两种编译方法：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"假设有两个源文件为test.c和testfun.c\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"多个文件一起编译\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc testfun.c test.c -o test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将testfun.c和test.c分别编译后链接成test可执行文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"分别编译各个源文件，之后对编译后输出的目标文件链接。\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"gcc -c testfun.c    #将testfun.c编译成testfun.o\\ngcc -c test.c       #将test.c编译成test.o\\ngcc -o testfun.o test.o -o test    #将testfun.o和test.o链接成test\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-184b7055\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/gcc.md\n// module id = 1211\n// module chunks = 384","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./gcc.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/gcc.md\n// module id = 167\n// module chunks = 384","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-184b7055\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./gcc.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/gcc.md\n// module id = 755\n// module chunks = 384"],"sourceRoot":""}