{"version":3,"sources":["webpack:///static/js/463.5cbcbb3dfbeba77d6801.js","webpack:///./command/cpio.md?70db","webpack:///./command/cpio.md?a9e4","webpack:///./command/cpio.md"],"names":["webpackJsonp","1315","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","676","__webpack_require__","Component","88"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAgBC,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,YAAAR,EAAAQ,GAAA,wDAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACAI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,kBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,60DAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,gBAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,mBAAAR,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,0EAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,+BAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,+CAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,OAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,wBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,6BAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,mDAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,yDAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,6CAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,qCAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,2HAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,8HDUGI,IACA,SAAUf,EAAQC,EAASe,GExDjC,GAAAC,GAAAD,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAhB,GAAAC,QAAAgB,EAAAhB,SF+DMiB,GACA,SAAUlB,EAAQC,EAASe,GG7EjChB,EAAAC,QAAAe,EAAA","file":"static/js/463.5cbcbb3dfbeba77d6801.js","sourcesContent":["webpackJsonp([463],{\n\n/***/ 1315:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"cpio命令\")]), _vm._v(\"主要是用来建立或者还原备份档的工具程序，cpio命令可以复制文件到归档包中，或者从归档包中复制文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-0或--null：接受新增列控制字符，通常配合[find](#/find \\\"find命令\\\")指令的“-print0”参数使用；\\n-a或--rest-access-[time](#/time \\\"time命令\\\")：重新设置文件的存取时间；\\n-A或--append：附加到已存在的备份文档中，且这个备份文档必须存放在磁盘上，而不能放置于磁带机里；\\n-b或--awap：此参数的效果和同时指定“-[ss](#/ss \\\"ss命令\\\")”参数相同；\\n-B：将输入/输出的区块大小改成5210Bytes；\\n-c：使用旧ASCII备份格式；\\n-C<区块大小>或--io-size=<区块大小>：设置输入/输出的区块大小，单位是Byte；\\n-d或--[make](#/make \\\"make命令\\\")-directories：如有需要cpio会自行建立目录；\\n-E<范本文件>或--pattern-[file](#/file \\\"file命令\\\")=<范本文件>：指定范本文件，其内含有一个或多个范本样式，让cpio解开符合范本条件的文件，格式为每列一个范本样式；\\n-f或--nonmatching：让cpio解开所有不符合范本条件的文件；\\n-F<备份档>或--file=<备份档>：指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档；\\n-H<备份格式>：指定备份时欲使用的文件格式；\\n-i或--extract：执行copy-in模式，还原备份档；\\n-l<备份档>：指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档；\\n-k：此参数将忽略不予处理，仅负责解决cpio不同版本间的兼容性问题；\\n-l或--link：以硬连接的方式取代复制文件，可在copy-pass模式下运用；\\n-L或--dereference：不建立符号连接，直接复制该连接所指向的原始文件；\\n-m或preserve-modification-time：不去更改文件的更改时间；\\n-M<回传信息>或--message=<回传信息>：设置更换保存媒体的信息；\\n-n或--numeric-uid-gid：使用“-tv”参数列出备份档的内容时，若再加上参数“-n”，则会以用户识别和群组识别码替代拥有者和群组名称列出文件清单；\\n-o或--create：执行copy-out模式，建立备份档；\\n-O<备份档>：指定备份档的名称，用来取代标准输出，也能借此通过网络使用另一台主机的保存设备存放备份档；\\n-p或--pass-through：执行copy-pass模式，略过备份步骤，直接将文件复制到目的目录；\\n-r或--[rename](#/rename \\\"rename命令\\\")：当有文件名称需要更改时，采用互动模式；\\n-R<拥有者><:/.><所属群组>或----owner<拥有者><:/.><所属群组>   在copy-in模式还原备份档，或copy-pass模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组；\\n-s或--swap-bytes：交换每队字节的内容；\\n-S或--swap-halfwords：交换每半个字节的内容；\\n-t或--list：将输入的内容呈现出来；\\n-u或--unconditional：置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖；\\n-v或--verbose：详细显示指令的执行过程；\\n-V或--dot：执行指令时。在每个文件的执行程序前面加上“.”号；\\n--block-size=<区块大小>：设置输入/输出的区块大小，假如设置数值为5，则区块大小为2500，若设置成10，则区块大小为5120，以此类推；\\n--force-local：强制将备份档存放在本地主机；\\n--[help](#/help \\\"help命令\\\")：在线帮助；\\n--no-absolute-filenames：使用相对路径建立文件名称；\\n--no-preserve-owner：不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有；\\n-only-verify-crc：当备份档采用CRC备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误；\\n--quiet：不显示复制了多少区块；\\n--sparse：倘若一个文件内含有大量的连续0字节，则将此文件存在稀疏文件；\\n--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc\")]), _vm._v(\"下的所有普通文件都备份到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/opt/etc.cpio\")]), _vm._v(\"，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find /etc –[type](#/type \\\"type命令\\\") f | cpio –ocvB >/opt/etc.cpio\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将系统上所有资料备份到磁带机内，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find / -print | cpio -covB > /dev/st0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/dev/st0\")]), _vm._v(\"是磁带的设备名，代表SCSI磁带机。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查看上例磁带机上备份的文件，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio  -icdvt < /dev/st0 > /tmp/st_content\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"有时可能因为备份的文件过多，一个屏幕无法显示完毕，此时我们利用下面命令，让磁带机的文件信息输出到文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将示例1中的备份包还原到相应的位置，如果有相同文件进行覆盖，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio –icduv < /opt/etc.cpio\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，cpio恢复的路径，如果cpio在打包备份的时候用的是绝对路径，那么在恢复的时候会自动恢复到这些绝对路径下，本例就会将备份文件全部还原到/etc路径下对应的目录中。同理，如果在打包备份用的是相对路径，还原时也将恢复到相对路径下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"通过上面的示例，可以看出，cpio无法直接读取文件，它需要每个文件或者目录的完整路径名才能识别读取，而find命令的输出刚好做到了这点，因此，cpio命令一般和find命令配合使用。其实，上面的示例我们已经看到了它们的组合用法。\")])])\n}]}\n\n/***/ }),\n\n/***/ 676:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1315),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 88:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(676);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/463.5cbcbb3dfbeba77d6801.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"cpio命令\")]), _vm._v(\"主要是用来建立或者还原备份档的工具程序，cpio命令可以复制文件到归档包中，或者从归档包中复制文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-0或--null：接受新增列控制字符，通常配合[find](#/find \\\"find命令\\\")指令的“-print0”参数使用；\\n-a或--rest-access-[time](#/time \\\"time命令\\\")：重新设置文件的存取时间；\\n-A或--append：附加到已存在的备份文档中，且这个备份文档必须存放在磁盘上，而不能放置于磁带机里；\\n-b或--awap：此参数的效果和同时指定“-[ss](#/ss \\\"ss命令\\\")”参数相同；\\n-B：将输入/输出的区块大小改成5210Bytes；\\n-c：使用旧ASCII备份格式；\\n-C<区块大小>或--io-size=<区块大小>：设置输入/输出的区块大小，单位是Byte；\\n-d或--[make](#/make \\\"make命令\\\")-directories：如有需要cpio会自行建立目录；\\n-E<范本文件>或--pattern-[file](#/file \\\"file命令\\\")=<范本文件>：指定范本文件，其内含有一个或多个范本样式，让cpio解开符合范本条件的文件，格式为每列一个范本样式；\\n-f或--nonmatching：让cpio解开所有不符合范本条件的文件；\\n-F<备份档>或--file=<备份档>：指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档；\\n-H<备份格式>：指定备份时欲使用的文件格式；\\n-i或--extract：执行copy-in模式，还原备份档；\\n-l<备份档>：指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档；\\n-k：此参数将忽略不予处理，仅负责解决cpio不同版本间的兼容性问题；\\n-l或--link：以硬连接的方式取代复制文件，可在copy-pass模式下运用；\\n-L或--dereference：不建立符号连接，直接复制该连接所指向的原始文件；\\n-m或preserve-modification-time：不去更改文件的更改时间；\\n-M<回传信息>或--message=<回传信息>：设置更换保存媒体的信息；\\n-n或--numeric-uid-gid：使用“-tv”参数列出备份档的内容时，若再加上参数“-n”，则会以用户识别和群组识别码替代拥有者和群组名称列出文件清单；\\n-o或--create：执行copy-out模式，建立备份档；\\n-O<备份档>：指定备份档的名称，用来取代标准输出，也能借此通过网络使用另一台主机的保存设备存放备份档；\\n-p或--pass-through：执行copy-pass模式，略过备份步骤，直接将文件复制到目的目录；\\n-r或--[rename](#/rename \\\"rename命令\\\")：当有文件名称需要更改时，采用互动模式；\\n-R<拥有者><:/.><所属群组>或----owner<拥有者><:/.><所属群组>   在copy-in模式还原备份档，或copy-pass模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组；\\n-s或--swap-bytes：交换每队字节的内容；\\n-S或--swap-halfwords：交换每半个字节的内容；\\n-t或--list：将输入的内容呈现出来；\\n-u或--unconditional：置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖；\\n-v或--verbose：详细显示指令的执行过程；\\n-V或--dot：执行指令时。在每个文件的执行程序前面加上“.”号；\\n--block-size=<区块大小>：设置输入/输出的区块大小，假如设置数值为5，则区块大小为2500，若设置成10，则区块大小为5120，以此类推；\\n--force-local：强制将备份档存放在本地主机；\\n--[help](#/help \\\"help命令\\\")：在线帮助；\\n--no-absolute-filenames：使用相对路径建立文件名称；\\n--no-preserve-owner：不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有；\\n-only-verify-crc：当备份档采用CRC备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误；\\n--quiet：不显示复制了多少区块；\\n--sparse：倘若一个文件内含有大量的连续0字节，则将此文件存在稀疏文件；\\n--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc\")]), _vm._v(\"下的所有普通文件都备份到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/opt/etc.cpio\")]), _vm._v(\"，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find /etc –[type](#/type \\\"type命令\\\") f | cpio –ocvB >/opt/etc.cpio\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将系统上所有资料备份到磁带机内，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find / -print | cpio -covB > /dev/st0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/dev/st0\")]), _vm._v(\"是磁带的设备名，代表SCSI磁带机。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查看上例磁带机上备份的文件，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio  -icdvt < /dev/st0 > /tmp/st_content\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"有时可能因为备份的文件过多，一个屏幕无法显示完毕，此时我们利用下面命令，让磁带机的文件信息输出到文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将示例1中的备份包还原到相应的位置，如果有相同文件进行覆盖，使用以下命令：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cpio –icduv < /opt/etc.cpio\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，cpio恢复的路径，如果cpio在打包备份的时候用的是绝对路径，那么在恢复的时候会自动恢复到这些绝对路径下，本例就会将备份文件全部还原到/etc路径下对应的目录中。同理，如果在打包备份用的是相对路径，还原时也将恢复到相对路径下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"通过上面的示例，可以看出，cpio无法直接读取文件，它需要每个文件或者目录的完整路径名才能识别读取，而find命令的输出刚好做到了这点，因此，cpio命令一般和find命令配合使用。其实，上面的示例我们已经看到了它们的组合用法。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-3429db7b\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/cpio.md\n// module id = 1315\n// module chunks = 463","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3429db7b\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./cpio.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/cpio.md\n// module id = 676\n// module chunks = 463","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./cpio.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/cpio.md\n// module id = 88\n// module chunks = 463"],"sourceRoot":""}