{"version":3,"sources":["webpack:///static/js/280.f306e65053b418ec7c00.js","webpack:///./command/lsof.md?8ac2","webpack:///./command/lsof.md","webpack:///./command/lsof.md?de50"],"names":["webpackJsonp","1201","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","272","__webpack_require__","860","Component"],"mappings":"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","file":"static/js/280.f306e65053b418ec7c00.js","sourcesContent":["webpackJsonp([280],{\n\n/***/ 1201:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"lsof命令\")]), _vm._v(\"用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"lsof(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：列出打开文件存在的进程；\\n-c<进程名>：列出指定进程所打开的文件；\\n-g：列出GID号进程详情；\\n-d<文件号>：列出占用该文件号的进程；\\n+d<目录>：列出目录下被打开的文件；\\n+D<目录>：递归列出目录下被打开的文件；\\n-n<目录>：列出使用NFS的文件；\\n-i<条件>：列出符合条件的进程。（4、6、协议、:端口、 @[ip](#/ip \\\"ip命令\\\") ）\\n-p<进程号>：列出指定进程号所打开的文件；\\n-u：列出UID号进程详情；\\n-h：显示帮助信息；\\n-v：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"lsof\\n[command](#/command \\\"command命令\\\")     PID USER   FD      [type](#/type \\\"type命令\\\")             DEVICE     SIZE       NODE NAME\\n[init](#/init \\\"init命令\\\")          1 root  cwd       DIR                8,2     4096          2 /\\ninit          1 root  rtd       DIR                8,2     4096          2 /\\ninit          1 root  txt       REG                8,2    43496    6121706 /sbin/init\\ninit          1 root  mem       REG                8,2   143600    7823908 /lib64/[ld](#/ld \\\"ld命令\\\")-2.5.so\\ninit          1 root  mem       REG                8,2  1722304    7823915 /lib64/libc-2.5.so\\ninit          1 root  mem       REG                8,2    23360    7823919 /lib64/libdl-2.5.so\\ninit          1 root  mem       REG                8,2    95464    7824116 /lib64/libselinux.so.1\\ninit          1 root  mem       REG                8,2   247496    7823947 /lib64/libsepol.so.1\\ninit          1 root   10u     FIFO               0,17                1233 /dev/initctl\\nmigration     2 root  cwd       DIR                8,2     4096          2 /\\nmigration     2 root  rtd       DIR                8,2     4096          2 /\\nmigration     2 root  txt   unknown                                        /proc/2/exe\\nksoftirqd     3 root  cwd       DIR                8,2     4096          2 /\\nksoftirqd     3 root  rtd       DIR                8,2     4096          2 /\\nksoftirqd     3 root  txt   unknown                                        /proc/3/exe\\nmigration     4 root  cwd       DIR                8,2     4096          2 /\\nmigration     4 root  rtd       DIR                8,2     4096          2 /\\nmigration     4 root  txt   unknown                                        /proc/4/exe\\nksoftirqd     5 root  cwd       DIR                8,2     4096          2 /\\nksoftirqd     5 root  rtd       DIR                8,2     4096          2 /\\nksoftirqd     5 root  txt   unknown                                        /proc/5/exe\\nevents/0      6 root  cwd       DIR                8,2     4096          2 /\\nevents/0      6 root  rtd       DIR                8,2     4096          2 /\\nevents/0      6 root  txt   unknown                                        /proc/6/exe\\nevents/1      7 root  cwd       DIR                8,2     4096          2 /\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"lsof输出各列信息的意义如下：\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"COMMAND：进程的名称\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PID：进程标识符\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PPID：父进程标识符（需要指定-R参数）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"USER：进程所有者\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PGID：进程所属组\")]), _vm._v(\" \"), _c('li', [_vm._v(\"FD：文件描述符，应用程序通过文件描述符识别该文件。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件描述符列表：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改\")]), _vm._v(\" \"), _c('li', [_vm._v(\"txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序\")]), _vm._v(\" \"), _c('li', [_vm._v(\"lnn：library references (AIX);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"er：FD information error (see NAME column);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"jld：jail directory (FreeBSD);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"ltx：shared library text (code and data);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mxx ：hex memory-mapped type number xx.\")]), _vm._v(\" \"), _c('li', [_vm._v(\"m86：DOS Merge mapped \"), _c('a', {\n    attrs: {\n      \"href\": \"#/file\",\n      \"title\": \"file命令\"\n    }\n  }, [_vm._v(\"file\")]), _vm._v(\";\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mem：memory-mapped file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mmap：memory-mapped device;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"pd：parent directory;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"rtd：root directory;\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/tr\",\n      \"title\": \"tr命令\"\n    }\n  }, [_vm._v(\"tr\")]), _vm._v(\"：kernel trace file (OpenBSD);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"v86  VP/ix mapped file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"0：表示标准输出\")]), _vm._v(\" \"), _c('li', [_vm._v(\"1：表示标准输入\")]), _vm._v(\" \"), _c('li', [_vm._v(\"2：表示标准错误\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"一般在标准输出、标准错误、标准输入后还跟着文件状态模式：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"u：表示该文件被打开并处于读取/写入模式。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"r：表示该文件被打开并处于只读模式。\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/w\",\n      \"title\": \"w命令\"\n    }\n  }, [_vm._v(\"w\")]), _vm._v(\"：表示该文件被打开并处于。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"空格：表示该文件的状态模式为unknow，且没有锁定。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"-：表示该文件的状态模式为unknow，且被锁定。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"同时在文件状态模式后面，还跟着相关的锁：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"N：for a Solaris NFS lock of unknown type;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"r：for \"), _c('a', {\n    attrs: {\n      \"href\": \"#/read\",\n      \"title\": \"read命令\"\n    }\n  }, [_vm._v(\"read\")]), _vm._v(\" lock on part of the file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"R：for a read lock on the entire file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"w：for a \"), _c('a', {\n    attrs: {\n      \"href\": \"#/write\",\n      \"title\": \"write命令\"\n    }\n  }, [_vm._v(\"write\")]), _vm._v(\" lock on part of the file;（文件的部分写锁）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"W：for a write lock on the entire file;（整个文件的写锁）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"u：for a read and write lock of any length;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"U：for a lock of unknown type;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"x：for an SCO OpenServer Xenix lock on part      of the file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"X：for an SCO OpenServer Xenix lock on the      entire file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"space：if there is no lock.\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件类型：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"DIR：表示目录。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"CHR：表示字符类型。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"BLK：块设备类型。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"UNIX： UNIX 域套接字。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"FIFO：先进先出 (FIFO) 队列。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"IPv4：网际协议 (IP) 套接字。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"DEVICE：指定磁盘的名称\")]), _vm._v(\" \"), _c('li', [_vm._v(\"SIZE：文件的大小\")]), _vm._v(\" \"), _c('li', [_vm._v(\"NODE：索引节点（文件在磁盘上的标识）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"NAME：打开文件的确切名称\")])])])\n}]}\n\n/***/ }),\n\n/***/ 272:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(860);\n\n/***/ }),\n\n/***/ 860:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1201),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/280.f306e65053b418ec7c00.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"lsof命令\")]), _vm._v(\"用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"lsof(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：列出打开文件存在的进程；\\n-c<进程名>：列出指定进程所打开的文件；\\n-g：列出GID号进程详情；\\n-d<文件号>：列出占用该文件号的进程；\\n+d<目录>：列出目录下被打开的文件；\\n+D<目录>：递归列出目录下被打开的文件；\\n-n<目录>：列出使用NFS的文件；\\n-i<条件>：列出符合条件的进程。（4、6、协议、:端口、 @[ip](#/ip \\\"ip命令\\\") ）\\n-p<进程号>：列出指定进程号所打开的文件；\\n-u：列出UID号进程详情；\\n-h：显示帮助信息；\\n-v：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"lsof\\n[command](#/command \\\"command命令\\\")     PID USER   FD      [type](#/type \\\"type命令\\\")             DEVICE     SIZE       NODE NAME\\n[init](#/init \\\"init命令\\\")          1 root  cwd       DIR                8,2     4096          2 /\\ninit          1 root  rtd       DIR                8,2     4096          2 /\\ninit          1 root  txt       REG                8,2    43496    6121706 /sbin/init\\ninit          1 root  mem       REG                8,2   143600    7823908 /lib64/[ld](#/ld \\\"ld命令\\\")-2.5.so\\ninit          1 root  mem       REG                8,2  1722304    7823915 /lib64/libc-2.5.so\\ninit          1 root  mem       REG                8,2    23360    7823919 /lib64/libdl-2.5.so\\ninit          1 root  mem       REG                8,2    95464    7824116 /lib64/libselinux.so.1\\ninit          1 root  mem       REG                8,2   247496    7823947 /lib64/libsepol.so.1\\ninit          1 root   10u     FIFO               0,17                1233 /dev/initctl\\nmigration     2 root  cwd       DIR                8,2     4096          2 /\\nmigration     2 root  rtd       DIR                8,2     4096          2 /\\nmigration     2 root  txt   unknown                                        /proc/2/exe\\nksoftirqd     3 root  cwd       DIR                8,2     4096          2 /\\nksoftirqd     3 root  rtd       DIR                8,2     4096          2 /\\nksoftirqd     3 root  txt   unknown                                        /proc/3/exe\\nmigration     4 root  cwd       DIR                8,2     4096          2 /\\nmigration     4 root  rtd       DIR                8,2     4096          2 /\\nmigration     4 root  txt   unknown                                        /proc/4/exe\\nksoftirqd     5 root  cwd       DIR                8,2     4096          2 /\\nksoftirqd     5 root  rtd       DIR                8,2     4096          2 /\\nksoftirqd     5 root  txt   unknown                                        /proc/5/exe\\nevents/0      6 root  cwd       DIR                8,2     4096          2 /\\nevents/0      6 root  rtd       DIR                8,2     4096          2 /\\nevents/0      6 root  txt   unknown                                        /proc/6/exe\\nevents/1      7 root  cwd       DIR                8,2     4096          2 /\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"lsof输出各列信息的意义如下：\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"COMMAND：进程的名称\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PID：进程标识符\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PPID：父进程标识符（需要指定-R参数）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"USER：进程所有者\")]), _vm._v(\" \"), _c('li', [_vm._v(\"PGID：进程所属组\")]), _vm._v(\" \"), _c('li', [_vm._v(\"FD：文件描述符，应用程序通过文件描述符识别该文件。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件描述符列表：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改\")]), _vm._v(\" \"), _c('li', [_vm._v(\"txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序\")]), _vm._v(\" \"), _c('li', [_vm._v(\"lnn：library references (AIX);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"er：FD information error (see NAME column);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"jld：jail directory (FreeBSD);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"ltx：shared library text (code and data);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mxx ：hex memory-mapped type number xx.\")]), _vm._v(\" \"), _c('li', [_vm._v(\"m86：DOS Merge mapped \"), _c('a', {\n    attrs: {\n      \"href\": \"#/file\",\n      \"title\": \"file命令\"\n    }\n  }, [_vm._v(\"file\")]), _vm._v(\";\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mem：memory-mapped file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"mmap：memory-mapped device;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"pd：parent directory;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"rtd：root directory;\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/tr\",\n      \"title\": \"tr命令\"\n    }\n  }, [_vm._v(\"tr\")]), _vm._v(\"：kernel trace file (OpenBSD);\")]), _vm._v(\" \"), _c('li', [_vm._v(\"v86  VP/ix mapped file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"0：表示标准输出\")]), _vm._v(\" \"), _c('li', [_vm._v(\"1：表示标准输入\")]), _vm._v(\" \"), _c('li', [_vm._v(\"2：表示标准错误\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"一般在标准输出、标准错误、标准输入后还跟着文件状态模式：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"u：表示该文件被打开并处于读取/写入模式。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"r：表示该文件被打开并处于只读模式。\")]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"#/w\",\n      \"title\": \"w命令\"\n    }\n  }, [_vm._v(\"w\")]), _vm._v(\"：表示该文件被打开并处于。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"空格：表示该文件的状态模式为unknow，且没有锁定。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"-：表示该文件的状态模式为unknow，且被锁定。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"同时在文件状态模式后面，还跟着相关的锁：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"N：for a Solaris NFS lock of unknown type;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"r：for \"), _c('a', {\n    attrs: {\n      \"href\": \"#/read\",\n      \"title\": \"read命令\"\n    }\n  }, [_vm._v(\"read\")]), _vm._v(\" lock on part of the file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"R：for a read lock on the entire file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"w：for a \"), _c('a', {\n    attrs: {\n      \"href\": \"#/write\",\n      \"title\": \"write命令\"\n    }\n  }, [_vm._v(\"write\")]), _vm._v(\" lock on part of the file;（文件的部分写锁）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"W：for a write lock on the entire file;（整个文件的写锁）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"u：for a read and write lock of any length;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"U：for a lock of unknown type;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"x：for an SCO OpenServer Xenix lock on part      of the file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"X：for an SCO OpenServer Xenix lock on the      entire file;\")]), _vm._v(\" \"), _c('li', [_vm._v(\"space：if there is no lock.\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件类型：\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"DIR：表示目录。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"CHR：表示字符类型。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"BLK：块设备类型。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"UNIX： UNIX 域套接字。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"FIFO：先进先出 (FIFO) 队列。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"IPv4：网际协议 (IP) 套接字。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"DEVICE：指定磁盘的名称\")]), _vm._v(\" \"), _c('li', [_vm._v(\"SIZE：文件的大小\")]), _vm._v(\" \"), _c('li', [_vm._v(\"NODE：索引节点（文件在磁盘上的标识）\")]), _vm._v(\" \"), _c('li', [_vm._v(\"NAME：打开文件的确切名称\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-15b0f050\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/lsof.md\n// module id = 1201\n// module chunks = 280","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./lsof.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/lsof.md\n// module id = 272\n// module chunks = 280","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-15b0f050\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./lsof.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/lsof.md\n// module id = 860\n// module chunks = 280"],"sourceRoot":""}