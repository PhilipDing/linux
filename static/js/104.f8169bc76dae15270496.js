webpackJsonp([104],{1040:function(o,e,r){var s=r(5)(null,r(1340),null,null,null);o.exports=s.exports},1340:function(o,e){o.exports={render:function(){var o=this,e=o.$createElement;o._self._c;return o._m(0)},staticRenderFns:[function(){var o=this,e=o.$createElement,r=o._self._c||e;return r("section",[r("p",[r("strong",[o._v("sudo命令")]),o._v("用来以其他身份来执行命令，预设的身份为root。在"),r("code",{pre:!0},[o._v("/etc/sudoers")]),o._v("中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。")]),o._v(" "),r("h3",[o._v("语法")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("sudo(选项)(参数)\n")])]),o._v(" "),r("h3",[o._v("选项")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("-b：在后台执行指令；\n-h：显示帮助；\n-H：将HOME环境变量设为新身份的HOME环境变量；\n-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。\n-l：列出目前用户可执行与无法执行的指令；\n-p：改变询问密码的提示符号；\n-s<shell>：执行指定的shell；\n-u<用户>：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；\n-v：延长密码有效期限5分钟；\n-V ：显示版本信息。\n")])]),o._v(" "),r("h3",[o._v("参数")]),o._v(" "),r("p",[o._v("指令：需要运行的指令和对应的参数。")]),o._v(" "),r("h3",[o._v("实例")]),o._v(" "),r("p",[o._v("配置sudo必须通过编辑"),r("code",{pre:!0},[o._v("/etc/sudoers")]),o._v("文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。")]),o._v(" "),r("p",[o._v("visudo默认的是在"),r("a",{attrs:{href:"#/vi",title:"vi命令"}},[o._v("vi")]),o._v("里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。visudo不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('>>> sudoers [file](#/file "file命令"): syntax error, line 22 <<\n')])]),o._v(" "),r("p",[o._v("此时我们有三种选择：键入“e”是重新编辑，键入“x”是不保存退出，键入“Q”是退出并保存。如果真选择Q，那么sudo将不会再运行，直到错误被纠正。")]),o._v(" "),r("p",[o._v("现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户Foobar可以通过sudo执行所有root可执行的命令。以root身份用visudo打开配置文件，可以看到类似下面几行：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('# Runas [alias](#/alias "alias命令") specification\n# User privilege specificationroot    ALL=(ALL)ALL\n')])]),o._v(" "),r("p",[o._v("我们一看就明白个差不多了，root有所有权限，只要仿照现有root的例子就行，我们在下面加一行（最好用tab作为空白）：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("foobar ALL=(ALL)    ALL\n")])]),o._v(" "),r("p",[o._v("保存退出后，切换到foobar用户，我们用它的身份执行命令：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('[foobar@localhost ~]$ [ls](#/ls "ls命令") /root\nls: /root: 权限不够\n\n[foobar@localhost ~]$ sudo ls /root\nPassWord:\nanaconda-ks.cfg Desktop [install](#/install "install命令").log install.log.syslog\n')])]),o._v(" "),r("p",[o._v("好了，我们限制一下foobar的权利，不让他为所欲为。比如我们只想让他像root那样使用ls和"),r("a",{attrs:{href:"#/ifconfig",title:"ifconfig命令"}},[o._v("ifconfig")]),o._v("，把那一行改为：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("foobar localhost=    /sbin/ifconfig,   /bin/ls\n")])]),o._v(" "),r("p",[o._v("再来执行命令：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('[foobar@localhost ~]$ sudo [head](#/head "head命令") -5 /etc/shadow\nPassword:\nSorry, user foobar is not allowed to execute \'/usr/bin/head -5 /etc/shadow\' [as](#/as "as命令") root on localhost.localdomain.\n\n[foobar@localhost ~]$ sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr 00:14:85:EC:E9:9B...\n')])]),o._v(" "),r("p",[o._v("现在让我们来看一下那三个ALL到底是什么意思。第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明foobar可以在此主机上执行后面的命令。第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。最后一个ALL当然就是指命令名了。例如，我们想让foobar用户在linux主机上以jimmy或rene的身份执行"),r("a",{attrs:{href:"#/kill",title:"kill命令"}},[o._v("kill")]),o._v("命令，这样编写配置文件：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("foobar    linux=(jimmy,rene)    /bin/kill\n")])]),o._v(" "),r("p",[o._v("但这还有个问题，foobar到底以jimmy还是rene的身份执行？这时我们应该想到了"),r("code",{pre:!0},[o._v("sudo -u")]),o._v("了，它正是用在这种时候。 foobar可以使用"),r("code",{pre:!0},[o._v("sudo -u jimmy kill PID")]),o._v("或者"),r("code",{pre:!0},[o._v("sudo -u rene kill PID")]),o._v("，但这样挺麻烦，其实我们可以不必每次加"),r("code",{pre:!0},[o._v("-u")]),o._v("，把rene或jimmy设为默认的目标用户即可。再在上面加一行：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("Defaults:foobar    runas_default=rene\n")])]),o._v(" "),r("p",[o._v("Defaults后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("Defaults    env_reset\n")])]),o._v(" "),r("p",[o._v("另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('foobar localhost=NOPASSWD:     /bin/[cat](#/cat "cat命令"), /bin/ls\n')])]),o._v(" "),r("p",[o._v("再来sudo一下：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg Desktop install.log\ninstall.log.syslog\n")])]),o._v(" "),r("p",[o._v("当然，你也可以说“某些命令用户foobar不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从ALL中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。")]),o._v(" "),r("p",[r("strong",[o._v("日志与安全")])]),o._v(" "),r("p",[o._v("sudo为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，sudo的日志功能不是自动的，必须由管理员开启。这样来做：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('[touch](#/touch "touch命令") /var/log/sudo\nvi /etc/syslog.conf\n')])]),o._v(" "),r("p",[o._v("在syslog.conf最后面加一行（必须用tab分割开）并保存：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("local2.debug                    /var/log/sudo\n")])]),o._v(" "),r("p",[o._v("重启日志守候进程，")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('[ps](#/ps "ps命令") aux [grep](#/grep "grep命令") syslogd\n')])]),o._v(" "),r("p",[o._v("把得到的syslogd进程的PID（输出的第二列是PID）填入下面：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("kill –HUP PID\n")])]),o._v(" "),r("p",[o._v("这样，sudo就可以写日志了：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v('[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg\nDesktop install.log\ninstall.log.syslog\n$cat /var/log/sudoJul 28 22:52:54 localhost sudo:   foobar :\nTTY=pts/1 ; [pwd](#/pwd "pwd命令")=/home/foobar ; USER=root ; [command](#/command "command命令")=/bin/ls /root\n')])]),o._v(" "),r("p",[o._v("不过，有一个小小的“缺陷”，sudo记录日志并不是很忠实：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("[foobar@localhost ~]$ sudo cat /etc/shadow > /dev/null\ncat /var/log/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY=pts/1 ;\nPWD=/home/foobar ; USER=root ; COMMAND=/bin/cat /etc/shadow\n")])]),o._v(" "),r("p",[o._v("重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，sudo根本就没看到重定向。这也有个好处，下面的手段不会得逞：")]),o._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":""}},[o._v("[foobar@localhost ~]$ sudo ls /root > /etc/shadowbash: /etc/shadow: 权限不够\n")])]),o._v(" "),r("p",[o._v("sudo 有自己的方式来保护安全。以root的身份执行"),r("code",{pre:!0},[o._v("sudo-V")]),o._v("，查看一下sudo的设置。因为考虑到安全问题，一部分环境变量并没有传递给sudo后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。当然，你也可以通过sudoers来配置这些环境变量。")])])}]}},451:function(o,e,r){o.exports=r(1040)}});
//# sourceMappingURL=104.f8169bc76dae15270496.js.map