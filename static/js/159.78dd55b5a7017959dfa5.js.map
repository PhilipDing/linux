{"version":3,"sources":["webpack:///static/js/159.78dd55b5a7017959dfa5.js","webpack:///./command/route.md?05cb","webpack:///./command/route.md","webpack:///./command/route.md?6af0"],"names":["webpackJsonp","1371","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","396","__webpack_require__","984","Component"],"mappings":"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","file":"static/js/159.78dd55b5a7017959dfa5.js","sourcesContent":["webpackJsonp([159],{\n\n/***/ 1371:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"route命令\")]), _vm._v(\"用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在Linux系统中设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\"地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/rc.local\")]), _vm._v(\"中添加route命令来保证该路由设置永久有效。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-A：设置地址类型；\\n-C：打印将Linux核心的路由缓存；\\n-v：详细信息模式；\\n-n：不执行DNS反向查找，直接显示数字形式的IP地址；\\n-e：[netstat](#/netstat \\\"netstat命令\\\")格式显示路由表；\\n-net：到一个网络的路由表；\\n-[host](#/host \\\"host命令\\\")：到一个主机的路由表。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Add：增加指定的路由记录；\\nDel：删除指定的路由记录；\\nTarget：目的网络或目的主机；\\ngw：设置默认网关；\\nmss：设置TCP的最大区块长度（MSS），单位MB；\\nwindow：指定通过路由表的TCP连接的TCP窗口大小；\\ndev：路由记录所表示的网络接口。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示当前路由：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# route\\nKernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n112.124.12.0    *               255.255.252.0   U     0      0        0 eth1\\n10.160.0.0      *               255.255.240.0   U     0      0        0 eth0\\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\\ndefault         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\\n\\n[root@localhost ~]# route -n\\nKernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n112.124.12.0    0.0.0.0         255.255.252.0   U     0      0        0 eth1\\n10.160.0.0      0.0.0.0         255.255.240.0   U     0      0        0 eth0\\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\\n0.0.0.0         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"U Up表示此路由当前为启动状态。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"H Host，表示此网关为一主机。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"G Gateway，表示此网关为一路由器。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"R Reinstate Route，使用动态路由重新初始化的路由。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"D Dynamically,此路由是动态性地写入。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"M Modified，此路由是由路由守护程序或导向器动态修改。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"! 表示此路由当前为关闭状态。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"添加网关/设置网关：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0    #增加一条到达244.0.0.0的路由。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"屏蔽一条路由：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route add -net 224.0.0.0 netmask 240.0.0.0 [reject](#/reject \\\"reject命令\\\")     #增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"删除路由记录：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route del -net 224.0.0.0 netmask 240.0.0.0\\nroute del -net 224.0.0.0 netmask 240.0.0.0 reject\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"删除和添加设置默认网关：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route del default gw 192.168.120.240\\nroute add default gw 192.168.120.240\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 396:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(984);\n\n/***/ }),\n\n/***/ 984:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1371),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/159.78dd55b5a7017959dfa5.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"route命令\")]), _vm._v(\"用来显示并设置Linux内核中的网络路由表，route命令设置的路由主要是静态路由。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在Linux系统中设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ip\",\n      \"title\": \"ip命令\"\n    }\n  }, [_vm._v(\"ip\")]), _vm._v(\"地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/rc.local\")]), _vm._v(\"中添加route命令来保证该路由设置永久有效。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-A：设置地址类型；\\n-C：打印将Linux核心的路由缓存；\\n-v：详细信息模式；\\n-n：不执行DNS反向查找，直接显示数字形式的IP地址；\\n-e：[netstat](#/netstat \\\"netstat命令\\\")格式显示路由表；\\n-net：到一个网络的路由表；\\n-[host](#/host \\\"host命令\\\")：到一个主机的路由表。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Add：增加指定的路由记录；\\nDel：删除指定的路由记录；\\nTarget：目的网络或目的主机；\\ngw：设置默认网关；\\nmss：设置TCP的最大区块长度（MSS），单位MB；\\nwindow：指定通过路由表的TCP连接的TCP窗口大小；\\ndev：路由记录所表示的网络接口。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示当前路由：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# route\\nKernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n112.124.12.0    *               255.255.252.0   U     0      0        0 eth1\\n10.160.0.0      *               255.255.240.0   U     0      0        0 eth0\\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\\ndefault         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\\n\\n[root@localhost ~]# route -n\\nKernel IP routing table\\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\\n112.124.12.0    0.0.0.0         255.255.252.0   U     0      0        0 eth1\\n10.160.0.0      0.0.0.0         255.255.240.0   U     0      0        0 eth0\\n192.168.0.0     10.160.15.247   255.255.0.0     UG    0      0        0 eth0\\n172.16.0.0      10.160.15.247   255.240.0.0     UG    0      0        0 eth0\\n10.0.0.0        10.160.15.247   255.0.0.0       UG    0      0        0 eth0\\n0.0.0.0         112.124.15.247  0.0.0.0         UG    0      0        0 eth1\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其中Flags为路由标志，标记当前网络节点的状态，Flags标志说明：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"U Up表示此路由当前为启动状态。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"H Host，表示此网关为一主机。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"G Gateway，表示此网关为一路由器。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"R Reinstate Route，使用动态路由重新初始化的路由。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"D Dynamically,此路由是动态性地写入。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"M Modified，此路由是由路由守护程序或导向器动态修改。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"! 表示此路由当前为关闭状态。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"添加网关/设置网关：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0    #增加一条到达244.0.0.0的路由。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"屏蔽一条路由：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route add -net 224.0.0.0 netmask 240.0.0.0 [reject](#/reject \\\"reject命令\\\")     #增加一条屏蔽的路由，目的地址为224.x.x.x将被拒绝。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"删除路由记录：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route del -net 224.0.0.0 netmask 240.0.0.0\\nroute del -net 224.0.0.0 netmask 240.0.0.0 reject\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"删除和添加设置默认网关：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"route del default gw 192.168.120.240\\nroute add default gw 192.168.120.240\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4735ac13\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/route.md\n// module id = 1371\n// module chunks = 159","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./route.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/route.md\n// module id = 396\n// module chunks = 159","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4735ac13\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./route.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/route.md\n// module id = 984\n// module chunks = 159"],"sourceRoot":""}