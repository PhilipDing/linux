{"version":3,"sources":["webpack:///static/js/72.6ae2d4a3ba55639a70f0.js","webpack:///./command/ulimit.md?1cc8","webpack:///./command/ulimit.md?d56d","webpack:///./command/ulimit.md"],"names":["webpackJsonp","1073","module","exports","__webpack_require__","Component","1235","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","484"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCHjC,GAAAC,GAAAD,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAF,GAAAC,QAAAE,EAAAF,SDUMG,KACA,SAAUJ,EAAQC,GExBxBD,EAAAC,SAAgBI,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,iDAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,+GAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,kMAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,iLAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,wIAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACAI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,oBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,mXAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,6mCF+BGI,IACA,SAAUlB,EAAQC,EAASC,GGrDjCF,EAAAC,QAAAC,EAAA","file":"static/js/72.6ae2d4a3ba55639a70f0.js","sourcesContent":["webpackJsonp([72],{\n\n/***/ 1073:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1235),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1235:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ulimit命令\")]), _vm._v(\"用来限制系统用户对shell资源的访问。如果不懂什么意思，下面一段内容可以帮助你理解：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"而实际应用的环境要比这种假设复杂的多，例如在一个嵌入式开发环境中，各方面的资源都是非常紧缺的，对于开启文件描述符的数量，分配堆栈的大 小，CPU 时间，虚拟内存大小，等等，都有非常严格的要求。资源的合理限制和分配，不仅仅是保证系统可用性的必要条件，也与系统上软件运行的性能有着密不可分的联 系。这时，ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ulimit(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：显示目前资源限制的设定；\\n-c <core文件上限>：设定core文件的最大值，单位为区块；\\n-d <数据节区大小>：程序数据节区的最大值，单位为KB；\\n-f <文件大小>：shell所能建立的最大文件，单位为区块；\\n-H：设定资源的硬性限制，也就是管理员所设下的限制；\\n-m <内存大小>：指定可使用内存的上限，单位为KB；\\n-n <文件数目>：指定同一时间最多可开启的文件数；\\n-p <缓冲区大小>：指定管道缓冲区的大小，单位512字节；\\n-s <堆叠大小>：指定堆叠的上限，单位为KB；\\n-S：设定资源的弹性限制；\\n-t <CPU时间>：指定CPU使用时间的上限，单位为秒；\\n-u <程序数目>：用户最多可开启的程序数目；\\n-v <虚拟内存大小>：指定可使用的虚拟内存上限，单位为KB。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ulimit -a\\ncore [file](#/file \\\"file命令\\\") size          (blocks, -c) 0           #core文件的最大值为100 blocks。\\ndata seg size           (kbytes, -d) unlimited   #进程的数据段可以任意大。\\nscheduling priority             (-e) 0\\nfile size               (blocks, -f) unlimited   #文件可以任意大。\\npending signals                 (-i) 98304       #最多有98304个待处理的信号。\\nmax locked memory       (kbytes, -l) 32          #一个任务锁住的物理内存的最大值为32KB。\\nmax memory size         (kbytes, -m) unlimited   #一个任务的常驻物理内存的最大值。\\nopen files                      (-n) 1024        #一个任务最多可以同时打开1024的文件。\\npipe size            (512 bytes, -p) 8           #管道的最大空间为4096字节。\\nPOSIX message queues     (bytes, -q) 819200      #POSIX的消息队列的最大值为819200字节。\\nreal-[time](#/time \\\"time命令\\\") priority              (-r) 0\\nstack size              (kbytes, -s) 10240       #进程的栈的最大值为10240字节。\\ncpu time               (seconds, -t) unlimited   #进程使用的CPU时间。\\nmax user processes              (-u) 98304       #当前用户同时打开的进程（包括线程）的最大个数为98304。\\nvirtual memory          (kbytes, -v) unlimited   #没有限制进程的最大地址空间。\\nfile locks                      (-x) unlimited   #所能锁住的文件的最大个数没有限制。\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 484:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1073);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/72.6ae2d4a3ba55639a70f0.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1bdc256c\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ulimit.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ulimit.md\n// module id = 1073\n// module chunks = 72","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ulimit命令\")]), _vm._v(\"用来限制系统用户对shell资源的访问。如果不懂什么意思，下面一段内容可以帮助你理解：\")]), _vm._v(\" \"), _c('p', [_vm._v(\"假设有这样一种情况，当一台 Linux 主机上同时登陆了 10 个人，在系统资源无限制的情况下，这 10 个用户同时打开了 500 个文档，而假设每个文档的大小有 10M，这时系统的内存资源就会受到巨大的挑战。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"而实际应用的环境要比这种假设复杂的多，例如在一个嵌入式开发环境中，各方面的资源都是非常紧缺的，对于开启文件描述符的数量，分配堆栈的大 小，CPU 时间，虚拟内存大小，等等，都有非常严格的要求。资源的合理限制和分配，不仅仅是保证系统可用性的必要条件，也与系统上软件运行的性能有着密不可分的联 系。这时，ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ulimit(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-a：显示目前资源限制的设定；\\n-c <core文件上限>：设定core文件的最大值，单位为区块；\\n-d <数据节区大小>：程序数据节区的最大值，单位为KB；\\n-f <文件大小>：shell所能建立的最大文件，单位为区块；\\n-H：设定资源的硬性限制，也就是管理员所设下的限制；\\n-m <内存大小>：指定可使用内存的上限，单位为KB；\\n-n <文件数目>：指定同一时间最多可开启的文件数；\\n-p <缓冲区大小>：指定管道缓冲区的大小，单位512字节；\\n-s <堆叠大小>：指定堆叠的上限，单位为KB；\\n-S：设定资源的弹性限制；\\n-t <CPU时间>：指定CPU使用时间的上限，单位为秒；\\n-u <程序数目>：用户最多可开启的程序数目；\\n-v <虚拟内存大小>：指定可使用的虚拟内存上限，单位为KB。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ulimit -a\\ncore [file](#/file \\\"file命令\\\") size          (blocks, -c) 0           #core文件的最大值为100 blocks。\\ndata seg size           (kbytes, -d) unlimited   #进程的数据段可以任意大。\\nscheduling priority             (-e) 0\\nfile size               (blocks, -f) unlimited   #文件可以任意大。\\npending signals                 (-i) 98304       #最多有98304个待处理的信号。\\nmax locked memory       (kbytes, -l) 32          #一个任务锁住的物理内存的最大值为32KB。\\nmax memory size         (kbytes, -m) unlimited   #一个任务的常驻物理内存的最大值。\\nopen files                      (-n) 1024        #一个任务最多可以同时打开1024的文件。\\npipe size            (512 bytes, -p) 8           #管道的最大空间为4096字节。\\nPOSIX message queues     (bytes, -q) 819200      #POSIX的消息队列的最大值为819200字节。\\nreal-[time](#/time \\\"time命令\\\") priority              (-r) 0\\nstack size              (kbytes, -s) 10240       #进程的栈的最大值为10240字节。\\ncpu time               (seconds, -t) unlimited   #进程使用的CPU时间。\\nmax user processes              (-u) 98304       #当前用户同时打开的进程（包括线程）的最大个数为98304。\\nvirtual memory          (kbytes, -v) unlimited   #没有限制进程的最大地址空间。\\nfile locks                      (-x) unlimited   #所能锁住的文件的最大个数没有限制。\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-1bdc256c\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ulimit.md\n// module id = 1235\n// module chunks = 72","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ulimit.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/ulimit.md\n// module id = 484\n// module chunks = 72"],"sourceRoot":""}