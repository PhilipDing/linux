{"version":3,"sources":["webpack:///static/js/80.2d48ece79eb479750fe8.js","webpack:///./command/tput.md?101d","webpack:///./command/tput.md?0a0a","webpack:///./command/tput.md"],"names":["webpackJsonp","1065","module","exports","__webpack_require__","Component","1567","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","477"],"mappings":"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","file":"static/js/80.2d48ece79eb479750fe8.js","sourcesContent":["webpackJsonp([80],{\n\n/***/ 1065:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1567),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1567:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tput命令\")]), _vm._v(\"将通过 terminfo 数据库对您的终端会话进行初始化和操作。通过使用 tput，您可以更改几项终端功能，如移动或更改光标、更改文本属性，以及清除终端屏幕的特定区域。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"什么是 terminfo 数据库？\")]), _vm._v(\" \"), _c('p', [_vm._v(\"UNIX 系统上的 terminfo 数据库用于定义终端和打印机的属性及功能，包括各设备（例如，终端和打印机）的行数和列数以及要发送至该设备的文本的属性。UNIX 中的几个常用程序都依赖 terminfo 数据库提供这些属性以及许多其他内容，其中包括 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/vi\",\n      \"title\": \"vi命令\"\n    }\n  }, [_vm._v(\"vi\")]), _vm._v(\" 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/emacs\",\n      \"title\": \"emacs命令\"\n    }\n  }, [_vm._v(\"emacs\")]), _vm._v(\" 编辑器以及 curses 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/man\",\n      \"title\": \"man命令\"\n    }\n  }, [_vm._v(\"man\")]), _vm._v(\" 程序。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"与 UNIX 中的大多数命令一样，tput 命令既可以用在 shell 命令行中也可以用在 shell 脚本中。为让您更好地理解 tput，本文首先从命令行讲起，然后紧接着讲述 shell 脚本示例。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"光标属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 UNIX shell 脚本中或在命令行中，移动光标或更改光标属性可能是非常有用的。有些情况下，您可能需要输入敏感信息（如密码），或在屏幕上两个不同的区域输入信息。在此类情况下，使用 tput 可能会对您有所帮助。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput [clear](#/clear \\\"clear命令\\\") # 清屏\\ntput sc # 保存当前光标位置\\ntput cup 10 13 # 将光标移动到 row [col](#/col \\\"col命令\\\")\\ntput civis # 光标不可见\\ntput cnorm # 光标可见\\ntput rc # 显示输出\\n[exit](#/exit \\\"exit命令\\\") 0\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"移动光标\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用 tput 可以方便地实现在各设备上移动光标的位置。通过在 tput 中使用 cup 选项，或光标位置，您可以在设备的各行和各列中将光标移动到任意 X 或 Y 坐标。设备左上角的坐标为 (0,0)。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要在设备上将光标移动到第 5 列 (X) 的第 1 行 (Y)，只需执行 tput cup 5 1。另一个示例是 tput cup 23 45，此命令将使光标移动到第 23 列上的第 45 行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"移动光标并显示信息\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种有用的光标定位技巧是移动光标，执行用于显示信息的命令，然后返回到前一光标位置：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"(tput sc ; tput cup 23 45 ; [echo](#/echo \\\"echo命令\\\") “Input from tput/echo [at](#/at \\\"at命令\\\") 23/45” ; tput rc)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们分析一下 subshell 命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput sc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"必须首先保存当前的光标位置。要保存当前的光标位置，请包括 sc 选项或“save cursor position”。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput cup 23 45\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在保存了光标位置后，光标坐标将移动到 (23,45)。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo “Input from tput/echo at 23/45”\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将信息显示到 stdout 中。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput rc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在显示了这些信息之后，光标必须返回到使用 tput sc 保存的原始位置。要使光标返回到其上次保存的位置，请包括 rc 选项或“\"), _c('a', {\n    attrs: {\n      \"href\": \"#/restore\",\n      \"title\": \"restore命令\"\n    }\n  }, [_vm._v(\"restore\")]), _vm._v(\" cursor position”。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：由于本文首先详细介绍了通过命令行执行 tput，因此您可能会觉得在自己的 subshell 中执行命令要比单独执行每条命令然后在每条命令执行之前显示提示更简洁。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"更改光标的属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在向某一设备显示数据时，很多时候您并不希望看到光标。将光标转换为不可见可以使数据滚动时的屏幕看起来更整洁。要使光标不可见，请使用 civis 选项（例如，tput civis）。在数据完全显示之后，您可以使用 cnorm 选项将光标再次转变为可见。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"文本属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"更改文本的显示方式可以让用户注意到菜单中的一组词或警惕用户注意某些重要的内容。您可以通过以下方式更改文本属性：使文本加粗、在文本下方添加下划线、更改背景颜色和前景颜色，以及逆转颜色方案等。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要更改文本的颜色，请使用 setb 选项（用于设置背景颜色）和 setf 选项（用于设置前景颜色）以及在 terminfo 数据库中分配的颜色数值。通常情况下，分配的数值与颜色的对应关系如下，但是可能会因 UNIX 系统的不同而异：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"0：黑色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"1：蓝色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"2：绿色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"3：青色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"4：红色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"5：洋红色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"6：黄色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"7：白色\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行以下示例命令可以将背景颜色更改为黄色，将前景颜色更改为红色：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput setb 6 tput setf 4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"要反显当前的颜色方案，只需执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"tput [rev](#/rev \\\"rev命令\\\")\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"有时，仅为文本着色还不够，也就是说，您想要通过另一种方式引起用户的注意。可以通过两种方式达到这一目的：一是将文本设置为粗体，二是为文本添加下划线。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要将文本更改为粗体，请使用 bold 选项。要开始添加下划线，请使用 smul 选项。在完成显示带下划线的文本后，请使用 rmul 选项。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使输出的字符串有颜色，底色，加粗：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n[printf](#/printf \\\"printf命令\\\") $(tput setaf 2; tput bold)'color show\\\\n\\\\n'$(tput sgr0)\\n\\nfor((i=0; i<=7; i++)); do\\n    echo $(tput setaf $i)\\\"show me the money\\\"$(tput sgr0)\\ndone\\n\\nprintf '\\\\n'$(tput setaf 2; tput setab 0; tput bold)'background color show'$(tput sgr0)'\\\\n\\\\n'\\n\\nfor((i=0,j=7; i<=7; i++,j--)); do\\n    echo $(tput setaf $i; tput setab $j; tput bold)\\\"show me the money\\\"$(tput sgr0)\\ndone\\n\\nexit 0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出格式控制函数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n\\n# $1 str       print string\\n# $2 color     0-7 设置颜色\\n# $3 bgcolor   0-7 设置背景颜色\\n# $4 bold      0-1 设置粗体\\n# $5 underline 0-1 设置下划线\\n\\nfunction format_output(){\\n    str=$1\\n    color=$2\\n    bgcolor=$3\\n    bold=$4\\n    underline=$5\\n    normal=$(tput sgr0)\\n\\n    case \\\"$color\\\" in\\n        0|1|2|3|4|5|6|7)\\n            setcolor=$(tput setaf $color;) ;;\\n        *)\\n            setcolor=\\\"\\\" ;;\\n    esac\\n\\n    case \\\"$bgcolor\\\" in\\n        0|1|2|3|4|5|6|7)\\n            setbgcolor=$(tput setab $bgcolor;) ;;\\n        *)\\n            setbgcolor=\\\"\\\" ;;\\n    esac\\n\\n    if [ \\\"$bold\\\" = \\\"1\\\" ]; then\\n        setbold=$(tput bold;)\\n    else\\n        setbold=\\\"\\\"\\n    fi\\n\\n    if [ \\\"$underline\\\" = \\\"1\\\" ]; then\\n        setunderline=$(tput smul;)\\n    else\\n        setunderline=\\\"\\\"\\n    fi\\n\\n    printf \\\"$setcolor$setbgcolor$setbold$setunderline$str$normal\\\\n\\\"\\n}\\n\\nformat_output \\\"Yesterday Once [more](#/more \\\"more命令\\\")\\\" 2 5 1 1\\n\\nexit 0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"光标属性例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n# clear the screen\\ntput clear\\n# Move cursor to screen location X,Y ([top](#/top \\\"top命令\\\") left is 0,0)\\ntput cup 3 15\\n# [set](#/set \\\"set命令\\\") a foreground colour using ANSI escape\\ntput setaf 3\\necho \\\"XYX Corp LTD.\\\"\\ntput sgr0\\ntput cup 5 17\\n# Set reverse video mode\\ntput rev\\necho \\\"M A I N - M E N U\\\"\\ntput sgr0\\ntput cup 7 15\\necho \\\"1\\\\. User Management\\\"\\ntput cup 8 15\\necho \\\"2\\\\. [service](#/service \\\"service命令\\\") Management\\\"\\ntput cup 9 15\\necho \\\"3\\\\. Process Management\\\"\\ntput cup 10 15\\necho \\\"4\\\\. Backup\\\"\\n# Set bold mode\\ntput bold\\ntput cup 12 15\\n[read](#/read \\\"read命令\\\") -p \\\"Enter your choice [1-4] \\\" choice\\ntput clear\\ntput sgr0\\ntput rc\\n\\nexit 0\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 477:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1065);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/80.2d48ece79eb479750fe8.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-8fc1aa9a\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tput.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tput.md\n// module id = 1065\n// module chunks = 80","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tput命令\")]), _vm._v(\"将通过 terminfo 数据库对您的终端会话进行初始化和操作。通过使用 tput，您可以更改几项终端功能，如移动或更改光标、更改文本属性，以及清除终端屏幕的特定区域。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"什么是 terminfo 数据库？\")]), _vm._v(\" \"), _c('p', [_vm._v(\"UNIX 系统上的 terminfo 数据库用于定义终端和打印机的属性及功能，包括各设备（例如，终端和打印机）的行数和列数以及要发送至该设备的文本的属性。UNIX 中的几个常用程序都依赖 terminfo 数据库提供这些属性以及许多其他内容，其中包括 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/vi\",\n      \"title\": \"vi命令\"\n    }\n  }, [_vm._v(\"vi\")]), _vm._v(\" 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/emacs\",\n      \"title\": \"emacs命令\"\n    }\n  }, [_vm._v(\"emacs\")]), _vm._v(\" 编辑器以及 curses 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/man\",\n      \"title\": \"man命令\"\n    }\n  }, [_vm._v(\"man\")]), _vm._v(\" 程序。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"与 UNIX 中的大多数命令一样，tput 命令既可以用在 shell 命令行中也可以用在 shell 脚本中。为让您更好地理解 tput，本文首先从命令行讲起，然后紧接着讲述 shell 脚本示例。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"光标属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在 UNIX shell 脚本中或在命令行中，移动光标或更改光标属性可能是非常有用的。有些情况下，您可能需要输入敏感信息（如密码），或在屏幕上两个不同的区域输入信息。在此类情况下，使用 tput 可能会对您有所帮助。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput [clear](#/clear \\\"clear命令\\\") # 清屏\\ntput sc # 保存当前光标位置\\ntput cup 10 13 # 将光标移动到 row [col](#/col \\\"col命令\\\")\\ntput civis # 光标不可见\\ntput cnorm # 光标可见\\ntput rc # 显示输出\\n[exit](#/exit \\\"exit命令\\\") 0\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"移动光标\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用 tput 可以方便地实现在各设备上移动光标的位置。通过在 tput 中使用 cup 选项，或光标位置，您可以在设备的各行和各列中将光标移动到任意 X 或 Y 坐标。设备左上角的坐标为 (0,0)。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要在设备上将光标移动到第 5 列 (X) 的第 1 行 (Y)，只需执行 tput cup 5 1。另一个示例是 tput cup 23 45，此命令将使光标移动到第 23 列上的第 45 行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"移动光标并显示信息\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一种有用的光标定位技巧是移动光标，执行用于显示信息的命令，然后返回到前一光标位置：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"(tput sc ; tput cup 23 45 ; [echo](#/echo \\\"echo命令\\\") “Input from tput/echo [at](#/at \\\"at命令\\\") 23/45” ; tput rc)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们分析一下 subshell 命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput sc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"必须首先保存当前的光标位置。要保存当前的光标位置，请包括 sc 选项或“save cursor position”。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput cup 23 45\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在保存了光标位置后，光标坐标将移动到 (23,45)。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo “Input from tput/echo at 23/45”\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将信息显示到 stdout 中。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput rc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在显示了这些信息之后，光标必须返回到使用 tput sc 保存的原始位置。要使光标返回到其上次保存的位置，请包括 rc 选项或“\"), _c('a', {\n    attrs: {\n      \"href\": \"#/restore\",\n      \"title\": \"restore命令\"\n    }\n  }, [_vm._v(\"restore\")]), _vm._v(\" cursor position”。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：由于本文首先详细介绍了通过命令行执行 tput，因此您可能会觉得在自己的 subshell 中执行命令要比单独执行每条命令然后在每条命令执行之前显示提示更简洁。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"更改光标的属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在向某一设备显示数据时，很多时候您并不希望看到光标。将光标转换为不可见可以使数据滚动时的屏幕看起来更整洁。要使光标不可见，请使用 civis 选项（例如，tput civis）。在数据完全显示之后，您可以使用 cnorm 选项将光标再次转变为可见。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"文本属性\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"更改文本的显示方式可以让用户注意到菜单中的一组词或警惕用户注意某些重要的内容。您可以通过以下方式更改文本属性：使文本加粗、在文本下方添加下划线、更改背景颜色和前景颜色，以及逆转颜色方案等。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要更改文本的颜色，请使用 setb 选项（用于设置背景颜色）和 setf 选项（用于设置前景颜色）以及在 terminfo 数据库中分配的颜色数值。通常情况下，分配的数值与颜色的对应关系如下，但是可能会因 UNIX 系统的不同而异：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"0：黑色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"1：蓝色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"2：绿色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"3：青色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"4：红色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"5：洋红色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"6：黄色\")]), _vm._v(\" \"), _c('li', [_vm._v(\"7：白色\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行以下示例命令可以将背景颜色更改为黄色，将前景颜色更改为红色：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tput setb 6 tput setf 4\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"要反显当前的颜色方案，只需执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"tput [rev](#/rev \\\"rev命令\\\")\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"有时，仅为文本着色还不够，也就是说，您想要通过另一种方式引起用户的注意。可以通过两种方式达到这一目的：一是将文本设置为粗体，二是为文本添加下划线。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"要将文本更改为粗体，请使用 bold 选项。要开始添加下划线，请使用 smul 选项。在完成显示带下划线的文本后，请使用 rmul 选项。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使输出的字符串有颜色，底色，加粗：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n[printf](#/printf \\\"printf命令\\\") $(tput setaf 2; tput bold)'color show\\\\n\\\\n'$(tput sgr0)\\n\\nfor((i=0; i<=7; i++)); do\\n    echo $(tput setaf $i)\\\"show me the money\\\"$(tput sgr0)\\ndone\\n\\nprintf '\\\\n'$(tput setaf 2; tput setab 0; tput bold)'background color show'$(tput sgr0)'\\\\n\\\\n'\\n\\nfor((i=0,j=7; i<=7; i++,j--)); do\\n    echo $(tput setaf $i; tput setab $j; tput bold)\\\"show me the money\\\"$(tput sgr0)\\ndone\\n\\nexit 0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出格式控制函数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n\\n# $1 str       print string\\n# $2 color     0-7 设置颜色\\n# $3 bgcolor   0-7 设置背景颜色\\n# $4 bold      0-1 设置粗体\\n# $5 underline 0-1 设置下划线\\n\\nfunction format_output(){\\n    str=$1\\n    color=$2\\n    bgcolor=$3\\n    bold=$4\\n    underline=$5\\n    normal=$(tput sgr0)\\n\\n    case \\\"$color\\\" in\\n        0|1|2|3|4|5|6|7)\\n            setcolor=$(tput setaf $color;) ;;\\n        *)\\n            setcolor=\\\"\\\" ;;\\n    esac\\n\\n    case \\\"$bgcolor\\\" in\\n        0|1|2|3|4|5|6|7)\\n            setbgcolor=$(tput setab $bgcolor;) ;;\\n        *)\\n            setbgcolor=\\\"\\\" ;;\\n    esac\\n\\n    if [ \\\"$bold\\\" = \\\"1\\\" ]; then\\n        setbold=$(tput bold;)\\n    else\\n        setbold=\\\"\\\"\\n    fi\\n\\n    if [ \\\"$underline\\\" = \\\"1\\\" ]; then\\n        setunderline=$(tput smul;)\\n    else\\n        setunderline=\\\"\\\"\\n    fi\\n\\n    printf \\\"$setcolor$setbgcolor$setbold$setunderline$str$normal\\\\n\\\"\\n}\\n\\nformat_output \\\"Yesterday Once [more](#/more \\\"more命令\\\")\\\" 2 5 1 1\\n\\nexit 0\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"光标属性例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n# clear the screen\\ntput clear\\n# Move cursor to screen location X,Y ([top](#/top \\\"top命令\\\") left is 0,0)\\ntput cup 3 15\\n# [set](#/set \\\"set命令\\\") a foreground colour using ANSI escape\\ntput setaf 3\\necho \\\"XYX Corp LTD.\\\"\\ntput sgr0\\ntput cup 5 17\\n# Set reverse video mode\\ntput rev\\necho \\\"M A I N - M E N U\\\"\\ntput sgr0\\ntput cup 7 15\\necho \\\"1\\\\. User Management\\\"\\ntput cup 8 15\\necho \\\"2\\\\. [service](#/service \\\"service命令\\\") Management\\\"\\ntput cup 9 15\\necho \\\"3\\\\. Process Management\\\"\\ntput cup 10 15\\necho \\\"4\\\\. Backup\\\"\\n# Set bold mode\\ntput bold\\ntput cup 12 15\\n[read](#/read \\\"read命令\\\") -p \\\"Enter your choice [1-4] \\\" choice\\ntput clear\\ntput sgr0\\ntput rc\\n\\nexit 0\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-8fc1aa9a\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tput.md\n// module id = 1567\n// module chunks = 80","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tput.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/tput.md\n// module id = 477\n// module chunks = 80"],"sourceRoot":""}