{"version":3,"sources":["webpack:///static/js/79.ad4ea3d0ecb709210cdf.js","webpack:///./command/tr.md?b4ee","webpack:///./command/tr.md?7744","webpack:///./command/tr.md"],"names":["webpackJsonp","1065","module","exports","__webpack_require__","Component","1387","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","477"],"mappings":"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","file":"static/js/79.ad4ea3d0ecb709210cdf.js","sourcesContent":["webpackJsonp([79],{\n\n/***/ 1065:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1387),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1387:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tr命令\")]), _vm._v(\"可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tr(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-c或——complerment：取代所有不属于第一字符集的字符；\\n-d或——delete：删除所有属于第一字符集的字符；\\n-s或--squeeze-repeats：把连续重复的字符以单独一个字符表示；\\n-t或--truncate-set1：先删除第一字符集较第二字符集多出的字符。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"字符集1：指定要转换或删除的原字符集。当执行转换操作时，必须使用参数“字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数“字符集2”；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"字符集2：指定要转换成的目标字符集。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将输入字符由大写转换为小写：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") \\\"HELLO WORLD\\\" | tr 'A-Z' 'a-z'\\nhello world\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"'A-Z' 和 'a-z'都是集合，集合是可以自己制定的，例如：'ABD-}'、'bB.,'、'a-de-h'、'a-c0-9'都属于集合，集合里可以使用'\\\\n'、'\\\\t'，可以可以使用其他ASCII字符。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用tr删除字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"hello 123 world 456\\\" | tr -d '0-9'\\nhello  world \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将制表符转换为空格：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") text | tr '\\\\t' ' '\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"字符集补集，从输入文本中将不在补集中的所有字符删除：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo aa.,a 1 b#$bb 2 c*/cc 3 ddd 4 | tr -d -c '0-9 \\\\n'\\n 1  2  3  4\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此例中，补集中包含了数字0~9、空格和换行符\\\\n，所以没有被删除，其他字符全部被删除了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"用tr压缩字符，可以压缩输入中重复的字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"thissss is      a text linnnnnnne.\\\" | tr -s ' sn'\\nthis is a text line.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"巧妙使用tr做数字相加操作：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo 1 2 3 4 5 6 7 8 9 | [xargs](#/xargs \\\"xargs命令\\\") -n1 | echo $[ $(tr '\\\\n' '+') 0 ]\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除Windows文件“造成”的'^M'字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat [file](#/file \\\"file命令\\\") | tr -s \\\"\\\\r\\\" \\\"\\\\n\\\" > new_file\\n或\\ncat file | tr -d \\\"\\\\r\\\" > new_file\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"tr可以使用的字符类：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[:alnum:]：字母和数字\\n[:alpha:]：字母\\n[:cntrl:]：控制（非打印）字符\\n[:digit:]：数字\\n[:graph:]：图形字符\\n[:lower:]：小写字母\\n[:print:]：可打印字符\\n[:punct:]：标点符号\\n[:space:]：空白字符\\n[:upper:]：大写字母\\n[:xdigit:]：十六进制字符  \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用方式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tr '[:lower:]' '[:upper:]'\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 477:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1065);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/79.ad4ea3d0ecb709210cdf.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4f88dca0\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tr.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tr.md\n// module id = 1065\n// module chunks = 79","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"tr命令\")]), _vm._v(\"可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tr(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-c或——complerment：取代所有不属于第一字符集的字符；\\n-d或——delete：删除所有属于第一字符集的字符；\\n-s或--squeeze-repeats：把连续重复的字符以单独一个字符表示；\\n-t或--truncate-set1：先删除第一字符集较第二字符集多出的字符。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"字符集1：指定要转换或删除的原字符集。当执行转换操作时，必须使用参数“字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数“字符集2”；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"字符集2：指定要转换成的目标字符集。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"将输入字符由大写转换为小写：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") \\\"HELLO WORLD\\\" | tr 'A-Z' 'a-z'\\nhello world\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"'A-Z' 和 'a-z'都是集合，集合是可以自己制定的，例如：'ABD-}'、'bB.,'、'a-de-h'、'a-c0-9'都属于集合，集合里可以使用'\\\\n'、'\\\\t'，可以可以使用其他ASCII字符。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用tr删除字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"hello 123 world 456\\\" | tr -d '0-9'\\nhello  world \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将制表符转换为空格：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") text | tr '\\\\t' ' '\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"字符集补集，从输入文本中将不在补集中的所有字符删除：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo aa.,a 1 b#$bb 2 c*/cc 3 ddd 4 | tr -d -c '0-9 \\\\n'\\n 1  2  3  4\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此例中，补集中包含了数字0~9、空格和换行符\\\\n，所以没有被删除，其他字符全部被删除了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"用tr压缩字符，可以压缩输入中重复的字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"thissss is      a text linnnnnnne.\\\" | tr -s ' sn'\\nthis is a text line.\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"巧妙使用tr做数字相加操作：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo 1 2 3 4 5 6 7 8 9 | [xargs](#/xargs \\\"xargs命令\\\") -n1 | echo $[ $(tr '\\\\n' '+') 0 ]\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"删除Windows文件“造成”的'^M'字符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat [file](#/file \\\"file命令\\\") | tr -s \\\"\\\\r\\\" \\\"\\\\n\\\" > new_file\\n或\\ncat file | tr -d \\\"\\\\r\\\" > new_file\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"tr可以使用的字符类：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[:alnum:]：字母和数字\\n[:alpha:]：字母\\n[:cntrl:]：控制（非打印）字符\\n[:digit:]：数字\\n[:graph:]：图形字符\\n[:lower:]：小写字母\\n[:print:]：可打印字符\\n[:punct:]：标点符号\\n[:space:]：空白字符\\n[:upper:]：大写字母\\n[:xdigit:]：十六进制字符  \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用方式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"tr '[:lower:]' '[:upper:]'\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4f88dca0\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/tr.md\n// module id = 1387\n// module chunks = 79","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./tr.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/tr.md\n// module id = 477\n// module chunks = 79"],"sourceRoot":""}