{"version":3,"sources":["webpack:///static/js/124.8a28db44d4224da61943.js","webpack:///./command/sort.md?d3c2","webpack:///./command/sort.md?4901","webpack:///./command/sort.md"],"names":["webpackJsonp","1019","module","exports","__webpack_require__","Component","1668","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","431"],"mappings":"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","file":"static/js/124.8a28db44d4224da61943.js","sourcesContent":["webpackJsonp([124],{\n\n/***/ 1019:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1668),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1668:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sort命令\")]), _vm._v(\"是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sort(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：忽略每行前面开始出的空格字符；\\n-c：检查文件是否已经按照顺序排序；\\n-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；\\n-f：排序时，将小写字母视为大写字母；\\n-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；\\n-m：将几个排序号的文件进行合并；\\n-M：将前面3个字母依照月份的缩写进行排序；\\n-n：依照数值的大小排序；\\n-o<输出文件>：将排序后的结果存入制定的文件；\\n-r：以相反的顺序来排序；\\n-t<分隔字符>：指定排序时所用的栏位分隔字符；\\n+<起始栏位>-<结束栏位>：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定待排序的文件列表。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按\"), _c('a', {\n    attrs: {\n      \"href\": \"http://zh.wikipedia.org/zh/ASCII\"\n    }\n  }, [_vm._v(\"ASCII\")]), _vm._v(\"码值进行比较，最后将他们按升序输出。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@[mail](#/mail \\\"mail命令\\\") text]# [cat](#/cat \\\"cat命令\\\") sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\neee:50:5.5\\n\\n[root@mail text]# sort sort.txt\\naaa:10:1.1\\nbbb:20:2.2\\nccc:30:3.3\\nddd:40:4.4\\neee:50:5.5\\neee:50:5.5\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"忽略相同行使用-u选项或者\"), _c('a', {\n    attrs: {\n      \"href\": \"#/uniq\",\n      \"title\": \"uniq命令\"\n    }\n  }, [_vm._v(\"uniq\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@mail text]# cat sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\neee:50:5.5\\n\\n[root@mail text]# sort -u sort.txt\\naaa:10:1.1\\nbbb:20:2.2\\nccc:30:3.3\\nddd:40:4.4\\neee:50:5.5\\n\\n或者\\n\\n[root@mail text]# uniq sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sort的-n、-r、-k、-t选项的使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@mail text]# cat sort.txt\\nAAA:BB:CC\\naaa:30:1.6\\nccc:50:3.3\\nddd:20:4.2\\nbbb:10:2.5\\neee:40:5.4\\neee:60:5.1\\n\\n#将BB列按照数字从小到大顺序排列：\\n[root@mail text]# sort -nk 2 -t: sort.txt\\nAAA:BB:CC\\nbbb:10:2.5\\nddd:20:4.2\\naaa:30:1.6\\neee:40:5.4\\nccc:50:3.3\\neee:60:5.1\\n\\n#将CC列数字从大到小顺序排列：\\n[root@mail text]# sort -nrk 3 -t: sort.txt\\neee:40:5.4\\neee:60:5.1\\nddd:20:4.2\\nccc:50:3.3\\nbbb:10:2.5\\naaa:30:1.6\\nAAA:BB:CC\\n\\n# -n是按照数字大小排序，-r是以相反顺序，-k是指定需要爱排序的栏位，-t指定栏位分隔符为冒号\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-k选项的具体语法格式：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"-k选项的语法格式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"FStart.CStart Modifie,FEnd.CEnd Modifier\\n-------Start--------,-------End--------\\n FStart.CStart 选项  ,  FEnd.CEnd 选项\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这个语法格式可以被其中的逗号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\",\")]), _vm._v(\"分为两大部分，\"), _c('strong', [_vm._v(\"Start\")]), _vm._v(\"部分和\"), _c('strong', [_vm._v(\"End\")]), _vm._v(\"部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Start\")]), _vm._v(\"部分的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"C.Start\")]), _vm._v(\"。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"C.Start\")]), _vm._v(\"也是可以省略的，省略的话就表示从本域的开头部分开始。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart.CStart\")]), _vm._v(\"，其中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"就是表示使用的域，而\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CStart\")]), _vm._v(\"则表示在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FEnd.CEnd\")]), _vm._v(\"，如果你省略\"), _c('code', {\n    pre: true\n  }, [_vm._v(\".CEnd\")]), _vm._v(\"，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"从公司英文名称的第二个字母开始进行排序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ sort -t ' ' -k 1.2 facebook.txt\\nbaidu 100 5000\\nsohu 100 4500\\ngoogle 110 5000\\nguge 50 3000\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2\")]), _vm._v(\"，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ sort -t ' ' -k 1.2,1.2 -nrk 3,3 facebook.txt\\nbaidu 100 5000\\ngoogle 110 5000\\nsohu 100 4500\\nguge 50 3000\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"由于只对第二个字母进行排序，所以我们使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2,1.2\")]), _vm._v(\"的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2\")]), _vm._v(\"怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 3,3\")]), _vm._v(\"，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。\")])])\n}]}\n\n/***/ }),\n\n/***/ 431:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1019);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/124.8a28db44d4224da61943.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-fd4c5f60\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sort.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sort.md\n// module id = 1019\n// module chunks = 124","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sort命令\")]), _vm._v(\"是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sort(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：忽略每行前面开始出的空格字符；\\n-c：检查文件是否已经按照顺序排序；\\n-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；\\n-f：排序时，将小写字母视为大写字母；\\n-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；\\n-m：将几个排序号的文件进行合并；\\n-M：将前面3个字母依照月份的缩写进行排序；\\n-n：依照数值的大小排序；\\n-o<输出文件>：将排序后的结果存入制定的文件；\\n-r：以相反的顺序来排序；\\n-t<分隔字符>：指定排序时所用的栏位分隔字符；\\n+<起始栏位>-<结束栏位>：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"文件：指定待排序的文件列表。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"sort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按\"), _c('a', {\n    attrs: {\n      \"href\": \"http://zh.wikipedia.org/zh/ASCII\"\n    }\n  }, [_vm._v(\"ASCII\")]), _vm._v(\"码值进行比较，最后将他们按升序输出。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@[mail](#/mail \\\"mail命令\\\") text]# [cat](#/cat \\\"cat命令\\\") sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\neee:50:5.5\\n\\n[root@mail text]# sort sort.txt\\naaa:10:1.1\\nbbb:20:2.2\\nccc:30:3.3\\nddd:40:4.4\\neee:50:5.5\\neee:50:5.5\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"忽略相同行使用-u选项或者\"), _c('a', {\n    attrs: {\n      \"href\": \"#/uniq\",\n      \"title\": \"uniq命令\"\n    }\n  }, [_vm._v(\"uniq\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@mail text]# cat sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\neee:50:5.5\\n\\n[root@mail text]# sort -u sort.txt\\naaa:10:1.1\\nbbb:20:2.2\\nccc:30:3.3\\nddd:40:4.4\\neee:50:5.5\\n\\n或者\\n\\n[root@mail text]# uniq sort.txt\\naaa:10:1.1\\nccc:30:3.3\\nddd:40:4.4\\nbbb:20:2.2\\neee:50:5.5\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sort的-n、-r、-k、-t选项的使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@mail text]# cat sort.txt\\nAAA:BB:CC\\naaa:30:1.6\\nccc:50:3.3\\nddd:20:4.2\\nbbb:10:2.5\\neee:40:5.4\\neee:60:5.1\\n\\n#将BB列按照数字从小到大顺序排列：\\n[root@mail text]# sort -nk 2 -t: sort.txt\\nAAA:BB:CC\\nbbb:10:2.5\\nddd:20:4.2\\naaa:30:1.6\\neee:40:5.4\\nccc:50:3.3\\neee:60:5.1\\n\\n#将CC列数字从大到小顺序排列：\\n[root@mail text]# sort -nrk 3 -t: sort.txt\\neee:40:5.4\\neee:60:5.1\\nddd:20:4.2\\nccc:50:3.3\\nbbb:10:2.5\\naaa:30:1.6\\nAAA:BB:CC\\n\\n# -n是按照数字大小排序，-r是以相反顺序，-k是指定需要爱排序的栏位，-t指定栏位分隔符为冒号\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-k选项的具体语法格式：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"-k选项的语法格式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"FStart.CStart Modifie,FEnd.CEnd Modifier\\n-------Start--------,-------End--------\\n FStart.CStart 选项  ,  FEnd.CEnd 选项\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这个语法格式可以被其中的逗号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\",\")]), _vm._v(\"分为两大部分，\"), _c('strong', [_vm._v(\"Start\")]), _vm._v(\"部分和\"), _c('strong', [_vm._v(\"End\")]), _vm._v(\"部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Start\")]), _vm._v(\"部分的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"C.Start\")]), _vm._v(\"。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"C.Start\")]), _vm._v(\"也是可以省略的，省略的话就表示从本域的开头部分开始。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart.CStart\")]), _vm._v(\"，其中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"就是表示使用的域，而\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CStart\")]), _vm._v(\"则表示在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FStart\")]), _vm._v(\"域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"FEnd.CEnd\")]), _vm._v(\"，如果你省略\"), _c('code', {\n    pre: true\n  }, [_vm._v(\".CEnd\")]), _vm._v(\"，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"从公司英文名称的第二个字母开始进行排序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ sort -t ' ' -k 1.2 facebook.txt\\nbaidu 100 5000\\nsohu 100 4500\\ngoogle 110 5000\\nguge 50 3000\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2\")]), _vm._v(\"，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"$ sort -t ' ' -k 1.2,1.2 -nrk 3,3 facebook.txt\\nbaidu 100 5000\\ngoogle 110 5000\\nsohu 100 4500\\nguge 50 3000\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"由于只对第二个字母进行排序，所以我们使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2,1.2\")]), _vm._v(\"的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 1.2\")]), _vm._v(\"怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-k 3,3\")]), _vm._v(\"，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-fd4c5f60\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sort.md\n// module id = 1668\n// module chunks = 124","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sort.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/sort.md\n// module id = 431\n// module chunks = 124"],"sourceRoot":""}