{"version":3,"sources":["webpack:///static/js/138.6e62725b4d0be859c500.js","webpack:///./command/setfacl.md?7e67","webpack:///./command/setfacl.md?c842","webpack:///./command/setfacl.md"],"names":["webpackJsonp","1005","module","exports","__webpack_require__","Component","1264","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","417"],"mappings":"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","file":"static/js/138.6e62725b4d0be859c500.js","sourcesContent":["webpackJsonp([138],{\n\n/***/ 1005:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1264),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1264:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"setfacl命令\")]), _vm._v(\"是用来在命令行里设置ACL（访问控制列表）。在命令行里，一系列的命令跟随以一系列的文件名。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b,--remove-all：删除所有扩展的acl规则，基本的acl规则(所有者，群组，其他）将被保留。\\n-k,--remove-default：删除缺省的acl规则。如果没有缺省规则，将不提示。\\n-n，--no-mask：不要重新计算有效权限。setfacl默认会重新计算ACL mask，除非mask被明确的制定。\\n--mask：重新计算有效权限，即使ACL mask被明确指定。\\n-d，--default：设定默认的acl规则。\\n--[restore](#/restore \\\"restore命令\\\")=[file](#/file \\\"file命令\\\")：从文件恢复备份的acl规则（这些文件可由getfacl -R产生）。通过这种机制可以恢复整个目录树的acl规则。此参数不能和除--[test](#/test \\\"test命令\\\")以外的任何参数一同执行。\\n--test：测试模式，不会改变任何文件的acl规则，操作后的acl规格将被列出。\\n-R，--recursive：递归的对所有文件及目录进行操作。\\n-L，--logical：跟踪符号链接，默认情况下只跟踪符号链接文件，跳过符号链接目录。\\n-P，--physical：跳过所有符号链接，包括符号链接文件。\\n--version：输出setfacl的版本号并退出。\\n--[help](#/help \\\"help命令\\\")：输出帮助信息。\\n--：标识命令行参数结束，其后的所有参数都将被认为是文件名\\n-：如果文件名是-，则setfacl将从标准输入读取文件名。\\n\\n\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-m\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x\")]), _vm._v(\"后边跟以acl规则。多条acl规则以逗号(,)隔开。选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-M\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-X\")]), _vm._v(\"用来从文件或标准输入读取acl规则。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--[set](#/set \\\"set命令\\\")\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--set-file\")]), _vm._v(\"用来设置文件或目录的acl规则，先前的设定将被覆盖。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-m(--modify)\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-M(--modify-file)\")]), _vm._v(\"选项修改文件或目录的acl规则。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x(--remove)\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-X(--remove-file)\")]), _vm._v(\"选项删除acl规则。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当使用-M，-X选项从文件中读取规则时，setfacl接受getfacl命令输出的格式。每行至少一条规则，以#开始的行将被视为注释。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当在不支持ACLs的文件系统上使用setfacl命令时，setfacl将修改文件权限位。如果acl规则并不完全匹配文件权限位，setfacl将会修改文件权限位使其尽可能的反应acl规则，并会向standard error发送错误消息，以大于0的状态返回。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"权限\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件的所有者以及有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CAP_FOWNER\")]), _vm._v(\"的用户进程可以设置一个文件的acl。（在目前的linux系统上，root用户是唯一有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CAP_FOWNER\")]), _vm._v(\"能力的用户）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL规则\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"setfacl命令可以识别以下的规则格式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[d[efault]:] [u[ser]:]uid [:perms]  指定用户的权限，文件所有者的权限（如果uid没有指定）。\\n[d[efault]:] g[roup]:gid [:perms]   指定群组的权限，文件所有群组的权限（如果gid未指定）\\n[d[efault]:] m[ask][:] [:perms]     有效权限掩码\\n[d[efault]:] o[ther] [:perms]       其他的权限\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"恰当的acl规则被用在修改和设定的操作中，对于uid和gid，可以指定一个数字，也可指定一个名字。perms域是一个代表各种权限的字母的组合：读\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-r\")]), _vm._v(\"写\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-[w](#/w \\\"w命令\\\")\")]), _vm._v(\"执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x\")]), _vm._v(\"，执行只适合目录和一些可执行的文件。pers域也可设置为八进制格式。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"自动创建的规则\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"最初的，文件目录仅包含3个基本的acl规则。为了使规则能正常执行，需要满足以下规则。\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"3个基本规则不能被删除。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"任何一条包含指定的用户名或群组名的规则必须包含有效的权限组合。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"任何一条包含缺省规则的规则在使用时，缺省规则必须存在。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL的名词定义\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"先来看看在ACL里面每一个名词的定义，这些名词我大多从\"), _c('a', {\n    attrs: {\n      \"href\": \"#/man\",\n      \"title\": \"man命令\"\n    }\n  }, [_vm._v(\"man\")]), _vm._v(\" page上摘下来虽然有些枯燥,但是对于理解下面的内容还是很有帮助的。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ACL是由一系列的Access Entry所组成的，每一条Access Entry定义了特定的类别可以对文件拥有的操作权限。Access Entry有三个组成部分：Entry tag \"), _c('a', {\n    attrs: {\n      \"href\": \"#/type\",\n      \"title\": \"type命令\"\n    }\n  }, [_vm._v(\"type\")]), _vm._v(\", qualifier (optional), permission。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"我们先来看一下最重要的Entry tag type，它有以下几个类型：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ACL_USER_OBJ：相当于Linux里file_owner的permission\\nACL_USER：定义了额外的用户可以对此文件拥有的permission\\nACL_GROUP_OBJ：相当于Linux里group的permission\\nACL_GROUP：定义了额外的组可以对此文件拥有的permission\\nACL_MASK：定义了ACL_USER, ACL_GROUP_OBJ和ACL_GROUP的最大权限 (这个我下面还会专门讨论)\\nACL_OTHER：相当于Linux里other的permission\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"让我们来据个例子说明一下，下面我们就用getfacl命令来查看一个定义好了的ACL文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# getfacl ./test.txt\\n# file: test.txt\\n# owner: root\\n# group: admin\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\ngroup:dev:r--\\nmask::rw- other::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"前面三个以#开头的定义了文件名，file owner和group。这些信息没有太大的作用，接下来我们可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--omit-header\")]), _vm._v(\"来省略掉。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"user::rw-       定义了ACL_USER_OBJ, 说明file owner拥有[read](#/read \\\"read命令\\\") and [write](#/write \\\"write命令\\\") permission\\nuser:john:rw-   定义了ACL_USER,这样用户john就拥有了对文件的读写权限,实现了我们一开始要达到的目的\\ngroup::rw-      定义了ACL_GROUP_OBJ,说明文件的group拥有read and write permission\\ngroup:dev:r--   定义了ACL_GROUP,使得dev组拥有了对文件的read permission\\nmask::rw-       定义了ACL_MASK的权限为read and write\\nother::r--      定义了ACL_OTHER的权限为read\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从这里我们就可以看出ACL提供了我们可以定义特定用户和用户组的功能，那么接下来我们就来看一下如何设置一个文件的ACL：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"如何设置ACL文件\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"首先我们还是要讲一下设置ACL文件的格式，从上面的例子中我们可以看到每一个Access Entry都是由三个被：号分隔开的字段所组成，第一个就是Entry tag type。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"user   对应了ACL_USER_OBJ和ACL_USER\\ngroup  对应了ACL_GROUP_OBJ和ACL_GROUP\\nmask   对应了ACL_MASK\\nother  对应了ACL_OTHER\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"第二个字段称之为qualifier，也就是上面例子中的john和dev组，它定义了特定用户和拥护组对于文件的权限。这里我们也可以发现只有user和group才有qualifier，其他的都为空。第三个字段就是我们熟悉的permission了。它和Linux的permission一样定义，这里就不多讲了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们就来看一下怎么设置test.txt这个文件的ACL让它来达到我们上面的要求。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一开始文件没有ACL的额外属性：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [ls](#/ls \\\"ls命令\\\") -l\\n-rw-rw-r-- 1 root admin 0 Jul 3 22:06 test.txt\\n\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw- group::rw- other::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"我们先让用户john拥有对test.txt文件的读写权限：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m user:john:rw- ./test.txt\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这时我们就可以看到john用户在ACL里面已经拥有了对文件的读写权。这个时候如果我们查看一下linux的permission我们还会发现一个不一样的地方。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l ./test.txt\\n-rw-rw-r--+ 1 root admin 0 Jul 3 22:06 ./test.txt\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在文件permission的最后多了一个+号，当任何一个文件拥有了ACL_USER或者ACL_GROUP的值以后我们就可以称它为ACL文件，这个+号就是用来提示我们的。我们还可以发现当一个文件拥有了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"或者\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"的值时\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"同时也会被定义。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"接下来我们来设置dev组拥有read permission：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m group:dev:r-- ./test.txt\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\ngroup:dev:r--\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"到这里就完成了我们上面讲到的要求，是不是很简单呢。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL_MASK和Effective permission\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里需要重点讲一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"，因为这是掌握ACL的另一个关键，在Linux file permission里面大家都知道比如对于\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-rw-r--\")]), _vm._v(\"来说, 当中的那个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-\")]), _vm._v(\"是指文件组的permission. 但是在ACL里面这种情况只是在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"不存在的情况下成立。如果文件有ACL_MASK值，那么当中那个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-\")]), _vm._v(\"代表的就是mask值而不再是group permission了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"让我们来看下面这个例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxrw-r-- 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里说明test.sh文件只有file owner: root拥有read, write, execute/search permission。admin组只有read and write permission，现在我们想让用户john也对test.sh具有和root一样的permission。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m user:john:rwx ./test.sh\\n[root@localhost ~]# getfacl --omit-header ./test.sh\\nuser::rwx user:john:rwx\\ngroup::rw-\\nmask::rwx\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们看到john已经拥有了rwx的permission，mask值也被设定为rwx，那是因为它规定了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"的最大值，现在我们再来看test.sh的Linux permission，它已经变成了：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxrwxr--+ 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"那么如果现在admin组的用户想要执行test.sh的程序会发生什么情况呢？它会被permission deny。原因在于实际上admin组的用户只有read and write permission，这里当中显示的rwx是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"的值而不是group的permission。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"所以从这里我们就可以知道，如果一个文件后面有+标记，我们都需要用getfacl来确认它的permission，以免发生混淆。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们再来继续看一个例子，假如现在我们设置test.sh的mask为read only，那么admin组的用户还会有write permission吗？\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m mask::r-- ./test.sh\\n[root@localhost ~]# getfacl --omit-header ./test.sh\\nuser::rwx\\nuser:john:rwx   #effective:r--\\ngroup::rw-      #effective:r--\\nmask::r--\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这时候我们可以看到ACL_USER和ACL_GROUP_OBJ旁边多了个#effective:r--，这是什么意思呢？让我们再来回顾一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"的定义。它规定了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"的最大权限。那么在我们这个例子中他们的最大权限也就是read only。虽然我们这里给\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"设置了其他权限，但是他们真正有效果的只有read权限。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这时我们再来查看test.sh的Linux file permission时它的group permission也会显示其mask的值(i.e. r--)\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxr--r--+ 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"Default ACL\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"上面我们所有讲的都是Access ACL，也就是对文件而言。下面我简单讲一下Default ACL。Default ACL是指对于一个目录进行Default ACL设置，并且在此目录下建立的文件都将继承此目录的ACL。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"同样我们来做一个试验说明，比如现在root用户建立了一个dir目录：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkdir](#/mkdir \\\"mkdir命令\\\") dir\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"他希望所有在此目录下建立的文件都可以被john用户所访问，那么我们就应该对dir目录设置Default ACL。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -d -m user:john:rw ./dir\\n[root@localhost ~]# getfacl --omit-header ./dir\\nuser::rwx\\ngroup::rwx\\nother::r-x\\ndefault:user::rwx\\ndefault:user:john:rwx\\ndefault:group::rwx\\ndefault:mask::rwx\\ndefault: other::r-x\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们可以看到ACL定义了default选项，john用户拥有了default的read, write, excute/search permission。所有没有定义的default都将从file permission里copy过来，现在root用户在dir下建立一个test.txt文件。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [touch](#/touch \\\"touch命令\\\") ./dir/test.txt\\n[root@localhost ~]# ls -l ./dir/test.txt\\n-rw-rw-r--+ 1 root root 0 Jul 3 23:46 ./dir/test.txt\\n\\n[root@localhost ~]# getfacl --omit-header ./dir/test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rwx #effective:rw-\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们看到在dir下建立的文件john用户自动就有了read and write permission，\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL相关命令\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"前面的例子中我们都注意到了getfacl命令是用来读取文件的ACL，setfacl是用来设定文件的Acess ACL。这里还有一个chacl是用来改变文件和目录的Access ACL and Default ACL，它的具体参数大家可以去看man page。我只想提及一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"chacl -B\")]), _vm._v(\"。它可以彻底删除文件或者目录的ACL属性(包括Default ACL)，比如你即使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"setfacl -x\")]), _vm._v(\"删除了所有文件的ACL属性，那个+号还是会出现在文件的末尾，所以正确的删除方法应该是用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"chacl -B\")]), _vm._v(\"用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cp\",\n      \"title\": \"cp命令\"\n    }\n  }, [_vm._v(\"cp\")]), _vm._v(\"来复制文件的时候我们现在可以加上\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-p\")]), _vm._v(\"选项。这样在拷贝文件的时候也将拷贝文件的ACL属性，对于不能拷贝的ACL属性将给出警告。\")]), _vm._v(\" \"), _c('p', [_c('a', {\n    attrs: {\n      \"href\": \"#/mv\",\n      \"title\": \"mv命令\"\n    }\n  }, [_vm._v(\"mv\")]), _vm._v(\"命令将会默认地移动文件的ACL属性，同样如果操作不允许的情况下会给出警告。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"需要注意的几点\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果你的文件系统不支持ACL的话，你也许需要重新\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mount\",\n      \"title\": \"mount命令\"\n    }\n  }, [_vm._v(\"mount\")]), _vm._v(\"你的file system：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"mount -o remount, acl [mount point]\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/chmod\",\n      \"title\": \"chmod命令\"\n    }\n  }, [_vm._v(\"chmod\")]), _vm._v(\"命令改变Linux file permission的时候相应的ACL值也会改变，反之改变ACL的值，相应的file permission也会改变。\")])])\n}]}\n\n/***/ }),\n\n/***/ 417:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1005);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/138.6e62725b4d0be859c500.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-29b5edb6\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./setfacl.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/setfacl.md\n// module id = 1005\n// module chunks = 138","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"setfacl命令\")]), _vm._v(\"是用来在命令行里设置ACL（访问控制列表）。在命令行里，一系列的命令跟随以一系列的文件名。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b,--remove-all：删除所有扩展的acl规则，基本的acl规则(所有者，群组，其他）将被保留。\\n-k,--remove-default：删除缺省的acl规则。如果没有缺省规则，将不提示。\\n-n，--no-mask：不要重新计算有效权限。setfacl默认会重新计算ACL mask，除非mask被明确的制定。\\n--mask：重新计算有效权限，即使ACL mask被明确指定。\\n-d，--default：设定默认的acl规则。\\n--[restore](#/restore \\\"restore命令\\\")=[file](#/file \\\"file命令\\\")：从文件恢复备份的acl规则（这些文件可由getfacl -R产生）。通过这种机制可以恢复整个目录树的acl规则。此参数不能和除--[test](#/test \\\"test命令\\\")以外的任何参数一同执行。\\n--test：测试模式，不会改变任何文件的acl规则，操作后的acl规格将被列出。\\n-R，--recursive：递归的对所有文件及目录进行操作。\\n-L，--logical：跟踪符号链接，默认情况下只跟踪符号链接文件，跳过符号链接目录。\\n-P，--physical：跳过所有符号链接，包括符号链接文件。\\n--version：输出setfacl的版本号并退出。\\n--[help](#/help \\\"help命令\\\")：输出帮助信息。\\n--：标识命令行参数结束，其后的所有参数都将被认为是文件名\\n-：如果文件名是-，则setfacl将从标准输入读取文件名。\\n\\n\")])]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-m\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x\")]), _vm._v(\"后边跟以acl规则。多条acl规则以逗号(,)隔开。选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-M\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-X\")]), _vm._v(\"用来从文件或标准输入读取acl规则。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--[set](#/set \\\"set命令\\\")\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--set-file\")]), _vm._v(\"用来设置文件或目录的acl规则，先前的设定将被覆盖。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-m(--modify)\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-M(--modify-file)\")]), _vm._v(\"选项修改文件或目录的acl规则。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x(--remove)\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-X(--remove-file)\")]), _vm._v(\"选项删除acl规则。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当使用-M，-X选项从文件中读取规则时，setfacl接受getfacl命令输出的格式。每行至少一条规则，以#开始的行将被视为注释。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当在不支持ACLs的文件系统上使用setfacl命令时，setfacl将修改文件权限位。如果acl规则并不完全匹配文件权限位，setfacl将会修改文件权限位使其尽可能的反应acl规则，并会向standard error发送错误消息，以大于0的状态返回。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"权限\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"文件的所有者以及有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CAP_FOWNER\")]), _vm._v(\"的用户进程可以设置一个文件的acl。（在目前的linux系统上，root用户是唯一有\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"CAP_FOWNER\")]), _vm._v(\"能力的用户）\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL规则\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"setfacl命令可以识别以下的规则格式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[d[efault]:] [u[ser]:]uid [:perms]  指定用户的权限，文件所有者的权限（如果uid没有指定）。\\n[d[efault]:] g[roup]:gid [:perms]   指定群组的权限，文件所有群组的权限（如果gid未指定）\\n[d[efault]:] m[ask][:] [:perms]     有效权限掩码\\n[d[efault]:] o[ther] [:perms]       其他的权限\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"恰当的acl规则被用在修改和设定的操作中，对于uid和gid，可以指定一个数字，也可指定一个名字。perms域是一个代表各种权限的字母的组合：读\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-r\")]), _vm._v(\"写\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-[w](#/w \\\"w命令\\\")\")]), _vm._v(\"执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-x\")]), _vm._v(\"，执行只适合目录和一些可执行的文件。pers域也可设置为八进制格式。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"自动创建的规则\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"最初的，文件目录仅包含3个基本的acl规则。为了使规则能正常执行，需要满足以下规则。\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"3个基本规则不能被删除。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"任何一条包含指定的用户名或群组名的规则必须包含有效的权限组合。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"任何一条包含缺省规则的规则在使用时，缺省规则必须存在。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL的名词定义\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"先来看看在ACL里面每一个名词的定义，这些名词我大多从\"), _c('a', {\n    attrs: {\n      \"href\": \"#/man\",\n      \"title\": \"man命令\"\n    }\n  }, [_vm._v(\"man\")]), _vm._v(\" page上摘下来虽然有些枯燥,但是对于理解下面的内容还是很有帮助的。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ACL是由一系列的Access Entry所组成的，每一条Access Entry定义了特定的类别可以对文件拥有的操作权限。Access Entry有三个组成部分：Entry tag \"), _c('a', {\n    attrs: {\n      \"href\": \"#/type\",\n      \"title\": \"type命令\"\n    }\n  }, [_vm._v(\"type\")]), _vm._v(\", qualifier (optional), permission。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"我们先来看一下最重要的Entry tag type，它有以下几个类型：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ACL_USER_OBJ：相当于Linux里file_owner的permission\\nACL_USER：定义了额外的用户可以对此文件拥有的permission\\nACL_GROUP_OBJ：相当于Linux里group的permission\\nACL_GROUP：定义了额外的组可以对此文件拥有的permission\\nACL_MASK：定义了ACL_USER, ACL_GROUP_OBJ和ACL_GROUP的最大权限 (这个我下面还会专门讨论)\\nACL_OTHER：相当于Linux里other的permission\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"让我们来据个例子说明一下，下面我们就用getfacl命令来查看一个定义好了的ACL文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# getfacl ./test.txt\\n# file: test.txt\\n# owner: root\\n# group: admin\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\ngroup:dev:r--\\nmask::rw- other::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"前面三个以#开头的定义了文件名，file owner和group。这些信息没有太大的作用，接下来我们可以用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"--omit-header\")]), _vm._v(\"来省略掉。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"user::rw-       定义了ACL_USER_OBJ, 说明file owner拥有[read](#/read \\\"read命令\\\") and [write](#/write \\\"write命令\\\") permission\\nuser:john:rw-   定义了ACL_USER,这样用户john就拥有了对文件的读写权限,实现了我们一开始要达到的目的\\ngroup::rw-      定义了ACL_GROUP_OBJ,说明文件的group拥有read and write permission\\ngroup:dev:r--   定义了ACL_GROUP,使得dev组拥有了对文件的read permission\\nmask::rw-       定义了ACL_MASK的权限为read and write\\nother::r--      定义了ACL_OTHER的权限为read\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"从这里我们就可以看出ACL提供了我们可以定义特定用户和用户组的功能，那么接下来我们就来看一下如何设置一个文件的ACL：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"如何设置ACL文件\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"首先我们还是要讲一下设置ACL文件的格式，从上面的例子中我们可以看到每一个Access Entry都是由三个被：号分隔开的字段所组成，第一个就是Entry tag type。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"user   对应了ACL_USER_OBJ和ACL_USER\\ngroup  对应了ACL_GROUP_OBJ和ACL_GROUP\\nmask   对应了ACL_MASK\\nother  对应了ACL_OTHER\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"第二个字段称之为qualifier，也就是上面例子中的john和dev组，它定义了特定用户和拥护组对于文件的权限。这里我们也可以发现只有user和group才有qualifier，其他的都为空。第三个字段就是我们熟悉的permission了。它和Linux的permission一样定义，这里就不多讲了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们就来看一下怎么设置test.txt这个文件的ACL让它来达到我们上面的要求。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"一开始文件没有ACL的额外属性：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [ls](#/ls \\\"ls命令\\\") -l\\n-rw-rw-r-- 1 root admin 0 Jul 3 22:06 test.txt\\n\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw- group::rw- other::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"我们先让用户john拥有对test.txt文件的读写权限：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m user:john:rw- ./test.txt\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这时我们就可以看到john用户在ACL里面已经拥有了对文件的读写权。这个时候如果我们查看一下linux的permission我们还会发现一个不一样的地方。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l ./test.txt\\n-rw-rw-r--+ 1 root admin 0 Jul 3 22:06 ./test.txt\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在文件permission的最后多了一个+号，当任何一个文件拥有了ACL_USER或者ACL_GROUP的值以后我们就可以称它为ACL文件，这个+号就是用来提示我们的。我们还可以发现当一个文件拥有了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"或者\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"的值时\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"同时也会被定义。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"接下来我们来设置dev组拥有read permission：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m group:dev:r-- ./test.txt\\n[root@localhost ~]# getfacl --omit-header ./test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rw-\\ngroup:dev:r--\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"到这里就完成了我们上面讲到的要求，是不是很简单呢。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL_MASK和Effective permission\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里需要重点讲一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"，因为这是掌握ACL的另一个关键，在Linux file permission里面大家都知道比如对于\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-rw-r--\")]), _vm._v(\"来说, 当中的那个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-\")]), _vm._v(\"是指文件组的permission. 但是在ACL里面这种情况只是在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"不存在的情况下成立。如果文件有ACL_MASK值，那么当中那个\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"rw-\")]), _vm._v(\"代表的就是mask值而不再是group permission了。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"让我们来看下面这个例子：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxrw-r-- 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里说明test.sh文件只有file owner: root拥有read, write, execute/search permission。admin组只有read and write permission，现在我们想让用户john也对test.sh具有和root一样的permission。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m user:john:rwx ./test.sh\\n[root@localhost ~]# getfacl --omit-header ./test.sh\\nuser::rwx user:john:rwx\\ngroup::rw-\\nmask::rwx\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们看到john已经拥有了rwx的permission，mask值也被设定为rwx，那是因为它规定了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"的最大值，现在我们再来看test.sh的Linux permission，它已经变成了：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxrwxr--+ 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"那么如果现在admin组的用户想要执行test.sh的程序会发生什么情况呢？它会被permission deny。原因在于实际上admin组的用户只有read and write permission，这里当中显示的rwx是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"的值而不是group的permission。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"所以从这里我们就可以知道，如果一个文件后面有+标记，我们都需要用getfacl来确认它的permission，以免发生混淆。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面我们再来继续看一个例子，假如现在我们设置test.sh的mask为read only，那么admin组的用户还会有write permission吗？\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -m mask::r-- ./test.sh\\n[root@localhost ~]# getfacl --omit-header ./test.sh\\nuser::rwx\\nuser:john:rwx   #effective:r--\\ngroup::rw-      #effective:r--\\nmask::r--\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这时候我们可以看到ACL_USER和ACL_GROUP_OBJ旁边多了个#effective:r--，这是什么意思呢？让我们再来回顾一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_MASK\")]), _vm._v(\"的定义。它规定了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP\")]), _vm._v(\"的最大权限。那么在我们这个例子中他们的最大权限也就是read only。虽然我们这里给\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_USER\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ACL_GROUP_OBJ\")]), _vm._v(\"设置了其他权限，但是他们真正有效果的只有read权限。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"这时我们再来查看test.sh的Linux file permission时它的group permission也会显示其mask的值(i.e. r--)\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ls -l\\n-rwxr--r--+ 1 root admin 0 Jul 3 23:10 test.sh\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"Default ACL\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"上面我们所有讲的都是Access ACL，也就是对文件而言。下面我简单讲一下Default ACL。Default ACL是指对于一个目录进行Default ACL设置，并且在此目录下建立的文件都将继承此目录的ACL。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"同样我们来做一个试验说明，比如现在root用户建立了一个dir目录：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [mkdir](#/mkdir \\\"mkdir命令\\\") dir\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"他希望所有在此目录下建立的文件都可以被john用户所访问，那么我们就应该对dir目录设置Default ACL。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# setfacl -d -m user:john:rw ./dir\\n[root@localhost ~]# getfacl --omit-header ./dir\\nuser::rwx\\ngroup::rwx\\nother::r-x\\ndefault:user::rwx\\ndefault:user:john:rwx\\ndefault:group::rwx\\ndefault:mask::rwx\\ndefault: other::r-x\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们可以看到ACL定义了default选项，john用户拥有了default的read, write, excute/search permission。所有没有定义的default都将从file permission里copy过来，现在root用户在dir下建立一个test.txt文件。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# [touch](#/touch \\\"touch命令\\\") ./dir/test.txt\\n[root@localhost ~]# ls -l ./dir/test.txt\\n-rw-rw-r--+ 1 root root 0 Jul 3 23:46 ./dir/test.txt\\n\\n[root@localhost ~]# getfacl --omit-header ./dir/test.txt\\nuser::rw-\\nuser:john:rw-\\ngroup::rwx #effective:rw-\\nmask::rw-\\nother::r--\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里我们看到在dir下建立的文件john用户自动就有了read and write permission，\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ACL相关命令\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"前面的例子中我们都注意到了getfacl命令是用来读取文件的ACL，setfacl是用来设定文件的Acess ACL。这里还有一个chacl是用来改变文件和目录的Access ACL and Default ACL，它的具体参数大家可以去看man page。我只想提及一下\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"chacl -B\")]), _vm._v(\"。它可以彻底删除文件或者目录的ACL属性(包括Default ACL)，比如你即使用了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"setfacl -x\")]), _vm._v(\"删除了所有文件的ACL属性，那个+号还是会出现在文件的末尾，所以正确的删除方法应该是用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"chacl -B\")]), _vm._v(\"用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cp\",\n      \"title\": \"cp命令\"\n    }\n  }, [_vm._v(\"cp\")]), _vm._v(\"来复制文件的时候我们现在可以加上\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-p\")]), _vm._v(\"选项。这样在拷贝文件的时候也将拷贝文件的ACL属性，对于不能拷贝的ACL属性将给出警告。\")]), _vm._v(\" \"), _c('p', [_c('a', {\n    attrs: {\n      \"href\": \"#/mv\",\n      \"title\": \"mv命令\"\n    }\n  }, [_vm._v(\"mv\")]), _vm._v(\"命令将会默认地移动文件的ACL属性，同样如果操作不允许的情况下会给出警告。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"需要注意的几点\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果你的文件系统不支持ACL的话，你也许需要重新\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mount\",\n      \"title\": \"mount命令\"\n    }\n  }, [_vm._v(\"mount\")]), _vm._v(\"你的file system：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"mount -o remount, acl [mount point]\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/chmod\",\n      \"title\": \"chmod命令\"\n    }\n  }, [_vm._v(\"chmod\")]), _vm._v(\"命令改变Linux file permission的时候相应的ACL值也会改变，反之改变ACL的值，相应的file permission也会改变。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-29b5edb6\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/setfacl.md\n// module id = 1264\n// module chunks = 138","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./setfacl.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/setfacl.md\n// module id = 417\n// module chunks = 138"],"sourceRoot":""}