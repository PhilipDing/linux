{"version":3,"sources":["webpack:///static/js/399.3581f5ce2fa9066c8230.js","webpack:///./command/fgrep.md","webpack:///./command/fgrep.md?e5a7","webpack:///./command/fgrep.md?1787"],"names":["webpackJsonp","153","module","exports","__webpack_require__","1559","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","741","Component"],"mappings":"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","file":"static/js/399.3581f5ce2fa9066c8230.js","sourcesContent":["webpackJsonp([399],{\n\n/***/ 153:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(741);\n\n/***/ }),\n\n/***/ 1559:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"fgrep命令\")]), _vm._v(\"是用来搜索 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/file\",\n      \"title\": \"file命令\"\n    }\n  }, [_vm._v(\"file\")]), _vm._v(\" 参数指定的输入文件（缺省为标准输入）中的匹配模式的行。fgrep 命令特别搜索 Pattern 参数，它们是固定的字符串。如果在 File 参数中指定一个以上的文件 fgrep 命令将显示包含匹配行的文件。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"fgrep 命令于 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/grep\",\n      \"title\": \"grep命令\"\n    }\n  }, [_vm._v(\"grep\")]), _vm._v(\" 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/egrep\",\n      \"title\": \"egrep命令\"\n    }\n  }, [_vm._v(\"egrep\")]), _vm._v(\" 命令不同，因为它搜索字符串而不是搜索匹配表达式的模式。fgrep 命令使用快速的压缩算法。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$, *, &#91;, |, (, )\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"\\\\\")]), _vm._v(\"等字符串被 fgrep 命令按字面意思解释。这些字符并不解释为正则表达式，但它们在 grep 和 egrep 命令中解释为正则表达式。因为这些字符对于 shell 有特定的含义，完整的字符串应该加上单引号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"‘ ... ’\")]), _vm._v(\"。. 如果没有指定文件， fgrep 命令假定标准输入。一般，找到的每行都复制到标准输出中去。如果不止一个输入文件，则在找到的每行前打印文件名。\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"fgrep 命令和带 -F 标志的 grep命令是一样的但出错和用法消息不同-s 标志功能也不同。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"每行限制在 2048 个字节。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"段落（-p 标志下）目前限制在5000个字符的长度。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"不要在特定的文件中运行 grep 命令，因为会产生不可预料的结果。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"输入行不能包含空字符。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"输入文件应该以换行字符结尾。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"虽然可以同时指定很多标志，但某些标志会覆盖其余的标志。例如，如果同时指定 -l 和 -n ，只有文件名写入到标准输出中去。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：在找到的每行之前添加行所在的块编号。使用此标志有助于按照上下文查找磁盘块号码。-b 标志不能用于标准输入或者管道输入。\\n-c：仅显示匹配行的计数。\\n-e 模式：指定模式。这个工作模式很简单，但当此模式以 a-(减号) 开头时却是很有用的。\\n-f StringFile：指定包含字符串的文件。\\n-h：当多个文件被处理时隐藏文件名。\\n-i：当进行比较时忽略字母的大小写。\\n-l：只列出包含匹配行的文件名（一次）。文件名之间用换行符分隔。\\nn：将文件中每行的相对行号置于行前。\\n-pSeparator：显示包含匹配行的整个段落。段落之间将按照Separator参数指定的段落分隔符加以分隔，这些分隔符是与搜索模式有着相同格式的模式。包含段落分隔符的行将仅用作分隔符；它们不会被包含在输出中。缺省的段落分隔符是空白行。\\n-q：禁止所有写入到标准输出的操作，不管是否为匹配行。如果选中输入行，以 0 状态退出。\\n-s：仅显示出错消息。这在检查状态时很有用。\\n-v：显示除了匹配特定模式的行以外的所有行。\\n-[w](#/w \\\"w命令\\\")：执行单词搜索。\\n-x：显示匹配模式的行，要求无额外的字符。\\n-y：当进行比较时忽略字符的大小写。\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此命令返回以下出口值：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"0    找到匹配项。\\n1    未找到匹配项。\\n>1   发现语法错误，或者文件不可访问（即使找到了匹配项）。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"搜索几个文件中的一个简单字符串：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep strcpy *.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在当前目录下所有以 .c 字符串结尾的文件中搜索字符串 strcpy。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"计数匹配某模式的行数：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep -c 『{』pgm.cfgrep -c 『}』pgm.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"显示在 pgm.c 中包含左括号和右括号的行的数目。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果在您的 C 程序中一行中没有包含多于一个 { (左括号) 或者 } (右括号)，并且括号正确匹配，那么这两个数字将是一样的。如果这两个数字不一样，您可以将包含括号的行按照他们在文件中的位置顺序显示出来，使用以下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"egrep {\\\\|} pgm.c\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示包含某模式的文件名：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep -l strcpy *.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索当前目录下以 .c 结尾的文件，然后显示包含 strcpy 字符串的文件名。\")])])\n}]}\n\n/***/ }),\n\n/***/ 741:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1559),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/399.3581f5ce2fa9066c8230.js","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./fgrep.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/fgrep.md\n// module id = 153\n// module chunks = 399","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"fgrep命令\")]), _vm._v(\"是用来搜索 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/file\",\n      \"title\": \"file命令\"\n    }\n  }, [_vm._v(\"file\")]), _vm._v(\" 参数指定的输入文件（缺省为标准输入）中的匹配模式的行。fgrep 命令特别搜索 Pattern 参数，它们是固定的字符串。如果在 File 参数中指定一个以上的文件 fgrep 命令将显示包含匹配行的文件。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"fgrep 命令于 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/grep\",\n      \"title\": \"grep命令\"\n    }\n  }, [_vm._v(\"grep\")]), _vm._v(\" 和 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/egrep\",\n      \"title\": \"egrep命令\"\n    }\n  }, [_vm._v(\"egrep\")]), _vm._v(\" 命令不同，因为它搜索字符串而不是搜索匹配表达式的模式。fgrep 命令使用快速的压缩算法。\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$, *, &#91;, |, (, )\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"\\\\\")]), _vm._v(\"等字符串被 fgrep 命令按字面意思解释。这些字符并不解释为正则表达式，但它们在 grep 和 egrep 命令中解释为正则表达式。因为这些字符对于 shell 有特定的含义，完整的字符串应该加上单引号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"‘ ... ’\")]), _vm._v(\"。. 如果没有指定文件， fgrep 命令假定标准输入。一般，找到的每行都复制到标准输出中去。如果不止一个输入文件，则在找到的每行前打印文件名。\")]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"fgrep 命令和带 -F 标志的 grep命令是一样的但出错和用法消息不同-s 标志功能也不同。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"每行限制在 2048 个字节。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"段落（-p 标志下）目前限制在5000个字符的长度。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"不要在特定的文件中运行 grep 命令，因为会产生不可预料的结果。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"输入行不能包含空字符。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"输入文件应该以换行字符结尾。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"虽然可以同时指定很多标志，但某些标志会覆盖其余的标志。例如，如果同时指定 -l 和 -n ，只有文件名写入到标准输出中去。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：在找到的每行之前添加行所在的块编号。使用此标志有助于按照上下文查找磁盘块号码。-b 标志不能用于标准输入或者管道输入。\\n-c：仅显示匹配行的计数。\\n-e 模式：指定模式。这个工作模式很简单，但当此模式以 a-(减号) 开头时却是很有用的。\\n-f StringFile：指定包含字符串的文件。\\n-h：当多个文件被处理时隐藏文件名。\\n-i：当进行比较时忽略字母的大小写。\\n-l：只列出包含匹配行的文件名（一次）。文件名之间用换行符分隔。\\nn：将文件中每行的相对行号置于行前。\\n-pSeparator：显示包含匹配行的整个段落。段落之间将按照Separator参数指定的段落分隔符加以分隔，这些分隔符是与搜索模式有着相同格式的模式。包含段落分隔符的行将仅用作分隔符；它们不会被包含在输出中。缺省的段落分隔符是空白行。\\n-q：禁止所有写入到标准输出的操作，不管是否为匹配行。如果选中输入行，以 0 状态退出。\\n-s：仅显示出错消息。这在检查状态时很有用。\\n-v：显示除了匹配特定模式的行以外的所有行。\\n-[w](#/w \\\"w命令\\\")：执行单词搜索。\\n-x：显示匹配模式的行，要求无额外的字符。\\n-y：当进行比较时忽略字符的大小写。\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此命令返回以下出口值：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"0    找到匹配项。\\n1    未找到匹配项。\\n>1   发现语法错误，或者文件不可访问（即使找到了匹配项）。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"搜索几个文件中的一个简单字符串：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep strcpy *.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在当前目录下所有以 .c 字符串结尾的文件中搜索字符串 strcpy。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"计数匹配某模式的行数：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep -c 『{』pgm.cfgrep -c 『}』pgm.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"显示在 pgm.c 中包含左括号和右括号的行的数目。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"如果在您的 C 程序中一行中没有包含多于一个 { (左括号) 或者 } (右括号)，并且括号正确匹配，那么这两个数字将是一样的。如果这两个数字不一样，您可以将包含括号的行按照他们在文件中的位置顺序显示出来，使用以下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"egrep {\\\\|} pgm.c\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示包含某模式的文件名：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"fgrep -l strcpy *.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索当前目录下以 .c 结尾的文件，然后显示包含 strcpy 字符串的文件名。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-88ee6580\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/fgrep.md\n// module id = 1559\n// module chunks = 399","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-88ee6580\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./fgrep.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/fgrep.md\n// module id = 741\n// module chunks = 399"],"sourceRoot":""}