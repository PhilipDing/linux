{"version":3,"sources":["webpack:///static/js/176.24508af781f1a76f797f.js","webpack:///./command/read.md?18a6","webpack:///./command/read.md","webpack:///./command/read.md?e1d1"],"names":["webpackJsonp","1272","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","378","__webpack_require__","967","Component"],"mappings":"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","file":"static/js/176.24508af781f1a76f797f.js","sourcesContent":["webpackJsonp([176],{\n\n/***/ 1272:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"read命令\")]), _vm._v(\"从键盘读取变量的值，通常用在shell脚本中与用户进行交互的场合。该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。在read命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-p：指定读取值时的提示符；\\n-t：指定读取值时等待的时间（秒）。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"变量：指定读取值的变量名。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面的列表给出了read命令的常用方式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read 1987name\\n从标准输入读取输入并赋值给变量1987name。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read first [last](#/last \\\"last命令\\\")\\n从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量first中，并将该行其他的输入放在变量last中。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read\\n从标准输入读取一行并赋值给特定变量REPLY。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -a arrayname\\n把单词清单读入arrayname的数组里。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -p \\\"text\\\"\\n打印提示（text），等待输入，并将输入存储在REPLY中。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -r line\\n允许输入包含反斜杠。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -t 3\\n指定读取等待时间为3秒。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -n 2 var\\n从输入中读取两个字符并存入变量var，不需要按回车读取。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -d \\\":\\\" var\\n用定界符“:”结束输入行。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"read命令示例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"从标准输入读取输入并赋值给变量1987name。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read 1987name        #等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer\\nHelloWorld            #控制台输入Hello\\n\\n#[echo](#/echo \\\"echo命令\\\") $1987name       #打印变量\\nHelloWorld\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"等待一组输入，每个单词之间使用空格隔开，直到回车结束，并分别将单词依次赋值给这三个读入变量。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read one two three\\n1 2 3                   #在控制台输入1 2 3，它们之间用空格隔开。\\n\\n#echo \\\"one = $one, two = $two, three = $three\\\"\\none = 1, two = 2, three = 3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"REPLY示例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read                  #等待控制台输入，并将结果赋值给特定内置变量REPLY。\\nThis is REPLY          #在控制台输入该行。 \\n\\n#echo $REPLY           #打印输出特定内置变量REPLY，以确认是否被正确赋值。\\n\\nThis is REPLY\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"-p选项示例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read -p \\\"Enter your name: \\\"            #输出文本提示，同时等待输入，并将结果赋值给REPLY。\\nEnter you name: stephen                 #在提示文本之后输入stephen\\n\\n#echo $REPLY\\nstephen\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"等待控制台输入，并将输入信息视为数组，赋值给数组变量friends，输入信息用空格隔开数组的每个元素。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read -a friends\\nTim Tom Helen\\n\\n#echo \\\"They are ${friends[0]}, ${friends[1]} and ${friends[2]}.\\\"\\nThey are Tim, Tom and Helen.\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"补充一个终端输入密码时候，不让密码显示出来的例子。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\nread -p \\\"输入密码：\\\" -s [pwd](#/pwd \\\"pwd命令\\\")\\necho\\necho password read, is \\\"$pwd\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n[stty](#/stty \\\"stty命令\\\") -echo\\nread -p \\\"输入密码：\\\" pwd\\nstty echo\\necho\\necho 输入完毕。\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其中，选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-echo\")]), _vm._v(\"禁止将输出发送到终端，而选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"echo\")]), _vm._v(\"则允许发送输出。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用read命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read v1 v3          #读取变量值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行上面的指令以后，要求键入两个数据，如下所示：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Linux c+            #输入数据\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo $v1 $v3       #输出变量的值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行输出变量值的命令以后，将显示用户所输入的数据值，如下所示：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Linux c+           #输出变量值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：使用echo命令输出变量值时，必须在变量名前添加符号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$\")]), _vm._v(\"。否则，echo将直接输出变量名。\")])])\n}]}\n\n/***/ }),\n\n/***/ 378:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(967);\n\n/***/ }),\n\n/***/ 967:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1272),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/176.24508af781f1a76f797f.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"read命令\")]), _vm._v(\"从键盘读取变量的值，通常用在shell脚本中与用户进行交互的场合。该命令可以一次读取多个变量的值，变量和输入的值都需要使用空格隔开。在read命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-p：指定读取值时的提示符；\\n-t：指定读取值时等待的时间（秒）。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"变量：指定读取值的变量名。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"下面的列表给出了read命令的常用方式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read 1987name\\n从标准输入读取输入并赋值给变量1987name。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read first [last](#/last \\\"last命令\\\")\\n从标准输入读取输入到第一个空格或者回车，将输入的第一个单词放到变量first中，并将该行其他的输入放在变量last中。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read\\n从标准输入读取一行并赋值给特定变量REPLY。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -a arrayname\\n把单词清单读入arrayname的数组里。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -p \\\"text\\\"\\n打印提示（text），等待输入，并将输入存储在REPLY中。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -r line\\n允许输入包含反斜杠。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -t 3\\n指定读取等待时间为3秒。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -n 2 var\\n从输入中读取两个字符并存入变量var，不需要按回车读取。\\n\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read -d \\\":\\\" var\\n用定界符“:”结束输入行。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"read命令示例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"从标准输入读取输入并赋值给变量1987name。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read 1987name        #等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer\\nHelloWorld            #控制台输入Hello\\n\\n#[echo](#/echo \\\"echo命令\\\") $1987name       #打印变量\\nHelloWorld\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"等待一组输入，每个单词之间使用空格隔开，直到回车结束，并分别将单词依次赋值给这三个读入变量。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read one two three\\n1 2 3                   #在控制台输入1 2 3，它们之间用空格隔开。\\n\\n#echo \\\"one = $one, two = $two, three = $three\\\"\\none = 1, two = 2, three = 3\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"REPLY示例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read                  #等待控制台输入，并将结果赋值给特定内置变量REPLY。\\nThis is REPLY          #在控制台输入该行。 \\n\\n#echo $REPLY           #打印输出特定内置变量REPLY，以确认是否被正确赋值。\\n\\nThis is REPLY\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"-p选项示例\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read -p \\\"Enter your name: \\\"            #输出文本提示，同时等待输入，并将结果赋值给REPLY。\\nEnter you name: stephen                 #在提示文本之后输入stephen\\n\\n#echo $REPLY\\nstephen\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"等待控制台输入，并将输入信息视为数组，赋值给数组变量friends，输入信息用空格隔开数组的每个元素。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#read -a friends\\nTim Tom Helen\\n\\n#echo \\\"They are ${friends[0]}, ${friends[1]} and ${friends[2]}.\\\"\\nThey are Tim, Tom and Helen.\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"补充一个终端输入密码时候，不让密码显示出来的例子。\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法1：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\nread -p \\\"输入密码：\\\" -s [pwd](#/pwd \\\"pwd命令\\\")\\necho\\necho password read, is \\\"$pwd\\\"\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"方法2：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n[stty](#/stty \\\"stty命令\\\") -echo\\nread -p \\\"输入密码：\\\" pwd\\nstty echo\\necho\\necho 输入完毕。\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"其中，选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-echo\")]), _vm._v(\"禁止将输出发送到终端，而选项\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"echo\")]), _vm._v(\"则允许发送输出。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"使用read命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"read v1 v3          #读取变量值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行上面的指令以后，要求键入两个数据，如下所示：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Linux c+            #输入数据\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo $v1 $v3       #输出变量的值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"执行输出变量值的命令以后，将显示用户所输入的数据值，如下所示：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Linux c+           #输出变量值\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：使用echo命令输出变量值时，必须在变量名前添加符号\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"$\")]), _vm._v(\"。否则，echo将直接输出变量名。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-257c3e4c\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/read.md\n// module id = 1272\n// module chunks = 176","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./read.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/read.md\n// module id = 378\n// module chunks = 176","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-257c3e4c\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./read.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/read.md\n// module id = 967\n// module chunks = 176"],"sourceRoot":""}