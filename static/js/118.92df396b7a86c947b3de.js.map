{"version":3,"sources":["webpack:///static/js/118.92df396b7a86c947b3de.js","webpack:///./command/ss.md?6529","webpack:///./command/ss.md?ed9a","webpack:///./command/ss.md"],"names":["webpackJsonp","1025","module","exports","__webpack_require__","Component","1390","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","437"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,EAASC,GCHjC,GAAAC,GAAAD,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAF,GAAAC,QAAAE,EAAAF,SDUMG,KACA,SAAUJ,EAAQC,GExBxBD,EAAAC,SAAgBI,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,gDAAAH,EAAA,KACAI,OACAC,KAAA,YACAC,MAAA,eAEGX,EAAAQ,GAAA,aAAAR,EAAAQ,GAAA,8DAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,4CAAAH,EAAA,QACHO,KAAA,IACGZ,EAAAQ,GAAA,wCAAAR,EAAAQ,GAAA,gFAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,4IAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,qRAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,eAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,s6BAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,+aAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,gEAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,woBAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,m3BAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,sBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,8KAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,uBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,o4BF+BGM,IACA,SAAUpB,EAAQC,EAASC,GG1FjCF,EAAAC,QAAAC,EAAA","file":"static/js/118.92df396b7a86c947b3de.js","sourcesContent":["webpackJsonp([118],{\n\n/***/ 1025:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1390),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1390:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ss命令\")]), _vm._v(\"用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/netstat\",\n      \"title\": \"netstat命令\"\n    }\n  }, [_vm._v(\"netstat\")]), _vm._v(\"类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") /proc/net/tcp\")]), _vm._v(\"，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ss(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-h：显示帮助信息；\\n-V：显示指令版本信息；\\n-n：不解析服务名称，以数字方式显示；\\n-a：显示所有的套接字；\\n-l：显示处于监听状态的套接字；\\n-o：显示计时器信息；\\n-m：显示套接字的内存使用情况；\\n-p：显示使用套接字的进程信息；\\n-i：显示内部的TCP信息；\\n-4：只显示ipv4的套接字；\\n-6：只显示ipv6的套接字；\\n-t：只显示tcp套接字；\\n-u：只显示udp套接字；\\n-d：只显示DCCP套接字；\\n-[w](#/w \\\"w命令\\\")：仅显示RAW套接字；\\n-x：仅显示UNIX域套接字。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示ICP连接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -t -a\\nState       Recv-Q Send-Q                            Local Address:Port                                Peer Address:Port   \\nLISTEN      0      0                                             *:3306                                           *:*       \\nLISTEN      0      0                                             *:http                                           *:*       \\nLISTEN      0      0                                             *:[ssh](#/ssh \\\"ssh命令\\\")                                            *:*       \\nLISTEN      0      0                                     127.0.0.1:smtp                                           *:*       \\nESTAB       0      0                                112.124.15.130:42071                              42.156.166.25:http    \\nESTAB       0      0                                112.124.15.130:ssh                              121.229.196.235:33398 \\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示 Sockets 摘要\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -s\\nTotal: 172 (kernel 189)\\nTCP:   10 (estab 2, closed 4, orphaned 0, synrecv 0, timewait 0/0), ports 5\\n\\nTransport Total     [ip](#/ip \\\"ip命令\\\")        IPv6\\n*         189       -         -        \\nRAW       0         0         0        \\nUDP       5         5         0        \\nTCP       6         6         0        \\nINET      11        11        0        \\nFRAG      0         0         0   \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"列出当前的established, closed, orphaned and waiting TCP sockets\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"列出所有打开的网络连接端口\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -l\\nRecv-Q Send-Q                                 Local Address:Port                                     Peer Address:Port   \\n0      0                                                  *:3306                                                *:*       \\n0      0                                                  *:http                                                *:*       \\n0      0                                                  *:ssh                                                 *:*       \\n0      0                                          127.0.0.1:smtp                                                *:* \\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查看进程使用的socket\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -pl\\nRecv-Q Send-Q                                          Local Address:Port                                              Peer Address:Port   \\n0      0                                                           *:3306                                                         *:*        [users](#/users \\\"users命令\\\"):((\\\"mysqld\\\",1718,10))\\n0      0                                                           *:http                                                         *:*        users:((\\\"nginx\\\",13312,5),(\\\"nginx\\\",13333,5))\\n0      0                                                           *:ssh                                                          *:*        users:((\\\"[sshd](#/sshd \\\"sshd命令\\\")\\\",1379,3))\\n0      0                                                   127.0.0.1:smtp                                                         *:*        us\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"找出打开套接字/端口应用程序\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -pl | [grep](#/grep \\\"grep命令\\\") 3306\\n0      0                            *:3306                          *:*        users:((\\\"mysqld\\\",1718,10))\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示所有UDP Sockets\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -u -a\\nState       Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   \\nUNCONN      0      0                                                      *:syslog                                                  *:*       \\nUNCONN      0      0                                         112.124.15.130:ntp                                                     *:*       \\nUNCONN      0      0                                            10.160.7.81:ntp                                                     *:*       \\nUNCONN      0      0                                              127.0.0.1:ntp                                                     *:*       \\nUNCONN      0      0                                                      *:ntp                                                     *:*\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 437:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1025);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/118.92df396b7a86c947b3de.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4fa422e4\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ss.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ss.md\n// module id = 1025\n// module chunks = 118","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ss命令\")]), _vm._v(\"用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/netstat\",\n      \"title\": \"netstat命令\"\n    }\n  }, [_vm._v(\"netstat\")]), _vm._v(\"类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") /proc/net/tcp\")]), _vm._v(\"，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ss(选项)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-h：显示帮助信息；\\n-V：显示指令版本信息；\\n-n：不解析服务名称，以数字方式显示；\\n-a：显示所有的套接字；\\n-l：显示处于监听状态的套接字；\\n-o：显示计时器信息；\\n-m：显示套接字的内存使用情况；\\n-p：显示使用套接字的进程信息；\\n-i：显示内部的TCP信息；\\n-4：只显示ipv4的套接字；\\n-6：只显示ipv6的套接字；\\n-t：只显示tcp套接字；\\n-u：只显示udp套接字；\\n-d：只显示DCCP套接字；\\n-[w](#/w \\\"w命令\\\")：仅显示RAW套接字；\\n-x：仅显示UNIX域套接字。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示ICP连接\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -t -a\\nState       Recv-Q Send-Q                            Local Address:Port                                Peer Address:Port   \\nLISTEN      0      0                                             *:3306                                           *:*       \\nLISTEN      0      0                                             *:http                                           *:*       \\nLISTEN      0      0                                             *:[ssh](#/ssh \\\"ssh命令\\\")                                            *:*       \\nLISTEN      0      0                                     127.0.0.1:smtp                                           *:*       \\nESTAB       0      0                                112.124.15.130:42071                              42.156.166.25:http    \\nESTAB       0      0                                112.124.15.130:ssh                              121.229.196.235:33398 \\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示 Sockets 摘要\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -s\\nTotal: 172 (kernel 189)\\nTCP:   10 (estab 2, closed 4, orphaned 0, synrecv 0, timewait 0/0), ports 5\\n\\nTransport Total     [ip](#/ip \\\"ip命令\\\")        IPv6\\n*         189       -         -        \\nRAW       0         0         0        \\nUDP       5         5         0        \\nTCP       6         6         0        \\nINET      11        11        0        \\nFRAG      0         0         0   \\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"列出当前的established, closed, orphaned and waiting TCP sockets\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"列出所有打开的网络连接端口\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -l\\nRecv-Q Send-Q                                 Local Address:Port                                     Peer Address:Port   \\n0      0                                                  *:3306                                                *:*       \\n0      0                                                  *:http                                                *:*       \\n0      0                                                  *:ssh                                                 *:*       \\n0      0                                          127.0.0.1:smtp                                                *:* \\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"查看进程使用的socket\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -pl\\nRecv-Q Send-Q                                          Local Address:Port                                              Peer Address:Port   \\n0      0                                                           *:3306                                                         *:*        [users](#/users \\\"users命令\\\"):((\\\"mysqld\\\",1718,10))\\n0      0                                                           *:http                                                         *:*        users:((\\\"nginx\\\",13312,5),(\\\"nginx\\\",13333,5))\\n0      0                                                           *:ssh                                                          *:*        users:((\\\"[sshd](#/sshd \\\"sshd命令\\\")\\\",1379,3))\\n0      0                                                   127.0.0.1:smtp                                                         *:*        us\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"找出打开套接字/端口应用程序\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -pl | [grep](#/grep \\\"grep命令\\\") 3306\\n0      0                            *:3306                          *:*        users:((\\\"mysqld\\\",1718,10))\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示所有UDP Sockets\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ss -u -a\\nState       Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   \\nUNCONN      0      0                                                      *:syslog                                                  *:*       \\nUNCONN      0      0                                         112.124.15.130:ntp                                                     *:*       \\nUNCONN      0      0                                            10.160.7.81:ntp                                                     *:*       \\nUNCONN      0      0                                              127.0.0.1:ntp                                                     *:*       \\nUNCONN      0      0                                                      *:ntp                                                     *:*\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4fa422e4\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ss.md\n// module id = 1390\n// module chunks = 118","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ss.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/ss.md\n// module id = 437\n// module chunks = 118"],"sourceRoot":""}