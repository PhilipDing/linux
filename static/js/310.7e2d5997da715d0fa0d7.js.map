{"version":3,"sources":["webpack:///static/js/310.7e2d5997da715d0fa0d7.js","webpack:///./command/ldconfig.md?35bf","webpack:///./command/ldconfig.md","webpack:///./command/ldconfig.md?2739"],"names":["webpackJsonp","1657","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","242","__webpack_require__","830","Component"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAgBC,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,iBAAAH,EAAA,QACAI,KAAA,IACGT,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,aAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,oCAAAR,EAAAQ,GAAA,0EAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,sBAAAR,EAAAQ,GAAA,sEAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,WAAAR,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,uDAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,0LAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHI,KAAA,IACGJ,EAAA,QACHK,OACAC,QAAA,MAEGX,EAAAQ,GAAA,05BAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,0BAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAA,EAAA,MAAAL,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,eAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,2CAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,0BAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,6BAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,WAAAH,EAAA,KACHK,OACAE,KAAA,UACAC,MAAA,aAEGb,EAAAQ,GAAA,WAAAR,EAAAQ,GAAA,KAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,sBAAAR,EAAAQ,GAAA,sBAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,0BAAAR,EAAAQ,GAAA,aAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,SAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,0BAAAR,EAAAQ,GAAA,2CAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,0BAAAH,EAAA,QACHI,KAAA,IACGT,EAAAQ,GAAA,qBAAAR,EAAAQ,GAAA,4BAAAH,EAAA,KACHK,OACAE,KAAA,WACAC,MAAA,cAEGb,EAAAQ,GAAA,YAAAR,EAAAQ,GAAA,uFAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,+DAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,8EAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,2JDUGM,IACA,SAAUjB,EAAQC,EAASiB,GEhEjClB,EAAAC,QAAAiB,EAAA,MFsEMC,IACA,SAAUnB,EAAQC,EAASiB,GGvEjC,GAAAE,GAAAF,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAlB,GAAAC,QAAAmB,EAAAnB","file":"static/js/310.7e2d5997da715d0fa0d7.js","sourcesContent":["webpackJsonp([310],{\n\n/***/ 1657:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ldconfig命令\")]), _vm._v(\"的用途主要是在默认搜寻目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/lib\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/lib\")]), _vm._v(\"以及动态库配置文件\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/[ld](#/ld \\\"ld命令\\\").so.conf\")]), _vm._v(\"内所列的目录下，搜索出可共享的动态链接库（格式如lib*.so*）,进而创建出动态装入程序(ld.so)所需的连接和缓存文件。缓存文件默认为\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.cache\")]), _vm._v(\"，此文件保存已排好序的动态链接库名字列表，为了让动态链接库为系统所共享，需运行动态链接库的管理命令ldconfig，此执行程序存放在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")]), _vm._v(\"目录下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ldconfig [-v|--verbose] [-n] [-N] [-X] [-f CONF] [-C CACHE] [-r ROOT] [-l] [-p|--print-cache] [-c FORMAT] [--format=FORMAT] [-V] [-?|--[help](#/help \\\"help命令\\\")|--usage] path... \\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-v或--verbose：用此选项时，ldconfig将显示正在扫描的目录及搜索到的动态链接库，还有它所创建的连接的名字。\\n-n：用此选项时,ldconfig仅扫描命令行指定的目录，不扫描默认目录（/lib、/usr/lib），也不扫描配置文件/etc/ld.so.conf所列的目录。\\n-N：此选项指示ldconfig不重建缓存文件（/etc/ld.so.cache），若未用-X选项，ldconfig照常更新文件的连接。\\n-X：此选项指示ldconfig不更新文件的连接，若未用-N选项，则缓存文件正常更新。\\n-f CONF：此选项指定动态链接库的配置文件为CONF，系统默认为/etc/ld.so.conf。\\n-C CACHE：此选项指定生成的缓存文件为CACHE，系统默认的是/etc/ld.so.cache，此文件存放已排好序的可共享的动态链接库的列表。\\n-r ROOT：此选项改变应用程序的根目录为ROOT（是调用[chroot](#/chroot \\\"chroot命令\\\")函数实现的）。选择此项时，系统默认的配置文件/etc/ld.so.conf，实际对应的为ROOT/etc/ld.so.conf。如用-r /usr/zzz时，打开配置文件/etc/ld.so.conf时，实际打开的是/usr/zzz/etc/ld.so.conf文件。用此选项，可以大大增加动态链接库管理的灵活性。\\n-l：通常情况下,ldconfig搜索动态链接库时将自动建立动态链接库的连接，选择此项时，将进入专家模式，需要手工设置连接，一般用户不用此项。\\n-p或--print-cache：此选项指示ldconfig打印出当前缓存文件所保存的所有共享库的名字。\\n-c FORMAT 或 --format=FORMAT：此选项用于指定缓存文件所使用的格式，共有三种：old(老格式)，new(新格式)和compat（兼容格式，此为默认格式）。\\n-V：此选项打印出ldconfig的版本信息，而后退出。\\n-? 或 --help 或 --usage：这三个选项作用相同，都是让ldconfig打印出其帮助信息，而后退出。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ldconfig几个需要注意的地方：\")])]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"往\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/lib\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/lib\")]), _vm._v(\"里面加东西，是不用修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"的，但是完了之后要调一下ldconfig，不然这个library会找不到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"想往上面两个目录以外加东西的时候，一定要修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"，然后再调用ldconfig，不然也会找不到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"比如安装了一个\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mysql\",\n      \"title\": \"mysql命令\"\n    }\n  }, [_vm._v(\"mysql\")]), _vm._v(\"到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql\")]), _vm._v(\"，mysql有一大堆library在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql/lib\")]), _vm._v(\"下面，这时就需要在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"下面加一行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql/lib\")]), _vm._v(\"，保存过后ldconfig一下，新的library才能在程序运行时被找到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果想在这两个目录以外放lib，但是又不想在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"中加东西（或者是没有权限加东西）。那也可以，就是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/export\",\n      \"title\": \"export命令\"\n    }\n  }, [_vm._v(\"export\")]), _vm._v(\"一个全局变量LD_LIBRARY_PATH，然后运行程序的时候就会去这个目录中找library。一般来讲这只是一种临时的解决方案，在没有权限或临时需要的时候使用。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"ldconfig做的这些东西都与运行程序时有关，跟编译时一点关系都没有。编译的时候还是该加-L就得加，不要混淆了。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"总之，就是不管做了什么关于library的变动后，最好都ldconfig一下，不然会出现一些意想不到的结果。不会花太多的时间，但是会省很多的事。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"再有，诸如libdb-4.3.so文件头中是会含有库名相关的信息的（即含“libdb-4.3.so”，可用strings命令察看），因此仅通过修改文件名以冒充某已被识别的库（如libdb-4.8.so）是行不通的。为此可在编译库的Makefile中直接修改配置信息，指定特别的库名。\")])])])\n}]}\n\n/***/ }),\n\n/***/ 242:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(830);\n\n/***/ }),\n\n/***/ 830:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1657),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/310.7e2d5997da715d0fa0d7.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ldconfig命令\")]), _vm._v(\"的用途主要是在默认搜寻目录\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/lib\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/lib\")]), _vm._v(\"以及动态库配置文件\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/[ld](#/ld \\\"ld命令\\\").so.conf\")]), _vm._v(\"内所列的目录下，搜索出可共享的动态链接库（格式如lib*.so*）,进而创建出动态装入程序(ld.so)所需的连接和缓存文件。缓存文件默认为\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.cache\")]), _vm._v(\"，此文件保存已排好序的动态链接库名字列表，为了让动态链接库为系统所共享，需运行动态链接库的管理命令ldconfig，此执行程序存放在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/sbin\")]), _vm._v(\"目录下。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"ldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ldconfig [-v|--verbose] [-n] [-N] [-X] [-f CONF] [-C CACHE] [-r ROOT] [-l] [-p|--print-cache] [-c FORMAT] [--format=FORMAT] [-V] [-?|--[help](#/help \\\"help命令\\\")|--usage] path... \\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-v或--verbose：用此选项时，ldconfig将显示正在扫描的目录及搜索到的动态链接库，还有它所创建的连接的名字。\\n-n：用此选项时,ldconfig仅扫描命令行指定的目录，不扫描默认目录（/lib、/usr/lib），也不扫描配置文件/etc/ld.so.conf所列的目录。\\n-N：此选项指示ldconfig不重建缓存文件（/etc/ld.so.cache），若未用-X选项，ldconfig照常更新文件的连接。\\n-X：此选项指示ldconfig不更新文件的连接，若未用-N选项，则缓存文件正常更新。\\n-f CONF：此选项指定动态链接库的配置文件为CONF，系统默认为/etc/ld.so.conf。\\n-C CACHE：此选项指定生成的缓存文件为CACHE，系统默认的是/etc/ld.so.cache，此文件存放已排好序的可共享的动态链接库的列表。\\n-r ROOT：此选项改变应用程序的根目录为ROOT（是调用[chroot](#/chroot \\\"chroot命令\\\")函数实现的）。选择此项时，系统默认的配置文件/etc/ld.so.conf，实际对应的为ROOT/etc/ld.so.conf。如用-r /usr/zzz时，打开配置文件/etc/ld.so.conf时，实际打开的是/usr/zzz/etc/ld.so.conf文件。用此选项，可以大大增加动态链接库管理的灵活性。\\n-l：通常情况下,ldconfig搜索动态链接库时将自动建立动态链接库的连接，选择此项时，将进入专家模式，需要手工设置连接，一般用户不用此项。\\n-p或--print-cache：此选项指示ldconfig打印出当前缓存文件所保存的所有共享库的名字。\\n-c FORMAT 或 --format=FORMAT：此选项用于指定缓存文件所使用的格式，共有三种：old(老格式)，new(新格式)和compat（兼容格式，此为默认格式）。\\n-V：此选项打印出ldconfig的版本信息，而后退出。\\n-? 或 --help 或 --usage：这三个选项作用相同，都是让ldconfig打印出其帮助信息，而后退出。\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"ldconfig几个需要注意的地方：\")])]), _vm._v(\" \"), _c('ol', [_c('li', [_vm._v(\"往\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/lib\")]), _vm._v(\"和\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/lib\")]), _vm._v(\"里面加东西，是不用修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"的，但是完了之后要调一下ldconfig，不然这个library会找不到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"想往上面两个目录以外加东西的时候，一定要修改\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"，然后再调用ldconfig，不然也会找不到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"比如安装了一个\"), _c('a', {\n    attrs: {\n      \"href\": \"#/mysql\",\n      \"title\": \"mysql命令\"\n    }\n  }, [_vm._v(\"mysql\")]), _vm._v(\"到\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql\")]), _vm._v(\"，mysql有一大堆library在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql/lib\")]), _vm._v(\"下面，这时就需要在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"下面加一行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/usr/local/mysql/lib\")]), _vm._v(\"，保存过后ldconfig一下，新的library才能在程序运行时被找到。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果想在这两个目录以外放lib，但是又不想在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/ld.so.conf\")]), _vm._v(\"中加东西（或者是没有权限加东西）。那也可以，就是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/export\",\n      \"title\": \"export命令\"\n    }\n  }, [_vm._v(\"export\")]), _vm._v(\"一个全局变量LD_LIBRARY_PATH，然后运行程序的时候就会去这个目录中找library。一般来讲这只是一种临时的解决方案，在没有权限或临时需要的时候使用。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"ldconfig做的这些东西都与运行程序时有关，跟编译时一点关系都没有。编译的时候还是该加-L就得加，不要混淆了。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"总之，就是不管做了什么关于library的变动后，最好都ldconfig一下，不然会出现一些意想不到的结果。不会花太多的时间，但是会省很多的事。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"再有，诸如libdb-4.3.so文件头中是会含有库名相关的信息的（即含“libdb-4.3.so”，可用strings命令察看），因此仅通过修改文件名以冒充某已被识别的库（如libdb-4.8.so）是行不通的。为此可在编译库的Makefile中直接修改配置信息，指定特别的库名。\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-ecca2598\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ldconfig.md\n// module id = 1657\n// module chunks = 310","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ldconfig.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/ldconfig.md\n// module id = 242\n// module chunks = 310","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ecca2598\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ldconfig.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ldconfig.md\n// module id = 830\n// module chunks = 310"],"sourceRoot":""}