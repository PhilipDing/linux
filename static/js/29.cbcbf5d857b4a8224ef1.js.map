{"version":3,"sources":["webpack:///static/js/29.cbcbf5d857b4a8224ef1.js","webpack:///./command/xargs.md?cb9e","webpack:///./command/xargs.md?bccf","webpack:///./command/xargs.md"],"names":["webpackJsonp","1117","module","exports","__webpack_require__","Component","1486","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","staticClass","529"],"mappings":"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","file":"static/js/29.cbcbf5d857b4a8224ef1.js","sourcesContent":["webpackJsonp([29],{\n\n/***/ 1117:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1486),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1486:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"xargs命令\")]), _vm._v(\"是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/echo\",\n      \"title\": \"echo命令\"\n    }\n  }, [_vm._v(\"echo\")]), _vm._v(\"，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"xargs命令用法\")]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs用作替换工具，读取输入数据重新格式化后输出。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"定义一个测试文件，内有多行文本数据：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") [test](#/test \\\"test命令\\\").txt\\n\\na b c d e f g\\nh i j k l m n\\no p q\\nr s t\\nu v [w](#/w \\\"w命令\\\") x y z\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"多行输入单行输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat test.txt | xargs\\n\\na b c d e f g h i j k l m n o p q r s t u v w x y z\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-n选项\")]), _vm._v(\"多行输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat test.txt | xargs -n3\\n\\na b c\\nd e f\\ng h i\\nj k l\\nm n o\\np q r\\ns t u\\nv w x\\ny z\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-d选项\")]), _vm._v(\"可以自定义一个定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"nameXnameXnameXname\\\" | xargs -dX\\n\\nname name name name\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"结合**-n选项**使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"nameXnameXnameXname\\\" | xargs -dX -n2\\n\\nname name\\nname name\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"读取stdin，将格式化后的参数传递给命令\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假设一个命令为 sk.sh 和一个保存参数的文件arg.txt：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n#sk.sh命令内容，打印出所有参数。\\n\\necho $*\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"arg.txt文件内容：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat arg.txt\\n\\naaa\\nbbb\\nccc\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs的一个\"), _c('strong', [_vm._v(\"选项-I\")]), _vm._v(\"，使用-I指定一个替换字符串{}，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat arg.txt | xargs -I {} ./sk.sh -p {} -l\\n\\n-p aaa -l\\n-p bbb -l\\n-p ccc -l\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"复制所有图片文件到 /data/images 目录下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[ls](#/ls \\\"ls命令\\\") *.jpg | xargs -n1 -I [cp](#/cp \\\"cp命令\\\") {} /data/images\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"xargs结合\"), _c('a', {\n    attrs: {\n      \"href\": \"#/find\",\n      \"title\": \"find命令\"\n    }\n  }, [_vm._v(\"find\")]), _vm._v(\"使用\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/rm\",\n      \"title\": \"rm命令\"\n    }\n  }, [_vm._v(\"rm\")]), _vm._v(\" 删除太多的文件时候，可能得到一个错误信息：/bin/rm Argument list too long. 用xargs去避免这个问题：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -[type](#/type \\\"type命令\\\") f -name \\\"*.log\\\" -print0 | xargs -0 rm -f\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs -0将\\\\0作为定界符。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"统计一个源代码目录中所有\"), _c('a', {\n    attrs: {\n      \"href\": \"#/php\",\n      \"title\": \"php命令\"\n    }\n  }, [_vm._v(\"php\")]), _vm._v(\"文件的行数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -type f -name \\\"*.php\\\" -print0 | xargs -0 [wc](#/wc \\\"wc命令\\\") -l\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查找所有的jpg 文件，并且压缩它们：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -type f -name \\\"*.jpg\\\" -print | xargs [tar](#/tar \\\"tar命令\\\") -czvf images.tar.gz\\n\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"xargs其他应用\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假如你有一个文件包含了很多你希望下载的URL，你能够使用xargs下载所有链接：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat url-list.txt | xargs [wget](#/wget \\\"wget命令\\\") -c\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"子Shell（Subshells）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"运行一个shell脚本时会启动另一个命令解释器.，就好像你的命令是在命令行提示下被解释的一样，类似于批处理文件里的一系列命令。每个shell脚本有效地运行在父shell(parent shell)的一个子进程里。这个父shell是指在一个控制终端或在一个xterm窗口中给你命令指示符的进程。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cmd1 | ( cmd2; cmd3; cmd4 ) | cmd5\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果cmd2 是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cd\",\n      \"title\": \"cd命令\"\n    }\n  }, [_vm._v(\"cd\")]), _vm._v(\" /，那么就会改变子Shell的工作目录，这种改变只是局限于子shell内部，cmd5则完全不知道工作目录发生的变化。子shell是嵌在圆括号()内部的命令序列，子Shell内部定义的变量为局部变量。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"子shell可用于为一组命令设定临时的环境变量：\")]), _vm._v(\" \"), _c('pre', {\n    staticClass: \"PROGRAMLISTING\"\n  }, [_vm._v(\"COMMAND1\\nCOMMAND2\\nCOMMAND3\\n(\\n  IFS=:\\n  PATH=/bin\\n  [unset](#/unset \\\"unset命令\\\") TERMINFO\\n  [set](#/set \\\"set命令\\\") -C\\n  shift 5\\n  COMMAND4\\n  COMMAND5\\n  [exit](#/exit \\\"exit命令\\\") 3 # 只是从子shell退出。\\n)\\n# 父shell不受影响，变量值没有更改。\\nCOMMAND6\\nCOMMAND7\\n```\")])])\n}]}\n\n/***/ }),\n\n/***/ 529:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1117);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/29.cbcbf5d857b4a8224ef1.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-67d3c4f2\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./xargs.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/xargs.md\n// module id = 1117\n// module chunks = 29","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"xargs命令\")]), _vm._v(\"是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/echo\",\n      \"title\": \"echo命令\"\n    }\n  }, [_vm._v(\"echo\")]), _vm._v(\"，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"xargs命令用法\")]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs用作替换工具，读取输入数据重新格式化后输出。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"定义一个测试文件，内有多行文本数据：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") [test](#/test \\\"test命令\\\").txt\\n\\na b c d e f g\\nh i j k l m n\\no p q\\nr s t\\nu v [w](#/w \\\"w命令\\\") x y z\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"多行输入单行输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat test.txt | xargs\\n\\na b c d e f g h i j k l m n o p q r s t u v w x y z\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-n选项\")]), _vm._v(\"多行输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat test.txt | xargs -n3\\n\\na b c\\nd e f\\ng h i\\nj k l\\nm n o\\np q r\\ns t u\\nv w x\\ny z\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"-d选项\")]), _vm._v(\"可以自定义一个定界符：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"nameXnameXnameXname\\\" | xargs -dX\\n\\nname name name name\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"结合**-n选项**使用：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"nameXnameXnameXname\\\" | xargs -dX -n2\\n\\nname name\\nname name\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"读取stdin，将格式化后的参数传递给命令\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假设一个命令为 sk.sh 和一个保存参数的文件arg.txt：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#!/bin/bash\\n#sk.sh命令内容，打印出所有参数。\\n\\necho $*\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"arg.txt文件内容：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat arg.txt\\n\\naaa\\nbbb\\nccc\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs的一个\"), _c('strong', [_vm._v(\"选项-I\")]), _vm._v(\"，使用-I指定一个替换字符串{}，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat arg.txt | xargs -I {} ./sk.sh -p {} -l\\n\\n-p aaa -l\\n-p bbb -l\\n-p ccc -l\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"复制所有图片文件到 /data/images 目录下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[ls](#/ls \\\"ls命令\\\") *.jpg | xargs -n1 -I [cp](#/cp \\\"cp命令\\\") {} /data/images\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"xargs结合\"), _c('a', {\n    attrs: {\n      \"href\": \"#/find\",\n      \"title\": \"find命令\"\n    }\n  }, [_vm._v(\"find\")]), _vm._v(\"使用\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/rm\",\n      \"title\": \"rm命令\"\n    }\n  }, [_vm._v(\"rm\")]), _vm._v(\" 删除太多的文件时候，可能得到一个错误信息：/bin/rm Argument list too long. 用xargs去避免这个问题：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -[type](#/type \\\"type命令\\\") f -name \\\"*.log\\\" -print0 | xargs -0 rm -f\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"xargs -0将\\\\0作为定界符。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"统计一个源代码目录中所有\"), _c('a', {\n    attrs: {\n      \"href\": \"#/php\",\n      \"title\": \"php命令\"\n    }\n  }, [_vm._v(\"php\")]), _vm._v(\"文件的行数：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -type f -name \\\"*.php\\\" -print0 | xargs -0 [wc](#/wc \\\"wc命令\\\") -l\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"查找所有的jpg 文件，并且压缩它们：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"find . -type f -name \\\"*.jpg\\\" -print | xargs [tar](#/tar \\\"tar命令\\\") -czvf images.tar.gz\\n\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"xargs其他应用\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"假如你有一个文件包含了很多你希望下载的URL，你能够使用xargs下载所有链接：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cat url-list.txt | xargs [wget](#/wget \\\"wget命令\\\") -c\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"子Shell（Subshells）\")]), _vm._v(\" \"), _c('p', [_vm._v(\"运行一个shell脚本时会启动另一个命令解释器.，就好像你的命令是在命令行提示下被解释的一样，类似于批处理文件里的一系列命令。每个shell脚本有效地运行在父shell(parent shell)的一个子进程里。这个父shell是指在一个控制终端或在一个xterm窗口中给你命令指示符的进程。\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"cmd1 | ( cmd2; cmd3; cmd4 ) | cmd5\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"如果cmd2 是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/cd\",\n      \"title\": \"cd命令\"\n    }\n  }, [_vm._v(\"cd\")]), _vm._v(\" /，那么就会改变子Shell的工作目录，这种改变只是局限于子shell内部，cmd5则完全不知道工作目录发生的变化。子shell是嵌在圆括号()内部的命令序列，子Shell内部定义的变量为局部变量。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"子shell可用于为一组命令设定临时的环境变量：\")]), _vm._v(\" \"), _c('pre', {\n    staticClass: \"PROGRAMLISTING\"\n  }, [_vm._v(\"COMMAND1\\nCOMMAND2\\nCOMMAND3\\n(\\n  IFS=:\\n  PATH=/bin\\n  [unset](#/unset \\\"unset命令\\\") TERMINFO\\n  [set](#/set \\\"set命令\\\") -C\\n  shift 5\\n  COMMAND4\\n  COMMAND5\\n  [exit](#/exit \\\"exit命令\\\") 3 # 只是从子shell退出。\\n)\\n# 父shell不受影响，变量值没有更改。\\nCOMMAND6\\nCOMMAND7\\n```\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-67d3c4f2\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/xargs.md\n// module id = 1486\n// module chunks = 29","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./xargs.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/xargs.md\n// module id = 529\n// module chunks = 29"],"sourceRoot":""}