{"version":3,"sources":["webpack:///static/js/377.37fffa05a1563ffc10e9.js","webpack:///./command/grep.md?a9c8","webpack:///./command/grep.md","webpack:///./command/grep.md?77df"],"names":["webpackJsonp","1568","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","174","__webpack_require__","763","Component"],"mappings":"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","file":"static/js/377.37fffa05a1563ffc10e9.js","sourcesContent":["webpackJsonp([377],{\n\n/***/ 1568:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"grep\")]), _vm._v(\"（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**-a** 不要忽略二进制数据。\\n**-A**<显示列数> 除了显示符合范本样式的那一行之外，并显示该行之后的内容。\\n**-b** 在显示符合范本样式的那一行之外，并显示该行之前的内容。\\n**-c** 计算符合范本样式的列数。\\n**-C<显示列数>或-<显示列数>**  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。\\n**-d<进行动作>** 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。\\n**-e<范本样式>** 指定字符串作为查找文件内容的范本样式。\\n**-E** 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。\\n**-f<范本文件>** 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。\\n**-F** 将范本样式视为固定字符串的列表。\\n**-G** 将范本样式视为普通的表示法来使用。\\n**-h** 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。\\n**-H** 在显示符合范本样式的那一列之前，标示该列的文件名称。\\n**-i** 胡列字符大小写的差别。\\n**-l** 列出文件内容符合指定的范本样式的文件名称。\\n**-L** 列出文件内容不符合指定的范本样式的文件名称。\\n**-n** 在显示符合范本样式的那一列之前，标示出该列的编号。\\n**-q** 不显示任何信息。\\n**-R/-r** 此参数的效果和指定“-d recurse”参数相同。\\n**-s** 不显示错误信息。\\n**-v** 反转查找。\\n**-[w](#/w \\\"w命令\\\")** 只显示全字符合的列。\\n**-x** 只显示全列符合的列。\\n**-y** 此参数效果跟“-i”相同。\\n**-o** 只输出文件中匹配到的部分。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"grep命令常见用法\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在文件中搜索一个单词，命令会返回一个包含**“match_pattern”**的文本行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep match_pattern file_name\\ngrep \\\"match_pattern\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在多个文件中查找：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"match_pattern\\\" file_1 file_2 file_3 ...\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出除之外的所有行 \"), _c('strong', [_vm._v(\"-v\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -v \\\"match_pattern\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"标记匹配颜色 \"), _c('strong', [_vm._v(\"--color=auto\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"match_pattern\\\" file_name --color=auto\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用正则表达式 \"), _c('strong', [_vm._v(\"-E\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -E \\\"[1-9]+\\\"\\n或\\n[egrep](#/egrep \\\"egrep命令\\\") \\\"[1-9]+\\\"\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"只输出文件中匹配到的部分 \"), _c('strong', [_vm._v(\"-o\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") this is a [test](#/test \\\"test命令\\\") line. | grep -o -E \\\"[a-z]+\\\\.\\\"\\nline.\\n\\necho this is a test line. | egrep -o \\\"[a-z]+\\\\.\\\"\\nline.\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"统计文件或者文本中包含匹配字符串的行数 \"), _c('strong', [_vm._v(\"-c\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -c \\\"text\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出包含匹配字符串的行数 \"), _c('strong', [_vm._v(\"-n\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"text\\\" -n file_name\\n或\\n[cat](#/cat \\\"cat命令\\\") file_name | grep \\\"text\\\" -n\\n\\n#多个文件\\ngrep \\\"text\\\" -n file_1 file_2\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印样式匹配所位于的字符或字节偏移：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo gun is not unix | grep -b -o \\\"not\\\"\\n7:not\\n\\n#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 **-b -o** 一般总是配合使用。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索多个文件并查找匹配文本在哪些文件中：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -l \\\"text\\\" file1 file2 file3...\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"grep递归搜索文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在多级目录中对文本进行递归搜索：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"text\\\" . -r -n\\n# .表示当前目录。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"忽略匹配样式中的字符大小写：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"hello world\\\" | grep -i \\\"HELLO\\\"\\nhello\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"选项 \"), _c('strong', [_vm._v(\"-e\")]), _vm._v(\" 制动多个匹配样式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is a text line | grep -e \\\"is\\\" -e \\\"line\\\" -o\\nis\\nline\\n\\n#也可以使用**-f**选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。\\ncat patfile\\naaa\\nbbb\\n\\necho aaa bbb ccc ddd eee | grep -f patfile -o\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在grep搜索结果中包括或者排除指定文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#只在目录中所有的.[php](#/php \\\"php命令\\\")和.html文件中递归搜索字符\\\"main()\\\"\\ngrep \\\"main()\\\" . -r --include *.{php,html}\\n\\n#在搜索结果中排除所有README文件\\ngrep \\\"main()\\\" . -r --exclude \\\"README\\\"\\n\\n#在搜索结果中排除filelist文件列表里的文件\\ngrep \\\"main()\\\" . -r --exclude-from filelist\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用0值字节后缀的grep与\"), _c('a', {\n    attrs: {\n      \"href\": \"#/xargs\",\n      \"title\": \"xargs命令\"\n    }\n  }, [_vm._v(\"xargs\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#测试文件：\\necho \\\"aaa\\\" > file1\\necho \\\"bbb\\\" > file2\\necho \\\"aaa\\\" > file3\\n\\ngrep \\\"aaa\\\" [file](#/file \\\"file命令\\\")* -lZ | xargs -0 [rm](#/rm \\\"rm命令\\\")\\n\\n#执行后会删除file1和file3，grep输出用-Z选项来指定以0值字节作为终结符文件名（\\\\0），xargs -0 读取输入并用0值字节终结符分隔文件名，然后删除匹配文件，-Z通常和-l结合使用。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"grep静默输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -q \\\"test\\\" filename\\n\\n#不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印出匹配文本之前或者之后的行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#显示匹配某个结果之后的3行，使用 -A 选项：\\n[seq](#/seq \\\"seq命令\\\") 10 | grep \\\"5\\\" -A 3\\n5\\n6\\n7\\n8\\n\\n#显示匹配某个结果之前的3行，使用 -B 选项：\\nseq 10 | grep \\\"5\\\" -B 3\\n2\\n3\\n4\\n5\\n\\n#显示匹配某个结果的前三行和后三行，使用 -C 选项：\\nseq 10 | grep \\\"5\\\" -C 3\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\\n#如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：\\necho -e \\\"a\\\\nb\\\\[nc](#/nc_netcat \\\"nc命令\\\")\\\\na\\\\nb\\\\nc\\\" | grep a -A 1\\na\\nb\\n--\\na\\nb\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 174:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(763);\n\n/***/ }),\n\n/***/ 763:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1568),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/377.37fffa05a1563ffc10e9.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"grep\")]), _vm._v(\"（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"**-a** 不要忽略二进制数据。\\n**-A**<显示列数> 除了显示符合范本样式的那一行之外，并显示该行之后的内容。\\n**-b** 在显示符合范本样式的那一行之外，并显示该行之前的内容。\\n**-c** 计算符合范本样式的列数。\\n**-C<显示列数>或-<显示列数>**  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。\\n**-d<进行动作>** 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。\\n**-e<范本样式>** 指定字符串作为查找文件内容的范本样式。\\n**-E** 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。\\n**-f<范本文件>** 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。\\n**-F** 将范本样式视为固定字符串的列表。\\n**-G** 将范本样式视为普通的表示法来使用。\\n**-h** 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。\\n**-H** 在显示符合范本样式的那一列之前，标示该列的文件名称。\\n**-i** 胡列字符大小写的差别。\\n**-l** 列出文件内容符合指定的范本样式的文件名称。\\n**-L** 列出文件内容不符合指定的范本样式的文件名称。\\n**-n** 在显示符合范本样式的那一列之前，标示出该列的编号。\\n**-q** 不显示任何信息。\\n**-R/-r** 此参数的效果和指定“-d recurse”参数相同。\\n**-s** 不显示错误信息。\\n**-v** 反转查找。\\n**-[w](#/w \\\"w命令\\\")** 只显示全字符合的列。\\n**-x** 只显示全列符合的列。\\n**-y** 此参数效果跟“-i”相同。\\n**-o** 只输出文件中匹配到的部分。\\n\")])]), _vm._v(\" \"), _c('h2', [_vm._v(\"grep命令常见用法\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在文件中搜索一个单词，命令会返回一个包含**“match_pattern”**的文本行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep match_pattern file_name\\ngrep \\\"match_pattern\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在多个文件中查找：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"match_pattern\\\" file_1 file_2 file_3 ...\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出除之外的所有行 \"), _c('strong', [_vm._v(\"-v\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -v \\\"match_pattern\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"标记匹配颜色 \"), _c('strong', [_vm._v(\"--color=auto\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"match_pattern\\\" file_name --color=auto\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用正则表达式 \"), _c('strong', [_vm._v(\"-E\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -E \\\"[1-9]+\\\"\\n或\\n[egrep](#/egrep \\\"egrep命令\\\") \\\"[1-9]+\\\"\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"只输出文件中匹配到的部分 \"), _c('strong', [_vm._v(\"-o\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[echo](#/echo \\\"echo命令\\\") this is a [test](#/test \\\"test命令\\\") line. | grep -o -E \\\"[a-z]+\\\\.\\\"\\nline.\\n\\necho this is a test line. | egrep -o \\\"[a-z]+\\\\.\\\"\\nline.\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"统计文件或者文本中包含匹配字符串的行数 \"), _c('strong', [_vm._v(\"-c\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -c \\\"text\\\" file_name\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输出包含匹配字符串的行数 \"), _c('strong', [_vm._v(\"-n\")]), _vm._v(\" 选项：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"text\\\" -n file_name\\n或\\n[cat](#/cat \\\"cat命令\\\") file_name | grep \\\"text\\\" -n\\n\\n#多个文件\\ngrep \\\"text\\\" -n file_1 file_2\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印样式匹配所位于的字符或字节偏移：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo gun is not unix | grep -b -o \\\"not\\\"\\n7:not\\n\\n#一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 **-b -o** 一般总是配合使用。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"搜索多个文件并查找匹配文本在哪些文件中：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -l \\\"text\\\" file1 file2 file3...\\n\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"grep递归搜索文件\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在多级目录中对文本进行递归搜索：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep \\\"text\\\" . -r -n\\n# .表示当前目录。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"忽略匹配样式中的字符大小写：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo \\\"hello world\\\" | grep -i \\\"HELLO\\\"\\nhello\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"选项 \"), _c('strong', [_vm._v(\"-e\")]), _vm._v(\" 制动多个匹配样式：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"echo this is a text line | grep -e \\\"is\\\" -e \\\"line\\\" -o\\nis\\nline\\n\\n#也可以使用**-f**选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。\\ncat patfile\\naaa\\nbbb\\n\\necho aaa bbb ccc ddd eee | grep -f patfile -o\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在grep搜索结果中包括或者排除指定文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#只在目录中所有的.[php](#/php \\\"php命令\\\")和.html文件中递归搜索字符\\\"main()\\\"\\ngrep \\\"main()\\\" . -r --include *.{php,html}\\n\\n#在搜索结果中排除所有README文件\\ngrep \\\"main()\\\" . -r --exclude \\\"README\\\"\\n\\n#在搜索结果中排除filelist文件列表里的文件\\ngrep \\\"main()\\\" . -r --exclude-from filelist\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用0值字节后缀的grep与\"), _c('a', {\n    attrs: {\n      \"href\": \"#/xargs\",\n      \"title\": \"xargs命令\"\n    }\n  }, [_vm._v(\"xargs\")]), _vm._v(\"：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#测试文件：\\necho \\\"aaa\\\" > file1\\necho \\\"bbb\\\" > file2\\necho \\\"aaa\\\" > file3\\n\\ngrep \\\"aaa\\\" [file](#/file \\\"file命令\\\")* -lZ | xargs -0 [rm](#/rm \\\"rm命令\\\")\\n\\n#执行后会删除file1和file3，grep输出用-Z选项来指定以0值字节作为终结符文件名（\\\\0），xargs -0 读取输入并用0值字节终结符分隔文件名，然后删除匹配文件，-Z通常和-l结合使用。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"grep静默输出：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"grep -q \\\"test\\\" filename\\n\\n#不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。\\n\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"打印出匹配文本之前或者之后的行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"#显示匹配某个结果之后的3行，使用 -A 选项：\\n[seq](#/seq \\\"seq命令\\\") 10 | grep \\\"5\\\" -A 3\\n5\\n6\\n7\\n8\\n\\n#显示匹配某个结果之前的3行，使用 -B 选项：\\nseq 10 | grep \\\"5\\\" -B 3\\n2\\n3\\n4\\n5\\n\\n#显示匹配某个结果的前三行和后三行，使用 -C 选项：\\nseq 10 | grep \\\"5\\\" -C 3\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\\n#如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：\\necho -e \\\"a\\\\nb\\\\[nc](#/nc_netcat \\\"nc命令\\\")\\\\na\\\\nb\\\\nc\\\" | grep a -A 1\\na\\nb\\n--\\na\\nb\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-846bb0cc\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/grep.md\n// module id = 1568\n// module chunks = 377","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./grep.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/grep.md\n// module id = 174\n// module chunks = 377","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-846bb0cc\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./grep.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/grep.md\n// module id = 763\n// module chunks = 377"],"sourceRoot":""}