{"version":3,"sources":["webpack:///static/js/477.d862bef739f56433e729.js","webpack:///./command/chroot.md?743a","webpack:///./command/chroot.md?5129","webpack:///./command/chroot.md"],"names":["webpackJsonp","1520","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","href","title","v-pre","661","__webpack_require__","Component","73"],"mappings":"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","file":"static/js/477.d862bef739f56433e729.js","sourcesContent":["webpackJsonp([477],{\n\n/***/ 1520:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"chroot命令\")]), _vm._v(\"用来在指定的根目录下运行指令。chroot，即 change root directory （更改 root 目录）。在 linux 系统中，系统默认的目录结构都是以\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"位置。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在经过 chroot 命令之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下（即被指定的新的位置）的目录结构和文件，因此它带来的好处大致有以下3个：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"增加了系统的安全性，限制了用户的权力：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (\"), _c('a', {\n    attrs: {\n      \"href\": \"#/login\",\n      \"title\": \"login命令\"\n    }\n  }, [_vm._v(\"login\")]), _vm._v(\") 前使用 chroot，以此达到用户不能访问一些特定的文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"建立一个与原系统隔离的系统目录结构，方便用户的开发：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"切换系统的根目录位置，引导 Linux 系统启动以及急救系统等：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"chroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/init\",\n      \"title\": \"init命令\"\n    }\n  }, [_vm._v(\"init\")]), _vm._v(\"。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"--[help](#/help \\\"help命令\\\")：在线帮助；\\n--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"目录：指定新的根目录；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"指令：指定要执行的指令。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将target作为根目录（运行其中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/sh\")]), _vm._v(\"）:\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot target /bin/sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里,target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样，将会进入一个shell界面，这个shell以target为根。运行\"), _c('a', {\n    attrs: {\n      \"href\": \"#/exit\",\n      \"title\": \"exit命令\"\n    }\n  }, [_vm._v(\"exit\")]), _vm._v(\"退出该shell又返回原来的本机环境了，也可以使用Ctrl+D。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"根用户才行\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果直接chroot target默认寻找target的/bin/bash.这会以target作为根目录\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将target作为根目录(运行其中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/[ls](#/ls \\\"ls命令\\\")\")]), _vm._v(\"):\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot target /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里，target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样运行的是target中的ls（不是本机的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/ls\")]), _vm._v(\"），然后返回立即本机的目录环境。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，自己在本地编译一个程序生成a.out之后，拷进\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"target/bin/\")]), _vm._v(\"中这样运行却不行,因为它包含了动态连接的库，需要用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ldd\",\n      \"title\": \"ldd命令\"\n    }\n  }, [_vm._v(\"ldd\")]), _vm._v(\"查看a.out需要那些动态库，将这些库拷贝到新根的对应路径下才能执行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"用chroot运行自己编译的一个程序：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"准备chroot的根目录：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[mkdir](#/mkdir \\\"mkdir命令\\\") newRoot\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编译自己的程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[gcc](#/gcc \\\"gcc命令\\\") main.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里main.c生成a.out，功能是输出hello。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"查看程序需要的库：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ldd a.out\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入之后，输出如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"linux-gate.so.1 = &gt;  (0xb8034000)\\nlibc.so.6 = &gt; /lib/tls/i686/cmov/libc.so.6 (0xb7eab000)\\n/lib/[ld](#/ld \\\"ld命令\\\")-linux.so.2 (0xb801a000)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将程序需要的库和程序拷贝到新根目录下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cp](#/cp \\\"cp命令\\\") a.out newRoot\\nmkdir newRoot/lib\\ncp /lib/tls/i686/cmov/libc.so.6 newRoot/lib\\ncp /lib/ld-linux.so.2 newRoot/lib\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里newRoot内容将如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"a.out lib/\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用chroot运行自己的程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[su](#/su \\\"su命令\\\")\\nchroot newRoot /a.out\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这样就能够正确运行a.out了，因为a.out使用到了其他的动态连接库，所以需要将库拷贝到newRoot中，如果没有其他库那么直接拷贝a.out就能运行。例如静态编译后的busybox，其安装目录中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/busybox\")]), _vm._v(\"就没有依赖其他库。\")])])\n}]}\n\n/***/ }),\n\n/***/ 661:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1520),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 73:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(661);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/477.d862bef739f56433e729.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"chroot命令\")]), _vm._v(\"用来在指定的根目录下运行指令。chroot，即 change root directory （更改 root 目录）。在 linux 系统中，系统默认的目录结构都是以\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/\")]), _vm._v(\"位置。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"在经过 chroot 命令之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下（即被指定的新的位置）的目录结构和文件，因此它带来的好处大致有以下3个：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"增加了系统的安全性，限制了用户的权力：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (\"), _c('a', {\n    attrs: {\n      \"href\": \"#/login\",\n      \"title\": \"login命令\"\n    }\n  }, [_vm._v(\"login\")]), _vm._v(\") 前使用 chroot，以此达到用户不能访问一些特定的文件。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"建立一个与原系统隔离的系统目录结构，方便用户的开发：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"切换系统的根目录位置，引导 Linux 系统启动以及急救系统等：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"chroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/init\",\n      \"title\": \"init命令\"\n    }\n  }, [_vm._v(\"init\")]), _vm._v(\"。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"--[help](#/help \\\"help命令\\\")：在线帮助；\\n--version：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"目录：指定新的根目录；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"指令：指定要执行的指令。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"将target作为根目录（运行其中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/sh\")]), _vm._v(\"）:\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot target /bin/sh\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里,target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样，将会进入一个shell界面，这个shell以target为根。运行\"), _c('a', {\n    attrs: {\n      \"href\": \"#/exit\",\n      \"title\": \"exit命令\"\n    }\n  }, [_vm._v(\"exit\")]), _vm._v(\"退出该shell又返回原来的本机环境了，也可以使用Ctrl+D。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意：\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"根用户才行\")]), _vm._v(\" \"), _c('li', [_vm._v(\"如果直接chroot target默认寻找target的/bin/bash.这会以target作为根目录\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将target作为根目录(运行其中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/[ls](#/ls \\\"ls命令\\\")\")]), _vm._v(\"):\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"chroot target /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里，target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样运行的是target中的ls（不是本机的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/ls\")]), _vm._v(\"），然后返回立即本机的目录环境。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"注意，自己在本地编译一个程序生成a.out之后，拷进\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"target/bin/\")]), _vm._v(\"中这样运行却不行,因为它包含了动态连接的库，需要用\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ldd\",\n      \"title\": \"ldd命令\"\n    }\n  }, [_vm._v(\"ldd\")]), _vm._v(\"查看a.out需要那些动态库，将这些库拷贝到新根的对应路径下才能执行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"用chroot运行自己编译的一个程序：\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"准备chroot的根目录：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[mkdir](#/mkdir \\\"mkdir命令\\\") newRoot\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"编译自己的程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[gcc](#/gcc \\\"gcc命令\\\") main.c\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里main.c生成a.out，功能是输出hello。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"查看程序需要的库：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ldd a.out\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"输入之后，输出如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"linux-gate.so.1 = &gt;  (0xb8034000)\\nlibc.so.6 = &gt; /lib/tls/i686/cmov/libc.so.6 (0xb7eab000)\\n/lib/[ld](#/ld \\\"ld命令\\\")-linux.so.2 (0xb801a000)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"将程序需要的库和程序拷贝到新根目录下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cp](#/cp \\\"cp命令\\\") a.out newRoot\\nmkdir newRoot/lib\\ncp /lib/tls/i686/cmov/libc.so.6 newRoot/lib\\ncp /lib/ld-linux.so.2 newRoot/lib\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这里newRoot内容将如下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"a.out lib/\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"使用chroot运行自己的程序：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[su](#/su \\\"su命令\\\")\\nchroot newRoot /a.out\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这样就能够正确运行a.out了，因为a.out使用到了其他的动态连接库，所以需要将库拷贝到newRoot中，如果没有其他库那么直接拷贝a.out就能运行。例如静态编译后的busybox，其安装目录中的\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/bin/busybox\")]), _vm._v(\"就没有依赖其他库。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-71c60047\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/chroot.md\n// module id = 1520\n// module chunks = 477","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-71c60047\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./chroot.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/chroot.md\n// module id = 661\n// module chunks = 477","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./chroot.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/chroot.md\n// module id = 73\n// module chunks = 477"],"sourceRoot":""}