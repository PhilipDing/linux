{"version":3,"sources":["webpack:///static/js/461.35df636187e618f13513.js","webpack:///./command/csplit.md?5a40","webpack:///./command/csplit.md?cc23","webpack:///./command/csplit.md"],"names":["webpackJsonp","1493","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","attrs","href","title","pre","v-pre","678","__webpack_require__","Component","89"],"mappings":"AAAAA,cAAc,MAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAgBC,OAAA,WAAmB,GAAAC,GAAAC,KAAaC,EAAAF,EAAAG,cAA0BH,GAAAI,MAAAC,EAC1E,OAAAL,GAAAM,GAAA,IACCC,iBAAA,WAA+B,GAAAP,GAAAC,KAAaC,EAAAF,EAAAG,eAA0BE,EAAAL,EAAAI,MAAAC,IAAAH,CACvE,OAAAG,GAAA,WAAAA,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,uEAAAH,EAAA,KACAI,OACAC,KAAA,UACAC,MAAA,aAEGX,EAAAQ,GAAA,WAAAR,EAAAQ,GAAA,wDAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,wBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,gbAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAA,EAAA,MAAAL,EAAAQ,GAAA,mBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,yBAAAR,EAAAQ,GAAA,KAAAH,EAAA,MAAAL,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,uBAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,kVAAAR,EAAAQ,GAAA,KAAAH,EAAA,KAAAL,EAAAQ,GAAA,qFAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACHO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,gOAAmGR,EAAAQ,GAAA,KAAAH,EAAA,KAAAA,EAAA,UAAAL,EAAAQ,GAAA,eAAAR,EAAAQ,GAAA,KAAAH,EAAA,OACtGO,KAAA,IACGP,EAAA,QACHI,OACAI,QAAA,MAEGb,EAAAQ,GAAA,kVDUGM,IACA,SAAUjB,EAAQC,EAASiB,GEjDjC,GAAAC,GAAAD,EAAA,GAEA,KAEAA,EAAA,MAEA,KAEA,KAEA,KAGAlB,GAAAC,QAAAkB,EAAAlB,SFwDMmB,GACA,SAAUpB,EAAQC,EAASiB,GGtEjClB,EAAAC,QAAAiB,EAAA","file":"static/js/461.35df636187e618f13513.js","sourcesContent":["webpackJsonp([461],{\n\n/***/ 1493:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"csplit命令\")]), _vm._v(\"用于将一个大文件分割成小的碎片，并且将分割后的每个碎片保存成一个文件。碎片文件的命名类似“xx00”，“xx01”。csplit命令是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/split\",\n      \"title\": \"split命令\"\n    }\n  }, [_vm._v(\"split\")]), _vm._v(\"的一个变体，split只能够根据文件大小或行数来分割，但csplit能够根据文件本身特点来分割文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"csplit(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<输出格式>或--suffix-format=<输出格式>：预设的输出格式其文件名称为xx00，xx01等，用户可以通过改变<输出格式>来改变输出的文件名；\\n-f<输出字首字符串>或--prefix=<输出字首字符串>：预设的输出字首字符串其文件名为xx00，xx01等，如果制定输出字首字符串为“hello”，则输出的文件名称会变成hello00，hello、01......\\n-k或--keep-files：保留文件，就算发生错误或中断执行，与不能删除已经输出保存的文件；\\n-n<输出文件名位数>或--digits=<输出文件名位数>：预设的输出文件名位数其文件名称为xx00，xx01......如果用户指定输出文件名位数为“3”，则输出的文件名称会变成xx000，xx001等；\\n-q或-s或--quiet或——silent：不显示指令执行过程；\\n-z或--elide-empty-files：删除长度为0 Byte文件。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"文件：指定要分割的原文件；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"模式：指定要分割文件时的匹配模式。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"示例测试文件 server.log\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") server.log\\nSERVER-1\\n[con] 10.10.10.1 suc\\n[con] 10.10.10.2 fai\\n[dis] 10.10.10.3 pen\\n[con] 10.10.10.4 suc\\nSERVER-2\\n[con] 10.10.10.5 suc\\n[con] 10.10.10.6 fai\\n[dis] 10.10.10.7 pen\\n[con] 10.10.10.8 suc\\nSERVER-3\\n[con] 10.10.10.9 suc\\n[con] 10.10.10.10 fai\\n[dis] 10.10.10.11 pen\\n[con] 10.10.10.12 suc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"需要将server.log分割成server1.log、server2.log、server3.log，这些文件的内容分别取自原文件中不同的SERVER部分：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost split]# csplit server.log /SERVER/ -n2 -s {*} -f server -b \\\"%02d.log\\\"; [rm](#/rm \\\"rm命令\\\") server00.log\\n[root@localhost split]# [ls](#/ls \\\"ls命令\\\")\\nserver01.log  server02.log  server03.log  server.log\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"命令详细说明：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"/[正则表达式]/   #匹配文本样式，比如/SERVER/，从第一行到包含SERVER的匹配行。\\n{*}     #表示根据匹配重复执行分割，直到文件尾停止，使用{整数}的形式指定分割执行的次数。\\n-s      #静默模式，不打印其他信息。\\n-n      #指定分割后的文件名后缀的数字个数。比如01、02、03等。\\n-f      #指定分割后的文件名前缀。\\n-b      #指定后缀格式。比如%02d.log，类似于C语言中的[printf](#/printf \\\"printf命令\\\")参数格式。\\nrm server00.log    #是删除第一个文件，因为分割后的的第一个文件没有内容，匹配的单词就位于文件的第一行中。\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 678:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1493),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 89:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(678);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/461.35df636187e618f13513.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"csplit命令\")]), _vm._v(\"用于将一个大文件分割成小的碎片，并且将分割后的每个碎片保存成一个文件。碎片文件的命名类似“xx00”，“xx01”。csplit命令是\"), _c('a', {\n    attrs: {\n      \"href\": \"#/split\",\n      \"title\": \"split命令\"\n    }\n  }, [_vm._v(\"split\")]), _vm._v(\"的一个变体，split只能够根据文件大小或行数来分割，但csplit能够根据文件本身特点来分割文件。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"csplit(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b<输出格式>或--suffix-format=<输出格式>：预设的输出格式其文件名称为xx00，xx01等，用户可以通过改变<输出格式>来改变输出的文件名；\\n-f<输出字首字符串>或--prefix=<输出字首字符串>：预设的输出字首字符串其文件名为xx00，xx01等，如果制定输出字首字符串为“hello”，则输出的文件名称会变成hello00，hello、01......\\n-k或--keep-files：保留文件，就算发生错误或中断执行，与不能删除已经输出保存的文件；\\n-n<输出文件名位数>或--digits=<输出文件名位数>：预设的输出文件名位数其文件名称为xx00，xx01......如果用户指定输出文件名位数为“3”，则输出的文件名称会变成xx000，xx001等；\\n-q或-s或--quiet或——silent：不显示指令执行过程；\\n-z或--elide-empty-files：删除长度为0 Byte文件。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"文件：指定要分割的原文件；\")]), _vm._v(\" \"), _c('li', [_vm._v(\"模式：指定要分割文件时的匹配模式。\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"示例测试文件 server.log\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[cat](#/cat \\\"cat命令\\\") server.log\\nSERVER-1\\n[con] 10.10.10.1 suc\\n[con] 10.10.10.2 fai\\n[dis] 10.10.10.3 pen\\n[con] 10.10.10.4 suc\\nSERVER-2\\n[con] 10.10.10.5 suc\\n[con] 10.10.10.6 fai\\n[dis] 10.10.10.7 pen\\n[con] 10.10.10.8 suc\\nSERVER-3\\n[con] 10.10.10.9 suc\\n[con] 10.10.10.10 fai\\n[dis] 10.10.10.11 pen\\n[con] 10.10.10.12 suc\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"需要将server.log分割成server1.log、server2.log、server3.log，这些文件的内容分别取自原文件中不同的SERVER部分：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost split]# csplit server.log /SERVER/ -n2 -s {*} -f server -b \\\"%02d.log\\\"; [rm](#/rm \\\"rm命令\\\") server00.log\\n[root@localhost split]# [ls](#/ls \\\"ls命令\\\")\\nserver01.log  server02.log  server03.log  server.log\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"命令详细说明：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"/[正则表达式]/   #匹配文本样式，比如/SERVER/，从第一行到包含SERVER的匹配行。\\n{*}     #表示根据匹配重复执行分割，直到文件尾停止，使用{整数}的形式指定分割执行的次数。\\n-s      #静默模式，不打印其他信息。\\n-n      #指定分割后的文件名后缀的数字个数。比如01、02、03等。\\n-f      #指定分割后的文件名前缀。\\n-b      #指定后缀格式。比如%02d.log，类似于C语言中的[printf](#/printf \\\"printf命令\\\")参数格式。\\nrm server00.log    #是删除第一个文件，因为分割后的的第一个文件没有内容，匹配的单词就位于文件的第一行中。\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-65fdc10e\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/csplit.md\n// module id = 1493\n// module chunks = 461","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-65fdc10e\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./csplit.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/csplit.md\n// module id = 678\n// module chunks = 461","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./csplit.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/csplit.md\n// module id = 89\n// module chunks = 461"],"sourceRoot":""}