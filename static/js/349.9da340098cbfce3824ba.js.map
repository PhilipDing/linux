{"version":3,"sources":["webpack:///static/js/349.9da340098cbfce3824ba.js","webpack:///./command/ifconfig.md?6270","webpack:///./command/ifconfig.md","webpack:///./command/ifconfig.md?f065"],"names":["webpackJsonp","1378","module","exports","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","202","__webpack_require__","791","Component"],"mappings":"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","file":"static/js/349.9da340098cbfce3824ba.js","sourcesContent":["webpackJsonp([349],{\n\n/***/ 1378:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ifconfig命令\")]), _vm._v(\"被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"add<地址>：设置网络设备IPv6的[ip](#/ip \\\"ip命令\\\")地址；\\ndel<地址>：删除网络设备IPv6的IP地址；\\ndown：关闭指定的网络设备；\\n<hw<网络设备类型><硬件地址>：设置网络设备的类型与硬件地址；\\nio_addr<I/O地址>：设置网络设备的I/O地址；\\nirq<IRQ地址>：设置网络设备的IRQ；\\nmedia<网络媒介类型>：设置网络设备的媒介类型；\\nmem_start<内存地址>：设置网络设备在主内存所占用的起始地址；\\nmetric<数目>：指定在计算数据包的转送次数时，所要加上的数目；\\nmtu<字节>：设置网络设备的MTU；\\nnetmask<子网掩码>：设置网络设备的子网掩码；\\ntunnel<地址>：建立IPv4与IPv6之间的隧道通信地址；\\nup：启动指定的网络设备；\\n-broadcast<地址>：将要送往指定地址的数据包当成广播数据包来处理；\\n-pointopoint<地址>：与指定地址的网络设备建立直接连线，此模式具有保密功能；\\n-promisc：关闭或启动指定网络设备的promiscuous模式；\\nIP地址：指定网络设备的IP地址；\\n网络设备：指定网络设备的名称。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示网络设备信息（激活状态的）：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ifconfig\\neth0      Link encap:Ethernet  HWaddr 00:16:3E:00:1E:51  \\n          inet addr:10.160.7.81  Bcast:10.160.15.255  Mask:255.255.240.0\\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\\n          RX packets:61430830 errors:0 dropped:0 overruns:0 frame:0\\n          TX packets:88534 errors:0 dropped:0 overruns:0 carrier:0\\n          collisions:0 txqueuelen:1000\\n          RX bytes:3607197869 (3.3 GiB)  TX bytes:6115042 (5.8 MiB)\\n\\nlo        Link encap:Local Loopback  \\n          inet addr:127.0.0.1  Mask:255.0.0.0\\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\\n          RX packets:56103 errors:0 dropped:0 overruns:0 frame:0\\n          TX packets:56103 errors:0 dropped:0 overruns:0 carrier:0\\n          collisions:0 txqueuelen:0\\n          RX bytes:5079451 (4.8 MiB)  TX bytes:5079451 (4.8 MiB)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"说明：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"eth0\")]), _vm._v(\"表示第一块网卡，其中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"HWaddr\")]), _vm._v(\"表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"00:16:3E:00:1E:51\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"inet addr\")]), _vm._v(\"用来表示网卡的IP地址，此网卡的IP地址是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"10.160.7.81\")]), _vm._v(\"，广播地址\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Bcast:10.160.15.255\")]), _vm._v(\"，掩码地址\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Mask:255.255.240.0\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"lo\")]), _vm._v(\"是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/httpd\",\n      \"title\": \"httpd命令\"\n    }\n  }, [_vm._v(\"httpd\")]), _vm._v(\"服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第二行：网卡的IP地址、子网、掩码。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第四、五行：接收、发送数据包情况统计。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第七行：接收、发送数据字节数统计信息。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"启动关闭指定网卡：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 up\\nifconfig eth0 down\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"ifconfig eth0 up\")]), _vm._v(\"为启动网卡eth0，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ifconfig eth0 down\")]), _vm._v(\"为关闭网卡eth0。\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ssh\",\n      \"title\": \"ssh命令\"\n    }\n  }, [_vm._v(\"ssh\")]), _vm._v(\"登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"为网卡配置和删除IPv6地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 add 33ffe:3240:800:1005::2/64    #为网卡eth0配置IPv6地址\\nifconfig eth0 del 33ffe:3240:800:1005::2/64    #为网卡eth0删除IPv6地址\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"用ifconfig修改MAC地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 hw ether 00:AA:BB:CC:[dd](#/dd \\\"dd命令\\\"):EE\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"配置IP地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ifconfig eth0 192.168.2.10\\n[root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0\\n[root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"启用和关闭\"), _c('a', {\n    attrs: {\n      \"href\": \"#/arp\",\n      \"title\": \"arp命令\"\n    }\n  }, [_vm._v(\"arp\")]), _vm._v(\"协议：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 arp    #开启网卡eth0 的arp协议\\nifconfig eth0 -arp   #关闭网卡eth0 的arp协议\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"设置最大传输单元：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 mtu 1500    #设置能通过的最大数据包大小为 1500 bytes\\n\")])])])\n}]}\n\n/***/ }),\n\n/***/ 202:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(791);\n\n/***/ }),\n\n/***/ 791:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1378),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/349.9da340098cbfce3824ba.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"ifconfig命令\")]), _vm._v(\"被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"add<地址>：设置网络设备IPv6的[ip](#/ip \\\"ip命令\\\")地址；\\ndel<地址>：删除网络设备IPv6的IP地址；\\ndown：关闭指定的网络设备；\\n<hw<网络设备类型><硬件地址>：设置网络设备的类型与硬件地址；\\nio_addr<I/O地址>：设置网络设备的I/O地址；\\nirq<IRQ地址>：设置网络设备的IRQ；\\nmedia<网络媒介类型>：设置网络设备的媒介类型；\\nmem_start<内存地址>：设置网络设备在主内存所占用的起始地址；\\nmetric<数目>：指定在计算数据包的转送次数时，所要加上的数目；\\nmtu<字节>：设置网络设备的MTU；\\nnetmask<子网掩码>：设置网络设备的子网掩码；\\ntunnel<地址>：建立IPv4与IPv6之间的隧道通信地址；\\nup：启动指定的网络设备；\\n-broadcast<地址>：将要送往指定地址的数据包当成广播数据包来处理；\\n-pointopoint<地址>：与指定地址的网络设备建立直接连线，此模式具有保密功能；\\n-promisc：关闭或启动指定网络设备的promiscuous模式；\\nIP地址：指定网络设备的IP地址；\\n网络设备：指定网络设备的名称。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"显示网络设备信息（激活状态的）：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ifconfig\\neth0      Link encap:Ethernet  HWaddr 00:16:3E:00:1E:51  \\n          inet addr:10.160.7.81  Bcast:10.160.15.255  Mask:255.255.240.0\\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\\n          RX packets:61430830 errors:0 dropped:0 overruns:0 frame:0\\n          TX packets:88534 errors:0 dropped:0 overruns:0 carrier:0\\n          collisions:0 txqueuelen:1000\\n          RX bytes:3607197869 (3.3 GiB)  TX bytes:6115042 (5.8 MiB)\\n\\nlo        Link encap:Local Loopback  \\n          inet addr:127.0.0.1  Mask:255.0.0.0\\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\\n          RX packets:56103 errors:0 dropped:0 overruns:0 frame:0\\n          TX packets:56103 errors:0 dropped:0 overruns:0 carrier:0\\n          collisions:0 txqueuelen:0\\n          RX bytes:5079451 (4.8 MiB)  TX bytes:5079451 (4.8 MiB)\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"说明：\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"eth0\")]), _vm._v(\"表示第一块网卡，其中\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"HWaddr\")]), _vm._v(\"表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"00:16:3E:00:1E:51\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"inet addr\")]), _vm._v(\"用来表示网卡的IP地址，此网卡的IP地址是\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"10.160.7.81\")]), _vm._v(\"，广播地址\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Bcast:10.160.15.255\")]), _vm._v(\"，掩码地址\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"Mask:255.255.240.0\")]), _vm._v(\"。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"lo\")]), _vm._v(\"是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 \"), _c('a', {\n    attrs: {\n      \"href\": \"#/httpd\",\n      \"title\": \"httpd命令\"\n    }\n  }, [_vm._v(\"httpd\")]), _vm._v(\"服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。\")]), _vm._v(\" \"), _c('ul', [_c('li', [_vm._v(\"第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第二行：网卡的IP地址、子网、掩码。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第四、五行：接收、发送数据包情况统计。\")]), _vm._v(\" \"), _c('li', [_vm._v(\"第七行：接收、发送数据字节数统计信息。\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"启动关闭指定网卡：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 up\\nifconfig eth0 down\\n\")])]), _vm._v(\" \"), _c('p', [_c('code', {\n    pre: true\n  }, [_vm._v(\"ifconfig eth0 up\")]), _vm._v(\"为启动网卡eth0，\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"ifconfig eth0 down\")]), _vm._v(\"为关闭网卡eth0。\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ssh\",\n      \"title\": \"ssh命令\"\n    }\n  }, [_vm._v(\"ssh\")]), _vm._v(\"登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"为网卡配置和删除IPv6地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 add 33ffe:3240:800:1005::2/64    #为网卡eth0配置IPv6地址\\nifconfig eth0 del 33ffe:3240:800:1005::2/64    #为网卡eth0删除IPv6地址\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"用ifconfig修改MAC地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 hw ether 00:AA:BB:CC:[dd](#/dd \\\"dd命令\\\"):EE\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"配置IP地址：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[root@localhost ~]# ifconfig eth0 192.168.2.10\\n[root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0\\n[root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"启用和关闭\"), _c('a', {\n    attrs: {\n      \"href\": \"#/arp\",\n      \"title\": \"arp命令\"\n    }\n  }, [_vm._v(\"arp\")]), _vm._v(\"协议：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 arp    #开启网卡eth0 的arp协议\\nifconfig eth0 -arp   #关闭网卡eth0 的arp协议\\n\")])]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"设置最大传输单元：\")])]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"ifconfig eth0 mtu 1500    #设置能通过的最大数据包大小为 1500 bytes\\n\")])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4ad9bdb1\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ifconfig.md\n// module id = 1378\n// module chunks = 349","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ifconfig.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/ifconfig.md\n// module id = 202\n// module chunks = 349","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4ad9bdb1\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./ifconfig.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/ifconfig.md\n// module id = 791\n// module chunks = 349"],"sourceRoot":""}