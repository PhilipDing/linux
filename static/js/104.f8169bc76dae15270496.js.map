{"version":3,"sources":["webpack:///static/js/104.f8169bc76dae15270496.js","webpack:///./command/sudo.md?b47a","webpack:///./command/sudo.md?1b1c","webpack:///./command/sudo.md"],"names":["webpackJsonp","1040","module","exports","__webpack_require__","Component","1340","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","v-pre","href","title","451"],"mappings":"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","file":"static/js/104.f8169bc76dae15270496.js","sourcesContent":["webpackJsonp([104],{\n\n/***/ 1040:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1340),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 1340:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sudo命令\")]), _vm._v(\"用来以其他身份来执行命令，预设的身份为root。在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sudoers\")]), _vm._v(\"中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sudo(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：在后台执行指令；\\n-h：显示帮助；\\n-H：将HOME环境变量设为新身份的HOME环境变量；\\n-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。\\n-l：列出目前用户可执行与无法执行的指令；\\n-p：改变询问密码的提示符号；\\n-s<shell>：执行指定的shell；\\n-u<用户>：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；\\n-v：延长密码有效期限5分钟；\\n-V ：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"指令：需要运行的指令和对应的参数。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"配置sudo必须通过编辑\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sudoers\")]), _vm._v(\"文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"visudo默认的是在\"), _c('a', {\n    attrs: {\n      \"href\": \"#/vi\",\n      \"title\": \"vi命令\"\n    }\n  }, [_vm._v(\"vi\")]), _vm._v(\"里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。visudo不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\">>> sudoers [file](#/file \\\"file命令\\\"): syntax error, line 22 <<\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此时我们有三种选择：键入“e”是重新编辑，键入“x”是不保存退出，键入“Q”是退出并保存。如果真选择Q，那么sudo将不会再运行，直到错误被纠正。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户Foobar可以通过sudo执行所有root可执行的命令。以root身份用visudo打开配置文件，可以看到类似下面几行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Runas [alias](#/alias \\\"alias命令\\\") specification\\n# User privilege specificationroot    ALL=(ALL)ALL\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"我们一看就明白个差不多了，root有所有权限，只要仿照现有root的例子就行，我们在下面加一行（最好用tab作为空白）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar ALL=(ALL)    ALL\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"保存退出后，切换到foobar用户，我们用它的身份执行命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ [ls](#/ls \\\"ls命令\\\") /root\\nls: /root: 权限不够\\n\\n[foobar@localhost ~]$ sudo ls /root\\nPassWord:\\nanaconda-ks.cfg Desktop [install](#/install \\\"install命令\\\").log install.log.syslog\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"好了，我们限制一下foobar的权利，不让他为所欲为。比如我们只想让他像root那样使用ls和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ifconfig\",\n      \"title\": \"ifconfig命令\"\n    }\n  }, [_vm._v(\"ifconfig\")]), _vm._v(\"，把那一行改为：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar localhost=    /sbin/ifconfig,   /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再来执行命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo [head](#/head \\\"head命令\\\") -5 /etc/shadow\\nPassword:\\nSorry, user foobar is not allowed to execute '/usr/bin/head -5 /etc/shadow' [as](#/as \\\"as命令\\\") root on localhost.localdomain.\\n\\n[foobar@localhost ~]$ sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr 00:14:85:EC:E9:9B...\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"现在让我们来看一下那三个ALL到底是什么意思。第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明foobar可以在此主机上执行后面的命令。第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。最后一个ALL当然就是指命令名了。例如，我们想让foobar用户在linux主机上以jimmy或rene的身份执行\"), _c('a', {\n    attrs: {\n      \"href\": \"#/kill\",\n      \"title\": \"kill命令\"\n    }\n  }, [_vm._v(\"kill\")]), _vm._v(\"命令，这样编写配置文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar    linux=(jimmy,rene)    /bin/kill\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"但这还有个问题，foobar到底以jimmy还是rene的身份执行？这时我们应该想到了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u\")]), _vm._v(\"了，它正是用在这种时候。 foobar可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u jimmy kill PID\")]), _vm._v(\"或者\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u rene kill PID\")]), _vm._v(\"，但这样挺麻烦，其实我们可以不必每次加\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-u\")]), _vm._v(\"，把rene或jimmy设为默认的目标用户即可。再在上面加一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Defaults:foobar    runas_default=rene\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Defaults后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Defaults    env_reset\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar localhost=NOPASSWD:     /bin/[cat](#/cat \\\"cat命令\\\"), /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再来sudo一下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg Desktop install.log\\ninstall.log.syslog\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当然，你也可以说“某些命令用户foobar不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从ALL中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"日志与安全\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sudo为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，sudo的日志功能不是自动的，必须由管理员开启。这样来做：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[touch](#/touch \\\"touch命令\\\") /var/log/sudo\\nvi /etc/syslog.conf\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在syslog.conf最后面加一行（必须用tab分割开）并保存：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"local2.debug                    /var/log/sudo\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"重启日志守候进程，\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[ps](#/ps \\\"ps命令\\\") aux [grep](#/grep \\\"grep命令\\\") syslogd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"把得到的syslogd进程的PID（输出的第二列是PID）填入下面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"kill –HUP PID\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这样，sudo就可以写日志了：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg\\nDesktop install.log\\ninstall.log.syslog\\n$cat /var/log/sudoJul 28 22:52:54 localhost sudo:   foobar :\\nTTY=pts/1 ; [pwd](#/pwd \\\"pwd命令\\\")=/home/foobar ; USER=root ; [command](#/command \\\"command命令\\\")=/bin/ls /root\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"不过，有一个小小的“缺陷”，sudo记录日志并不是很忠实：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo cat /etc/shadow > /dev/null\\ncat /var/log/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY=pts/1 ;\\nPWD=/home/foobar ; USER=root ; COMMAND=/bin/cat /etc/shadow\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，sudo根本就没看到重定向。这也有个好处，下面的手段不会得逞：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /root > /etc/shadowbash: /etc/shadow: 权限不够\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sudo 有自己的方式来保护安全。以root的身份执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo-V\")]), _vm._v(\"，查看一下sudo的设置。因为考虑到安全问题，一部分环境变量并没有传递给sudo后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。当然，你也可以通过sudoers来配置这些环境变量。\")])])\n}]}\n\n/***/ }),\n\n/***/ 451:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1040);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/104.f8169bc76dae15270496.js","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3da4eca3\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sudo.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sudo.md\n// module id = 1040\n// module chunks = 104","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_c('p', [_c('strong', [_vm._v(\"sudo命令\")]), _vm._v(\"用来以其他身份来执行命令，预设的身份为root。在\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sudoers\")]), _vm._v(\"中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"语法\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"sudo(选项)(参数)\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"-b：在后台执行指令；\\n-h：显示帮助；\\n-H：将HOME环境变量设为新身份的HOME环境变量；\\n-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。\\n-l：列出目前用户可执行与无法执行的指令；\\n-p：改变询问密码的提示符号；\\n-s<shell>：执行指定的shell；\\n-u<用户>：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；\\n-v：延长密码有效期限5分钟；\\n-V ：显示版本信息。\\n\")])]), _vm._v(\" \"), _c('h3', [_vm._v(\"参数\")]), _vm._v(\" \"), _c('p', [_vm._v(\"指令：需要运行的指令和对应的参数。\")]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _c('p', [_vm._v(\"配置sudo必须通过编辑\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"/etc/sudoers\")]), _vm._v(\"文件，而且只有超级用户才可以修改它，还必须使用visudo编辑。之所以使用visudo有两个原因，一是它能够防止两个用户同时修改它；二是它也能进行有限的语法检查。所以，即使只有你一个超级用户，你也最好用visudo来检查一下语法。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"visudo默认的是在\"), _c('a', {\n    attrs: {\n      \"href\": \"#/vi\",\n      \"title\": \"vi命令\"\n    }\n  }, [_vm._v(\"vi\")]), _vm._v(\"里打开配置文件，用vi来修改文件。我们可以在编译时修改这个默认项。visudo不会擅自保存带有语法错误的配置文件，它会提示你出现的问题，并询问该如何处理，就像：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\">>> sudoers [file](#/file \\\"file命令\\\"): syntax error, line 22 <<\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"此时我们有三种选择：键入“e”是重新编辑，键入“x”是不保存退出，键入“Q”是退出并保存。如果真选择Q，那么sudo将不会再运行，直到错误被纠正。\")]), _vm._v(\" \"), _c('p', [_vm._v(\"现在，我们一起来看一下神秘的配置文件，学一下如何编写它。让我们从一个简单的例子开始：让用户Foobar可以通过sudo执行所有root可执行的命令。以root身份用visudo打开配置文件，可以看到类似下面几行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"# Runas [alias](#/alias \\\"alias命令\\\") specification\\n# User privilege specificationroot    ALL=(ALL)ALL\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"我们一看就明白个差不多了，root有所有权限，只要仿照现有root的例子就行，我们在下面加一行（最好用tab作为空白）：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar ALL=(ALL)    ALL\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"保存退出后，切换到foobar用户，我们用它的身份执行命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ [ls](#/ls \\\"ls命令\\\") /root\\nls: /root: 权限不够\\n\\n[foobar@localhost ~]$ sudo ls /root\\nPassWord:\\nanaconda-ks.cfg Desktop [install](#/install \\\"install命令\\\").log install.log.syslog\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"好了，我们限制一下foobar的权利，不让他为所欲为。比如我们只想让他像root那样使用ls和\"), _c('a', {\n    attrs: {\n      \"href\": \"#/ifconfig\",\n      \"title\": \"ifconfig命令\"\n    }\n  }, [_vm._v(\"ifconfig\")]), _vm._v(\"，把那一行改为：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar localhost=    /sbin/ifconfig,   /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再来执行命令：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo [head](#/head \\\"head命令\\\") -5 /etc/shadow\\nPassword:\\nSorry, user foobar is not allowed to execute '/usr/bin/head -5 /etc/shadow' [as](#/as \\\"as命令\\\") root on localhost.localdomain.\\n\\n[foobar@localhost ~]$ sudo /sbin/ifconfigeth0      Linkencap:Ethernet HWaddr 00:14:85:EC:E9:9B...\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"现在让我们来看一下那三个ALL到底是什么意思。第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明foobar可以在此主机上执行后面的命令。第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。最后一个ALL当然就是指命令名了。例如，我们想让foobar用户在linux主机上以jimmy或rene的身份执行\"), _c('a', {\n    attrs: {\n      \"href\": \"#/kill\",\n      \"title\": \"kill命令\"\n    }\n  }, [_vm._v(\"kill\")]), _vm._v(\"命令，这样编写配置文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar    linux=(jimmy,rene)    /bin/kill\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"但这还有个问题，foobar到底以jimmy还是rene的身份执行？这时我们应该想到了\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u\")]), _vm._v(\"了，它正是用在这种时候。 foobar可以使用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u jimmy kill PID\")]), _vm._v(\"或者\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo -u rene kill PID\")]), _vm._v(\"，但这样挺麻烦，其实我们可以不必每次加\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-u\")]), _vm._v(\"，把rene或jimmy设为默认的目标用户即可。再在上面加一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Defaults:foobar    runas_default=rene\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"Defaults后面如果有冒号，是对后面用户的默认，如果没有，则是对所有用户的默认。就像配置文件中自带的一行：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"Defaults    env_reset\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"另一个问题是，很多时候，我们本来就登录了，每次使用sudo还要输入密码就显得烦琐了。我们可不可以不再输入密码呢？当然可以，我们这样修改配置文件：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"foobar localhost=NOPASSWD:     /bin/[cat](#/cat \\\"cat命令\\\"), /bin/ls\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"再来sudo一下：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg Desktop install.log\\ninstall.log.syslog\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"当然，你也可以说“某些命令用户foobar不可以运行”，通过使用!操作符，但这不是一个好主意。因为，用!操作符来从ALL中“剔出”一些命令一般是没什么效果的，一个用户完全可以把那个命令拷贝到别的地方，换一个名字后再来运行。\")]), _vm._v(\" \"), _c('p', [_c('strong', [_vm._v(\"日志与安全\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sudo为安全考虑得很周到，不仅可以记录日志，还能在有必要时向系统管理员报告。但是，sudo的日志功能不是自动的，必须由管理员开启。这样来做：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[touch](#/touch \\\"touch命令\\\") /var/log/sudo\\nvi /etc/syslog.conf\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"在syslog.conf最后面加一行（必须用tab分割开）并保存：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"local2.debug                    /var/log/sudo\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"重启日志守候进程，\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[ps](#/ps \\\"ps命令\\\") aux [grep](#/grep \\\"grep命令\\\") syslogd\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"把得到的syslogd进程的PID（输出的第二列是PID）填入下面：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"kill –HUP PID\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"这样，sudo就可以写日志了：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /rootanaconda-ks.cfg\\nDesktop install.log\\ninstall.log.syslog\\n$cat /var/log/sudoJul 28 22:52:54 localhost sudo:   foobar :\\nTTY=pts/1 ; [pwd](#/pwd \\\"pwd命令\\\")=/home/foobar ; USER=root ; [command](#/command \\\"command命令\\\")=/bin/ls /root\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"不过，有一个小小的“缺陷”，sudo记录日志并不是很忠实：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo cat /etc/shadow > /dev/null\\ncat /var/log/sudo...Jul 28 23:10:24 localhost sudo:   foobar : TTY=pts/1 ;\\nPWD=/home/foobar ; USER=root ; COMMAND=/bin/cat /etc/shadow\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"重定向没有被记录在案！为什么？因为在命令运行之前，shell把重定向的工作做完了，sudo根本就没看到重定向。这也有个好处，下面的手段不会得逞：\")]), _vm._v(\" \"), _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[foobar@localhost ~]$ sudo ls /root > /etc/shadowbash: /etc/shadow: 权限不够\\n\")])]), _vm._v(\" \"), _c('p', [_vm._v(\"sudo 有自己的方式来保护安全。以root的身份执行\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"sudo-V\")]), _vm._v(\"，查看一下sudo的设置。因为考虑到安全问题，一部分环境变量并没有传递给sudo后面的命令，或者被检查后再传递的，比如：PATH，HOME，SHELL等。当然，你也可以通过sudoers来配置这些环境变量。\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-3da4eca3\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/sudo.md\n// module id = 1340\n// module chunks = 104","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./sudo.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/sudo.md\n// module id = 451\n// module chunks = 104"],"sourceRoot":""}