{"version":3,"sources":["webpack:///static/js/330.7677b19523a024c7ec0d.js","webpack:///./command/iperf.md?9ac3","webpack:///./command/iperf.md","webpack:///./command/iperf.md?514a"],"names":["webpackJsonp","1452","module","exports","render","_vm","this","_h","$createElement","_c","_self","_m","_v","attrs","IPv6","Address","address","staticRenderFns","href","pre","v-pre","221","__webpack_require__","810","Component"],"mappings":"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","file":"static/js/330.7677b19523a024c7ec0d.js","sourcesContent":["webpackJsonp([330],{\n\n/***/ 1452:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_vm._m(0), _vm._v(\" \"), _c('p', [_vm._v(\"iperf分为两种版本，Unix/Linux版和Windows版，Unix/Linux版更新比较快，版本最新。Windows版更新慢。Windows版的iperf叫jperf，或者xjperf。jperf是在iperf基础上开发了更好的UI和新的功能。\")]), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _c('h3', [_vm._v(\"安装iperf\")]), _vm._v(\" \"), _c('p', [_vm._v(\"对于windows版的iperf，直接将解压出来的iperf.exe和cygwin1.dll复制到%systemroot%目录即可，对于linux版的iperf，请使用如下命令安装：\")]), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('table', [_c('tbody', [_vm._m(3), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _vm._m(6), _vm._v(\" \"), _vm._m(7), _vm._v(\" \"), _vm._m(8), _vm._v(\" \"), _vm._m(9), _vm._v(\" \"), _vm._m(10), _vm._v(\" \"), _vm._m(11), _vm._v(\" \"), _vm._m(12), _vm._v(\" \"), _vm._m(13), _vm._v(\" \"), _vm._m(14), _vm._v(\" \"), _vm._m(15), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"-V (from v1.6 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"绑定一个IPv6地址。  \\n服务端：$ iperf -s –V  \\n客户端：$ iperf -c \"), _c('Server', {\n    attrs: {\n      \"IPv6\": \"\",\n      \"Address\": \"\"\n    }\n  }, [_vm._v(\" -V  \\n注意：在1.6.3或更高版本中，指定IPv6地址不需要使用-B参数绑定，在1.6之前的版本则需要。在大多数操作系统中，将响应IPv4客户端映射的IPv4地址。\")])], 1)]), _vm._v(\" \"), _vm._m(16), _vm._v(\" \"), _vm._m(17), _vm._v(\" \"), _vm._m(18), _vm._v(\" \"), _vm._m(19), _vm._v(\" \"), _vm._m(20), _vm._v(\" \"), _vm._m(21), _vm._v(\" \"), _vm._m(22), _vm._v(\" \"), _vm._m(23), _vm._v(\" \"), _vm._m(24), _vm._v(\" \"), _vm._m(25), _vm._v(\" \"), _vm._m(26), _vm._v(\" \"), _vm._m(27), _vm._v(\" \"), _vm._m(28), _vm._v(\" \"), _vm._m(29), _vm._v(\" \"), _vm._m(30), _vm._v(\" \"), _vm._m(31), _vm._v(\" \"), _vm._m(32), _vm._v(\" \"), _vm._m(33), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"-F (from v1.2 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"使用特定的数据流测量带宽，例如指定的文件。  \\n$ iperf -c \"), _c('server', {\n    attrs: {\n      \"address\": \"\"\n    }\n  }, [_vm._v(\" -F <[file](# file=\\\"\\\" \\\"file命令\\\")-name=\\\"\\\"></[file](#>\")])], 1)]), _vm._v(\" \"), _vm._m(34), _vm._v(\" \"), _vm._m(35), _vm._v(\" \"), _vm._m(36), _vm._v(\" \"), _vm._m(37)])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _vm._m(38), _vm._v(\" \"), _vm._m(39), _vm._v(\" \"), _c('p', [_vm._v(\"服务器端：\")]), _vm._v(\" \"), _vm._m(40), _vm._v(\" \"), _c('p', [_vm._v(\"客户端：\")]), _vm._v(\" \"), _vm._m(41), _vm._v(\" \"), _c('p', [_vm._v(\"在udp模式下，以100Mbps为数据发送速率，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。\")]), _vm._v(\" \"), _vm._m(42), _vm._v(\" \"), _c('p', [_vm._v(\"客户端同时向服务器端发起30个连接线程，以5Mbps为数据发送速率。\")]), _vm._v(\" \"), _vm._m(43), _vm._v(\" \"), _c('p', [_vm._v(\"以100M为数据发送速率，进行上下行带宽测试。\")]), _vm._v(\" \"), _vm._m(44), _vm._v(\" \"), _c('p', [_vm._v(\"服务器端：\")]), _vm._v(\" \"), _vm._m(45), _vm._v(\" \"), _c('p', [_vm._v(\"客户端：\")]), _vm._v(\" \"), _vm._m(46), _vm._v(\" \"), _c('p', [_vm._v(\"在tcp模式下，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。\")]), _vm._v(\" \"), _vm._m(47), _vm._v(\" \"), _c('p', [_vm._v(\"客户端同时向服务器端发起30个连接线程。\")]), _vm._v(\" \"), _vm._m(48), _vm._v(\" \"), _c('p', [_vm._v(\"进行上下行带宽测试。\")])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"iperf命令\")]), _vm._v(\"是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"Linux版本下载地址：\"), _c('a', {\n    attrs: {\n      \"href\": \"http://code.google.com/p/iperf/downloads/list\"\n    }\n  }, [_vm._v(\"http://code.google.com/p/iperf/downloads/list\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[gunzip](#/gunzip \\\"gunzip命令\\\") -c iperf-<version>.[tar](#/tar \\\"tar命令\\\").gz | tar -xvf -\\n[cd](#/cd \\\"cd命令\\\") iperf-<version>\\n./configure\\n[make](#/make \\\"make命令\\\")\\nmake [install](#/install \\\"install命令\\\")\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('th', [_vm._v(\"命令行选项\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"客户端与服务器共用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-f, --format [bkmaBKMA]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"格式化带宽数输出。支持的格式有：  \\n'b' = bits/sec 'B' = Bytes/sec  \\n'k' = Kbits/sec 'K' = KBytes/sec  \\n'm' = Mbits/sec 'M' = MBytes/sec  \\n'g' = Gbits/sec 'G' = GBytes/sec  \\n'a' = adaptive bits/sec 'A' = adaptive Bytes/sec  \\n自适应格式是kilo-和mega-二者之一。除了带宽之外的字段都输出为字节，除非指定输出的格式，默认的参数是a。  \\n注意：在计算字节byte时，Kilo = 1024， Mega = 1024^2，Giga = 1024^3。通常，在网络中，Kilo = 1000， Mega = 1000^2， and Giga = 1000^3，所以，Iperf也按此来计算比特（位）。如果这些困扰了你，那么请使用-f b参数，然后亲自计算一下。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-i, --interval #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置每次报告之间的时间间隔，单位为秒。如果设置为非零值，就会按照此时间间隔输出测试报告。默认值为零。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-l, --len #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置读写缓冲区的长度。TCP方式默认为8KB，UDP方式默认为1470字节。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-m, --print_mss\")]), _vm._v(\" \"), _c('td', [_vm._v(\"输出TCP MSS值（通过TCP_MAXSEG支持）。MSS值一般比MTU值小40字节。通常情况\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-p, --port #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置端口，与服务器端的监听端口一致。默认是5001端口，与ttcp的一样。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-u, --udp\")]), _vm._v(\" \"), _c('td', [_vm._v(\"使用UDP方式而不是TCP方式。参看-b选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-[w](#/w \\\"w命令\\\"), --window #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置套接字缓冲区为指定大小。对于TCP方式，此设置为TCP窗口大小。对于UDP方式，此设置为接受UDP数据包的缓冲区大小，限制可以接受数据包的最大值。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-B, --[bind](#/bind \\\"bind命令\\\") [host](#/host \\\"host命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"绑定到主机的多个地址中的一个。对于客户端来说，这个参数设置了出栈接口。对于服务器端来说，这个参数设置入栈接口。这个参数只用于具有多网络接口的主机。在Iperf的UDP模式下，此参数用于绑定和加入一个多播组。使用范围在224.0.0.0至239.255.255.255的多播地址。参考-T参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-C, --compatibility\")]), _vm._v(\" \"), _c('td', [_vm._v(\"与低版本的Iperf使用时，可以使用兼容模式。不需要两端同时使用兼容模式，但是强烈推荐两端同时使用兼容模式。某些情况下，使用某些数据流可以引起1.7版本的服务器端崩溃或引起非预期的连接尝试。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-M, --mss #[KM}\")]), _vm._v(\" \"), _c('td', [_vm._v(\"通过TCP_MAXSEG选项尝试设置TCP最大信息段的值。MSS值的大小通常是TCP/[ip](#/ip \\\"ip命令\\\")头减去40字节。在以太网中，MSS值 为1460字节（MTU1500字节）。许多操作系统不支持此选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-N, --nodelay\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置TCP无延迟选项，禁用Nagle's运算法则。通常情况此选项对于交互程序，例如[telnet](#/telnet \\\"telnet命令\\\")，是禁用的。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"服务器端专用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-s, --server\")]), _vm._v(\" \"), _c('td', [_vm._v(\"Iperf服务器模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-D (v1.2或更高版本)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"Unix平台下Iperf作为后台守护进程运行。在Win32平台下，Iperf将作为服务运行。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-R(v1.2或更高版本，仅用于Windows)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"卸载Iperf服务（如果它在运行）。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-o(v1.2或更高版本，仅用于Windows)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重定向输出到指定文件\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-c, --client host\")]), _vm._v(\" \"), _c('td', [_vm._v(\"如果Iperf运行在服务器模式，并且用-c参数指定一个主机，那么Iperf将只接受指定主机的连接。此参数不能工作于UDP模式。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-P, --parallel #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"服务器关闭之前保持的连接数。默认是0，这意味着永远接受连接。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"客户端专用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-b, --bandwidth #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"UDP模式使用的带宽，单位bits/sec。此选项与-u选项相关。默认值是1 Mbit/sec。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-c, --client host\")]), _vm._v(\" \"), _c('td', [_vm._v(\"运行Iperf的客户端模式，连接到指定的Iperf服务器端。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-d, --dualtest\")]), _vm._v(\" \"), _c('td', [_vm._v(\"运行双测试模式。这将使服务器端反向连接到客户端，使用-L 参数中指定的端口（或默认使用客户端连接到服务器端的端口）。这些在操作的同时就立即完成了。如果你想要一个交互的测试，请尝试-r参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-n, --num #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"传送的缓冲器数量。通常情况，Iperf按照10秒钟发送数据。-n参数跨越此限制，按照指定次数发送指定长度的数据，而不论该操作耗费多少时间。参考-l与-t选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-r, --tradeoff\")]), _vm._v(\" \"), _c('td', [_vm._v(\"往复测试模式。当客户端到服务器端的测试结束时，服务器端通过-l选项指定的端口（或默认为客户端连接到服务器端的端口），反向连接至客户端。当客户端连接终止时，反向连接随即开始。如果需要同时进行双向测试，请尝试-d参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-t, --[time](#/time \\\"time命令\\\") #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置传输的总时间。Iperf在指定的时间内，重复的发送指定长度的数据包。默认是10秒钟。参考-l与-n选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-L, --listenport #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指定服务端反向连接到客户端时使用的端口。默认使用客户端连接至服务端的端口。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-P, --parallel #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"线程数。指定客户端与服务端之间使用的线程数。默认是1线程。需要客户端与服务器端同时使用此参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-S, --tos #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"出栈数据包的服务类型。许多路由器忽略TOS字段。你可以指定这个值，使用以\\\"0x\\\"开始的16进制数，或以\\\"0\\\"开始的8进制数或10进制数。  \\n例如，16进制'0x10' = 8进制'020' = 十进制'16'。TOS值1349就是：  \\nIPTOS_LOWDELAY minimize delay 0x10  \\nIPTOS_THROUGHPUT maximize throughput 0x08  \\nIPTOS_RELIABILITY maximize reliability 0x04  \\nIPTOS_LOWCOST minimize cost 0x02\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-T, --ttl #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"出栈多播数据包的TTL值。这本质上就是数据通过路由器的跳数。默认是1，链接本地。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-I (from v1.2 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"与-F一样，由标准输入输出文件输入数据。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"杂项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-h, --[help](#/help \\\"help命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"显示命令行参考并退出 。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-v, --version\")]), _vm._v(\" \"), _c('td', [_vm._v(\"显示版本信息和编译信息并退出。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"带宽测试通常采用UDP模式，因为能测出极限带宽、时延抖动、丢包率。在进行测试时，首先以链路理论带宽作为数据发送速率进行测试，例如，从客户端到服务器之间的链路的理论带宽为100Mbps，先用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-b 100M\")]), _vm._v(\"进行测试，然后根据测试结果（包括实际带宽，时延抖动和丢包率），再以实际带宽作为数据发送速率进行测试，会发现时延抖动和丢包率比第一次好很多，重复测试几次，就能得出稳定的实际带宽。\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"UDP模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -s\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 100M -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 5M -P 30 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 100M -d -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"TCP模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -s\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1  -P 30 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1  -d -t 60\\n\")])])\n}]}\n\n/***/ }),\n\n/***/ 221:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(810);\n\n/***/ }),\n\n/***/ 810:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  null,\n  /* template */\n  __webpack_require__(1452),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/330.7677b19523a024c7ec0d.js","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('section', [_vm._m(0), _vm._v(\" \"), _c('p', [_vm._v(\"iperf分为两种版本，Unix/Linux版和Windows版，Unix/Linux版更新比较快，版本最新。Windows版更新慢。Windows版的iperf叫jperf，或者xjperf。jperf是在iperf基础上开发了更好的UI和新的功能。\")]), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _c('h3', [_vm._v(\"安装iperf\")]), _vm._v(\" \"), _c('p', [_vm._v(\"对于windows版的iperf，直接将解压出来的iperf.exe和cygwin1.dll复制到%systemroot%目录即可，对于linux版的iperf，请使用如下命令安装：\")]), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('h3', [_vm._v(\"选项\")]), _vm._v(\" \"), _c('table', [_c('tbody', [_vm._m(3), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _vm._m(6), _vm._v(\" \"), _vm._m(7), _vm._v(\" \"), _vm._m(8), _vm._v(\" \"), _vm._m(9), _vm._v(\" \"), _vm._m(10), _vm._v(\" \"), _vm._m(11), _vm._v(\" \"), _vm._m(12), _vm._v(\" \"), _vm._m(13), _vm._v(\" \"), _vm._m(14), _vm._v(\" \"), _vm._m(15), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"-V (from v1.6 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"绑定一个IPv6地址。  \\n服务端：$ iperf -s –V  \\n客户端：$ iperf -c \"), _c('Server', {\n    attrs: {\n      \"IPv6\": \"\",\n      \"Address\": \"\"\n    }\n  }, [_vm._v(\" -V  \\n注意：在1.6.3或更高版本中，指定IPv6地址不需要使用-B参数绑定，在1.6之前的版本则需要。在大多数操作系统中，将响应IPv4客户端映射的IPv4地址。\")])], 1)]), _vm._v(\" \"), _vm._m(16), _vm._v(\" \"), _vm._m(17), _vm._v(\" \"), _vm._m(18), _vm._v(\" \"), _vm._m(19), _vm._v(\" \"), _vm._m(20), _vm._v(\" \"), _vm._m(21), _vm._v(\" \"), _vm._m(22), _vm._v(\" \"), _vm._m(23), _vm._v(\" \"), _vm._m(24), _vm._v(\" \"), _vm._m(25), _vm._v(\" \"), _vm._m(26), _vm._v(\" \"), _vm._m(27), _vm._v(\" \"), _vm._m(28), _vm._v(\" \"), _vm._m(29), _vm._v(\" \"), _vm._m(30), _vm._v(\" \"), _vm._m(31), _vm._v(\" \"), _vm._m(32), _vm._v(\" \"), _vm._m(33), _vm._v(\" \"), _c('tr', [_c('td', [_vm._v(\"-F (from v1.2 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"使用特定的数据流测量带宽，例如指定的文件。  \\n$ iperf -c \"), _c('server', {\n    attrs: {\n      \"address\": \"\"\n    }\n  }, [_vm._v(\" -F <[file](# file=\\\"\\\" \\\"file命令\\\")-name=\\\"\\\"></[file](#>\")])], 1)]), _vm._v(\" \"), _vm._m(34), _vm._v(\" \"), _vm._m(35), _vm._v(\" \"), _vm._m(36), _vm._v(\" \"), _vm._m(37)])]), _vm._v(\" \"), _c('h3', [_vm._v(\"实例\")]), _vm._v(\" \"), _vm._m(38), _vm._v(\" \"), _vm._m(39), _vm._v(\" \"), _c('p', [_vm._v(\"服务器端：\")]), _vm._v(\" \"), _vm._m(40), _vm._v(\" \"), _c('p', [_vm._v(\"客户端：\")]), _vm._v(\" \"), _vm._m(41), _vm._v(\" \"), _c('p', [_vm._v(\"在udp模式下，以100Mbps为数据发送速率，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。\")]), _vm._v(\" \"), _vm._m(42), _vm._v(\" \"), _c('p', [_vm._v(\"客户端同时向服务器端发起30个连接线程，以5Mbps为数据发送速率。\")]), _vm._v(\" \"), _vm._m(43), _vm._v(\" \"), _c('p', [_vm._v(\"以100M为数据发送速率，进行上下行带宽测试。\")]), _vm._v(\" \"), _vm._m(44), _vm._v(\" \"), _c('p', [_vm._v(\"服务器端：\")]), _vm._v(\" \"), _vm._m(45), _vm._v(\" \"), _c('p', [_vm._v(\"客户端：\")]), _vm._v(\" \"), _vm._m(46), _vm._v(\" \"), _c('p', [_vm._v(\"在tcp模式下，客户端到服务器192.168.1.1上传带宽测试，测试时间为60秒。\")]), _vm._v(\" \"), _vm._m(47), _vm._v(\" \"), _c('p', [_vm._v(\"客户端同时向服务器端发起30个连接线程。\")]), _vm._v(\" \"), _vm._m(48), _vm._v(\" \"), _c('p', [_vm._v(\"进行上下行带宽测试。\")])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"iperf命令\")]), _vm._v(\"是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"Linux版本下载地址：\"), _c('a', {\n    attrs: {\n      \"href\": \"http://code.google.com/p/iperf/downloads/list\"\n    }\n  }, [_vm._v(\"http://code.google.com/p/iperf/downloads/list\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"[gunzip](#/gunzip \\\"gunzip命令\\\") -c iperf-<version>.[tar](#/tar \\\"tar命令\\\").gz | tar -xvf -\\n[cd](#/cd \\\"cd命令\\\") iperf-<version>\\n./configure\\n[make](#/make \\\"make命令\\\")\\nmake [install](#/install \\\"install命令\\\")\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('th', [_vm._v(\"命令行选项\")]), _vm._v(\" \"), _c('th', [_vm._v(\"描述\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"客户端与服务器共用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-f, --format [bkmaBKMA]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"格式化带宽数输出。支持的格式有：  \\n'b' = bits/sec 'B' = Bytes/sec  \\n'k' = Kbits/sec 'K' = KBytes/sec  \\n'm' = Mbits/sec 'M' = MBytes/sec  \\n'g' = Gbits/sec 'G' = GBytes/sec  \\n'a' = adaptive bits/sec 'A' = adaptive Bytes/sec  \\n自适应格式是kilo-和mega-二者之一。除了带宽之外的字段都输出为字节，除非指定输出的格式，默认的参数是a。  \\n注意：在计算字节byte时，Kilo = 1024， Mega = 1024^2，Giga = 1024^3。通常，在网络中，Kilo = 1000， Mega = 1000^2， and Giga = 1000^3，所以，Iperf也按此来计算比特（位）。如果这些困扰了你，那么请使用-f b参数，然后亲自计算一下。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-i, --interval #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置每次报告之间的时间间隔，单位为秒。如果设置为非零值，就会按照此时间间隔输出测试报告。默认值为零。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-l, --len #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置读写缓冲区的长度。TCP方式默认为8KB，UDP方式默认为1470字节。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-m, --print_mss\")]), _vm._v(\" \"), _c('td', [_vm._v(\"输出TCP MSS值（通过TCP_MAXSEG支持）。MSS值一般比MTU值小40字节。通常情况\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-p, --port #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置端口，与服务器端的监听端口一致。默认是5001端口，与ttcp的一样。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-u, --udp\")]), _vm._v(\" \"), _c('td', [_vm._v(\"使用UDP方式而不是TCP方式。参看-b选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-[w](#/w \\\"w命令\\\"), --window #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置套接字缓冲区为指定大小。对于TCP方式，此设置为TCP窗口大小。对于UDP方式，此设置为接受UDP数据包的缓冲区大小，限制可以接受数据包的最大值。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-B, --[bind](#/bind \\\"bind命令\\\") [host](#/host \\\"host命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"绑定到主机的多个地址中的一个。对于客户端来说，这个参数设置了出栈接口。对于服务器端来说，这个参数设置入栈接口。这个参数只用于具有多网络接口的主机。在Iperf的UDP模式下，此参数用于绑定和加入一个多播组。使用范围在224.0.0.0至239.255.255.255的多播地址。参考-T参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-C, --compatibility\")]), _vm._v(\" \"), _c('td', [_vm._v(\"与低版本的Iperf使用时，可以使用兼容模式。不需要两端同时使用兼容模式，但是强烈推荐两端同时使用兼容模式。某些情况下，使用某些数据流可以引起1.7版本的服务器端崩溃或引起非预期的连接尝试。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-M, --mss #[KM}\")]), _vm._v(\" \"), _c('td', [_vm._v(\"通过TCP_MAXSEG选项尝试设置TCP最大信息段的值。MSS值的大小通常是TCP/[ip](#/ip \\\"ip命令\\\")头减去40字节。在以太网中，MSS值 为1460字节（MTU1500字节）。许多操作系统不支持此选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-N, --nodelay\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置TCP无延迟选项，禁用Nagle's运算法则。通常情况此选项对于交互程序，例如[telnet](#/telnet \\\"telnet命令\\\")，是禁用的。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"服务器端专用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-s, --server\")]), _vm._v(\" \"), _c('td', [_vm._v(\"Iperf服务器模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-D (v1.2或更高版本)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"Unix平台下Iperf作为后台守护进程运行。在Win32平台下，Iperf将作为服务运行。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-R(v1.2或更高版本，仅用于Windows)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"卸载Iperf服务（如果它在运行）。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-o(v1.2或更高版本，仅用于Windows)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"重定向输出到指定文件\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-c, --client host\")]), _vm._v(\" \"), _c('td', [_vm._v(\"如果Iperf运行在服务器模式，并且用-c参数指定一个主机，那么Iperf将只接受指定主机的连接。此参数不能工作于UDP模式。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-P, --parallel #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"服务器关闭之前保持的连接数。默认是0，这意味着永远接受连接。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"客户端专用选项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-b, --bandwidth #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"UDP模式使用的带宽，单位bits/sec。此选项与-u选项相关。默认值是1 Mbit/sec。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-c, --client host\")]), _vm._v(\" \"), _c('td', [_vm._v(\"运行Iperf的客户端模式，连接到指定的Iperf服务器端。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-d, --dualtest\")]), _vm._v(\" \"), _c('td', [_vm._v(\"运行双测试模式。这将使服务器端反向连接到客户端，使用-L 参数中指定的端口（或默认使用客户端连接到服务器端的端口）。这些在操作的同时就立即完成了。如果你想要一个交互的测试，请尝试-r参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-n, --num #[KM]\")]), _vm._v(\" \"), _c('td', [_vm._v(\"传送的缓冲器数量。通常情况，Iperf按照10秒钟发送数据。-n参数跨越此限制，按照指定次数发送指定长度的数据，而不论该操作耗费多少时间。参考-l与-t选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-r, --tradeoff\")]), _vm._v(\" \"), _c('td', [_vm._v(\"往复测试模式。当客户端到服务器端的测试结束时，服务器端通过-l选项指定的端口（或默认为客户端连接到服务器端的端口），反向连接至客户端。当客户端连接终止时，反向连接随即开始。如果需要同时进行双向测试，请尝试-d参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-t, --[time](#/time \\\"time命令\\\") #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"设置传输的总时间。Iperf在指定的时间内，重复的发送指定长度的数据包。默认是10秒钟。参考-l与-n选项。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-L, --listenport #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"指定服务端反向连接到客户端时使用的端口。默认使用客户端连接至服务端的端口。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-P, --parallel #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"线程数。指定客户端与服务端之间使用的线程数。默认是1线程。需要客户端与服务器端同时使用此参数。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-S, --tos #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"出栈数据包的服务类型。许多路由器忽略TOS字段。你可以指定这个值，使用以\\\"0x\\\"开始的16进制数，或以\\\"0\\\"开始的8进制数或10进制数。  \\n例如，16进制'0x10' = 8进制'020' = 十进制'16'。TOS值1349就是：  \\nIPTOS_LOWDELAY minimize delay 0x10  \\nIPTOS_THROUGHPUT maximize throughput 0x08  \\nIPTOS_RELIABILITY maximize reliability 0x04  \\nIPTOS_LOWCOST minimize cost 0x02\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-T, --ttl #\")]), _vm._v(\" \"), _c('td', [_vm._v(\"出栈多播数据包的TTL值。这本质上就是数据通过路由器的跳数。默认是1，链接本地。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-I (from v1.2 or higher)\")]), _vm._v(\" \"), _c('td', [_vm._v(\"与-F一样，由标准输入输出文件输入数据。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"杂项\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-h, --[help](#/help \\\"help命令\\\")\")]), _vm._v(\" \"), _c('td', [_vm._v(\"显示命令行参考并退出 。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('tr', [_c('td', [_vm._v(\"-v, --version\")]), _vm._v(\" \"), _c('td', [_vm._v(\"显示版本信息和编译信息并退出。\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"带宽测试通常采用UDP模式，因为能测出极限带宽、时延抖动、丢包率。在进行测试时，首先以链路理论带宽作为数据发送速率进行测试，例如，从客户端到服务器之间的链路的理论带宽为100Mbps，先用\"), _c('code', {\n    pre: true\n  }, [_vm._v(\"-b 100M\")]), _vm._v(\"进行测试，然后根据测试结果（包括实际带宽，时延抖动和丢包率），再以实际带宽作为数据发送速率进行测试，会发现时延抖动和丢包率比第一次好很多，重复测试几次，就能得出稳定的实际带宽。\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"UDP模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -s\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 100M -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 5M -P 30 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -u -c 192.168.1.1 -b 100M -d -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('strong', [_vm._v(\"TCP模式\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -s\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1  -P 30 -t 60\\n\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    pre: true\n  }, [_c('code', {\n    attrs: {\n      \"v-pre\": \"\"\n    }\n  }, [_vm._v(\"iperf -c 192.168.1.1  -d -t 60\\n\")])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-61a567a8\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/iperf.md\n// module id = 1452\n// module chunks = 330","module.exports = require(\"!!vue-loader!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./iperf.md\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./command/iperf.md\n// module id = 221\n// module chunks = 330","var Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  null,\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-61a567a8\\\",\\\"hasScoped\\\":false}!../node_modules/vue-loader/lib/selector?type=template&index=0!../node_modules/vue-markdown-loader/lib/markdown-compiler.js?raw!./iperf.md\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader!./~/vue-markdown-loader/lib/markdown-compiler.js?raw!./command/iperf.md\n// module id = 810\n// module chunks = 330"],"sourceRoot":""}